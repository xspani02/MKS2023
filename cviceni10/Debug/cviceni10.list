
cviceni10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f58  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003108  08003108  00013108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003168  08003168  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003168  08003168  00013168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003170  08003170  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003170  08003170  00013170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003174  08003174  00013174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000001b4  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000021c  2000021c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007cc9  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000159e  00000000  00000000  00027da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006f0  00000000  00000000  00029348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000540  00000000  00000000  00029a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000234e5  00000000  00000000  00029f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00008b2e  00000000  00000000  0004d45d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d33e2  00000000  00000000  00055f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000022d8  00000000  00000000  00129370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0012b648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080030f0 	.word	0x080030f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	080030f0 	.word	0x080030f0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d013      	beq.n	80005cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d00b      	beq.n	80005cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005b4:	e000      	b.n	80005b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f9      	beq.n	80005b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005cc:	687b      	ldr	r3, [r7, #4]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
ITM_SendChar(ch);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ffd1 	bl	800058c <ITM_SendChar>
return 0;
 80005ea:	2300      	movs	r3, #0
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fb45 	bl	8000c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f81f 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f8b1 	bl	8000768 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000606:	f000 f885 	bl	8000714 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Start\n");
 800060a:	480a      	ldr	r0, [pc, #40]	; (8000634 <main+0x40>)
 800060c:	f001 ff08 	bl	8002420 <puts>
  uint8_t i = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000614:	2101      	movs	r1, #1
 8000616:	4808      	ldr	r0, [pc, #32]	; (8000638 <main+0x44>)
 8000618:	f000 fe77 	bl	800130a <HAL_GPIO_TogglePin>
	  printf("Tick %d\n", i++);
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	71fa      	strb	r2, [r7, #7]
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <main+0x48>)
 8000626:	f001 fe95 	bl	8002354 <iprintf>
	  HAL_Delay(250);
 800062a:	20fa      	movs	r0, #250	; 0xfa
 800062c:	f000 fb9e 	bl	8000d6c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000630:	e7f0      	b.n	8000614 <main+0x20>
 8000632:	bf00      	nop
 8000634:	08003108 	.word	0x08003108
 8000638:	40020400 	.word	0x40020400
 800063c:	08003110 	.word	0x08003110

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f001 ffc6 	bl	80025e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a27      	ldr	r2, [pc, #156]	; (800070c <SystemClock_Config+0xcc>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <SystemClock_Config+0xd0>)
 800068a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b4:	23a8      	movs	r3, #168	; 0xa8
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006bc:	2307      	movs	r3, #7
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fe3b 	bl	8001340 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d0:	f000 f95a 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2105      	movs	r1, #5
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 f89c 	bl	8001830 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fe:	f000 f943 	bl	8000988 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	; 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_USART3_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART3_UART_Init+0x4c>)
 800074c:	f001 fa90 	bl	8001c70 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f000 f917 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000084 	.word	0x20000084
 8000764:	40004800 	.word	0x40004800

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08c      	sub	sp, #48	; 0x30
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
 8000782:	4b7c      	ldr	r3, [pc, #496]	; (8000974 <MX_GPIO_Init+0x20c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a7b      	ldr	r2, [pc, #492]	; (8000974 <MX_GPIO_Init+0x20c>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b79      	ldr	r3, [pc, #484]	; (8000974 <MX_GPIO_Init+0x20c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	4b75      	ldr	r3, [pc, #468]	; (8000974 <MX_GPIO_Init+0x20c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a74      	ldr	r2, [pc, #464]	; (8000974 <MX_GPIO_Init+0x20c>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b72      	ldr	r3, [pc, #456]	; (8000974 <MX_GPIO_Init+0x20c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	4b6e      	ldr	r3, [pc, #440]	; (8000974 <MX_GPIO_Init+0x20c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a6d      	ldr	r2, [pc, #436]	; (8000974 <MX_GPIO_Init+0x20c>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b6b      	ldr	r3, [pc, #428]	; (8000974 <MX_GPIO_Init+0x20c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	4b67      	ldr	r3, [pc, #412]	; (8000974 <MX_GPIO_Init+0x20c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a66      	ldr	r2, [pc, #408]	; (8000974 <MX_GPIO_Init+0x20c>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b64      	ldr	r3, [pc, #400]	; (8000974 <MX_GPIO_Init+0x20c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	4b60      	ldr	r3, [pc, #384]	; (8000974 <MX_GPIO_Init+0x20c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a5f      	ldr	r2, [pc, #380]	; (8000974 <MX_GPIO_Init+0x20c>)
 80007f8:	f043 0308 	orr.w	r3, r3, #8
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b5d      	ldr	r3, [pc, #372]	; (8000974 <MX_GPIO_Init+0x20c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0308 	and.w	r3, r3, #8
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b59      	ldr	r3, [pc, #356]	; (8000974 <MX_GPIO_Init+0x20c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a58      	ldr	r2, [pc, #352]	; (8000974 <MX_GPIO_Init+0x20c>)
 8000814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b56      	ldr	r3, [pc, #344]	; (8000974 <MX_GPIO_Init+0x20c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f244 0181 	movw	r1, #16513	; 0x4081
 800082c:	4852      	ldr	r0, [pc, #328]	; (8000978 <MX_GPIO_Init+0x210>)
 800082e:	f000 fd53 	bl	80012d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2140      	movs	r1, #64	; 0x40
 8000836:	4851      	ldr	r0, [pc, #324]	; (800097c <MX_GPIO_Init+0x214>)
 8000838:	f000 fd4e 	bl	80012d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800083c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000842:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	484b      	ldr	r0, [pc, #300]	; (8000980 <MX_GPIO_Init+0x218>)
 8000854:	f000 fb94 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000858:	2332      	movs	r3, #50	; 0x32
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000868:	230b      	movs	r3, #11
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	4843      	ldr	r0, [pc, #268]	; (8000980 <MX_GPIO_Init+0x218>)
 8000874:	f000 fb84 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000878:	2386      	movs	r3, #134	; 0x86
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000888:	230b      	movs	r3, #11
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	483c      	ldr	r0, [pc, #240]	; (8000984 <MX_GPIO_Init+0x21c>)
 8000894:	f000 fb74 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000898:	f244 0381 	movw	r3, #16513	; 0x4081
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4831      	ldr	r0, [pc, #196]	; (8000978 <MX_GPIO_Init+0x210>)
 80008b2:	f000 fb65 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c8:	230b      	movs	r3, #11
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4829      	ldr	r0, [pc, #164]	; (8000978 <MX_GPIO_Init+0x210>)
 80008d4:	f000 fb54 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008d8:	2340      	movs	r3, #64	; 0x40
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4823      	ldr	r0, [pc, #140]	; (800097c <MX_GPIO_Init+0x214>)
 80008f0:	f000 fb46 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	481d      	ldr	r0, [pc, #116]	; (800097c <MX_GPIO_Init+0x214>)
 8000908:	f000 fb3a 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800090c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800091e:	230a      	movs	r3, #10
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4816      	ldr	r0, [pc, #88]	; (8000984 <MX_GPIO_Init+0x21c>)
 800092a:	f000 fb29 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800092e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4810      	ldr	r0, [pc, #64]	; (8000984 <MX_GPIO_Init+0x21c>)
 8000944:	f000 fb1c 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000948:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800095a:	230b      	movs	r3, #11
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_GPIO_Init+0x214>)
 8000966:	f000 fb0b 	bl	8000f80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800096a:	bf00      	nop
 800096c:	3730      	adds	r7, #48	; 0x30
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40020400 	.word	0x40020400
 800097c:	40021800 	.word	0x40021800
 8000980:	40020800 	.word	0x40020800
 8000984:	40020000 	.word	0x40020000

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a0f      	ldr	r2, [pc, #60]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <HAL_UART_MspInit+0x84>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d12c      	bne.n	8000a60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a17      	ldr	r2, [pc, #92]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a2c:	f043 0308 	orr.w	r3, r3, #8
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_UART_MspInit+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a50:	2307      	movs	r3, #7
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <HAL_UART_MspInit+0x8c>)
 8000a5c:	f000 fa90 	bl	8000f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40004800 	.word	0x40004800
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020c00 	.word	0x40020c00

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <NMI_Handler+0x4>

08000a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <MemManage_Handler+0x4>

08000a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac0:	f000 f934 	bl	8000d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	e00a      	b.n	8000af0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ada:	f3af 8000 	nop.w
 8000ade:	4601      	mov	r1, r0
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	60ba      	str	r2, [r7, #8]
 8000ae6:	b2ca      	uxtb	r2, r1
 8000ae8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	3301      	adds	r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	dbf0      	blt.n	8000ada <_read+0x12>
  }

  return len;
 8000af8:	687b      	ldr	r3, [r7, #4]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b086      	sub	sp, #24
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	60f8      	str	r0, [r7, #12]
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	e009      	b.n	8000b28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	60ba      	str	r2, [r7, #8]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fd5c 	bl	80005da <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	dbf1      	blt.n	8000b14 <_write+0x12>
  }
  return len;
 8000b30:	687b      	ldr	r3, [r7, #4]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <_close>:

int _close(int file)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b62:	605a      	str	r2, [r3, #4]
  return 0;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <_isatty>:

int _isatty(int file)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bac:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <_sbrk+0x5c>)
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <_sbrk+0x60>)
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d102      	bne.n	8000bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <_sbrk+0x64>)
 8000bc2:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <_sbrk+0x68>)
 8000bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d207      	bcs.n	8000be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd4:	f001 fd52 	bl	800267c <__errno>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	220c      	movs	r2, #12
 8000bdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
 8000be2:	e009      	b.n	8000bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bea:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <_sbrk+0x64>)
 8000bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20030000 	.word	0x20030000
 8000c04:	00000400 	.word	0x00000400
 8000c08:	200000c8 	.word	0x200000c8
 8000c0c:	20000220 	.word	0x20000220

08000c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <SystemInit+0x20>)
 8000c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <SystemInit+0x20>)
 8000c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c6c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c3a:	490e      	ldr	r1, [pc, #56]	; (8000c74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c3c:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c50:	4c0b      	ldr	r4, [pc, #44]	; (8000c80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c5e:	f7ff ffd7 	bl	8000c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c62:	f001 fd11 	bl	8002688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c66:	f7ff fcc5 	bl	80005f4 <main>
  bx  lr    
 8000c6a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c6c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c78:	08003178 	.word	0x08003178
  ldr r2, =_sbss
 8000c7c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c80:	2000021c 	.word	0x2000021c

08000c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC_IRQHandler>
	...

08000c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <HAL_Init+0x40>)
 8000c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_Init+0x40>)
 8000c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_Init+0x40>)
 8000caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f931 	bl	8000f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f000 f808 	bl	8000ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cbc:	f7ff fe6a 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023c00 	.word	0x40023c00

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_InitTick+0x54>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x58>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f93b 	bl	8000f66 <HAL_SYSTICK_Config>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00e      	b.n	8000d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	d80a      	bhi.n	8000d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d00:	2200      	movs	r2, #0
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f000 f911 	bl	8000f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d0c:	4a06      	ldr	r2, [pc, #24]	; (8000d28 <HAL_InitTick+0x5c>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e000      	b.n	8000d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000008 	.word	0x20000008
 8000d28:	20000004 	.word	0x20000004

08000d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x20>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x24>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <HAL_IncTick+0x24>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	200000cc 	.word	0x200000cc

08000d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <HAL_GetTick+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	200000cc 	.word	0x200000cc

08000d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d74:	f7ff ffee 	bl	8000d54 <HAL_GetTick>
 8000d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d84:	d005      	beq.n	8000d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_Delay+0x44>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4413      	add	r3, r2
 8000d90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d92:	bf00      	nop
 8000d94:	f7ff ffde 	bl	8000d54 <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d8f7      	bhi.n	8000d94 <HAL_Delay+0x28>
  {
  }
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000008 	.word	0x20000008

08000db4 <__NVIC_SetPriorityGrouping>:
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de6:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	60d3      	str	r3, [r2, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_GetPriorityGrouping>:
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <__NVIC_GetPriorityGrouping+0x18>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	f003 0307 	and.w	r3, r3, #7
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_SetPriority>:
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	; (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	; (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <SysTick_Config>:
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee4:	d301      	bcc.n	8000eea <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00f      	b.n	8000f0a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <SysTick_Config+0x40>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f7ff ff8e 	bl	8000e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <SysTick_Config+0x40>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <SysTick_Config+0x40>)
 8000f04:	2207      	movs	r2, #7
 8000f06:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	e000e010 	.word	0xe000e010

08000f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ff47 	bl	8000db4 <__NVIC_SetPriorityGrouping>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f40:	f7ff ff5c 	bl	8000dfc <__NVIC_GetPriorityGrouping>
 8000f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f7ff ff8e 	bl	8000e6c <NVIC_EncodePriority>
 8000f50:	4602      	mov	r2, r0
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff5d 	bl	8000e18 <__NVIC_SetPriority>
}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffb0 	bl	8000ed4 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	; 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	e177      	b.n	800128c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	f040 8166 	bne.w	8001286 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d005      	beq.n	8000fd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d130      	bne.n	8001034 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	2203      	movs	r2, #3
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001008:	2201      	movs	r2, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	091b      	lsrs	r3, r3, #4
 800101e:	f003 0201 	and.w	r2, r3, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b03      	cmp	r3, #3
 800103e:	d017      	beq.n	8001070 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2203      	movs	r2, #3
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d123      	bne.n	80010c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	08da      	lsrs	r2, r3, #3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3208      	adds	r2, #8
 8001084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	220f      	movs	r2, #15
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	691a      	ldr	r2, [r3, #16]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	08da      	lsrs	r2, r3, #3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3208      	adds	r2, #8
 80010be:	69b9      	ldr	r1, [r7, #24]
 80010c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0203 	and.w	r2, r3, #3
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 80c0 	beq.w	8001286 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b66      	ldr	r3, [pc, #408]	; (80012a4 <HAL_GPIO_Init+0x324>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	4a65      	ldr	r2, [pc, #404]	; (80012a4 <HAL_GPIO_Init+0x324>)
 8001110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001114:	6453      	str	r3, [r2, #68]	; 0x44
 8001116:	4b63      	ldr	r3, [pc, #396]	; (80012a4 <HAL_GPIO_Init+0x324>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001122:	4a61      	ldr	r2, [pc, #388]	; (80012a8 <HAL_GPIO_Init+0x328>)
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	220f      	movs	r2, #15
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a58      	ldr	r2, [pc, #352]	; (80012ac <HAL_GPIO_Init+0x32c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d037      	beq.n	80011be <HAL_GPIO_Init+0x23e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a57      	ldr	r2, [pc, #348]	; (80012b0 <HAL_GPIO_Init+0x330>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d031      	beq.n	80011ba <HAL_GPIO_Init+0x23a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a56      	ldr	r2, [pc, #344]	; (80012b4 <HAL_GPIO_Init+0x334>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d02b      	beq.n	80011b6 <HAL_GPIO_Init+0x236>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a55      	ldr	r2, [pc, #340]	; (80012b8 <HAL_GPIO_Init+0x338>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d025      	beq.n	80011b2 <HAL_GPIO_Init+0x232>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a54      	ldr	r2, [pc, #336]	; (80012bc <HAL_GPIO_Init+0x33c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d01f      	beq.n	80011ae <HAL_GPIO_Init+0x22e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a53      	ldr	r2, [pc, #332]	; (80012c0 <HAL_GPIO_Init+0x340>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d019      	beq.n	80011aa <HAL_GPIO_Init+0x22a>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a52      	ldr	r2, [pc, #328]	; (80012c4 <HAL_GPIO_Init+0x344>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d013      	beq.n	80011a6 <HAL_GPIO_Init+0x226>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a51      	ldr	r2, [pc, #324]	; (80012c8 <HAL_GPIO_Init+0x348>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d00d      	beq.n	80011a2 <HAL_GPIO_Init+0x222>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a50      	ldr	r2, [pc, #320]	; (80012cc <HAL_GPIO_Init+0x34c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d007      	beq.n	800119e <HAL_GPIO_Init+0x21e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4f      	ldr	r2, [pc, #316]	; (80012d0 <HAL_GPIO_Init+0x350>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d101      	bne.n	800119a <HAL_GPIO_Init+0x21a>
 8001196:	2309      	movs	r3, #9
 8001198:	e012      	b.n	80011c0 <HAL_GPIO_Init+0x240>
 800119a:	230a      	movs	r3, #10
 800119c:	e010      	b.n	80011c0 <HAL_GPIO_Init+0x240>
 800119e:	2308      	movs	r3, #8
 80011a0:	e00e      	b.n	80011c0 <HAL_GPIO_Init+0x240>
 80011a2:	2307      	movs	r3, #7
 80011a4:	e00c      	b.n	80011c0 <HAL_GPIO_Init+0x240>
 80011a6:	2306      	movs	r3, #6
 80011a8:	e00a      	b.n	80011c0 <HAL_GPIO_Init+0x240>
 80011aa:	2305      	movs	r3, #5
 80011ac:	e008      	b.n	80011c0 <HAL_GPIO_Init+0x240>
 80011ae:	2304      	movs	r3, #4
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x240>
 80011b2:	2303      	movs	r3, #3
 80011b4:	e004      	b.n	80011c0 <HAL_GPIO_Init+0x240>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e002      	b.n	80011c0 <HAL_GPIO_Init+0x240>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <HAL_GPIO_Init+0x240>
 80011be:	2300      	movs	r3, #0
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	f002 0203 	and.w	r2, r2, #3
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	4093      	lsls	r3, r2
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d0:	4935      	ldr	r1, [pc, #212]	; (80012a8 <HAL_GPIO_Init+0x328>)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	3302      	adds	r3, #2
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011de:	4b3d      	ldr	r3, [pc, #244]	; (80012d4 <HAL_GPIO_Init+0x354>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001202:	4a34      	ldr	r2, [pc, #208]	; (80012d4 <HAL_GPIO_Init+0x354>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001208:	4b32      	ldr	r3, [pc, #200]	; (80012d4 <HAL_GPIO_Init+0x354>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800122c:	4a29      	ldr	r2, [pc, #164]	; (80012d4 <HAL_GPIO_Init+0x354>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001232:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <HAL_GPIO_Init+0x354>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001256:	4a1f      	ldr	r2, [pc, #124]	; (80012d4 <HAL_GPIO_Init+0x354>)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800125c:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <HAL_GPIO_Init+0x354>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <HAL_GPIO_Init+0x354>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3301      	adds	r3, #1
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	2b0f      	cmp	r3, #15
 8001290:	f67f ae84 	bls.w	8000f9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3724      	adds	r7, #36	; 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40013800 	.word	0x40013800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40021400 	.word	0x40021400
 80012c4:	40021800 	.word	0x40021800
 80012c8:	40021c00 	.word	0x40021c00
 80012cc:	40022000 	.word	0x40022000
 80012d0:	40022400 	.word	0x40022400
 80012d4:	40013c00 	.word	0x40013c00

080012d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
 80012e4:	4613      	mov	r3, r2
 80012e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e8:	787b      	ldrb	r3, [r7, #1]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f4:	e003      	b.n	80012fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	041a      	lsls	r2, r3, #16
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	619a      	str	r2, [r3, #24]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800130a:	b480      	push	{r7}
 800130c:	b085      	sub	sp, #20
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	460b      	mov	r3, r1
 8001314:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800131c:	887a      	ldrh	r2, [r7, #2]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4013      	ands	r3, r2
 8001322:	041a      	lsls	r2, r3, #16
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	43d9      	mvns	r1, r3
 8001328:	887b      	ldrh	r3, [r7, #2]
 800132a:	400b      	ands	r3, r1
 800132c:	431a      	orrs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	619a      	str	r2, [r3, #24]
}
 8001332:	bf00      	nop
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e267      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d075      	beq.n	800144a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800135e:	4b88      	ldr	r3, [pc, #544]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	2b04      	cmp	r3, #4
 8001368:	d00c      	beq.n	8001384 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800136a:	4b85      	ldr	r3, [pc, #532]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001372:	2b08      	cmp	r3, #8
 8001374:	d112      	bne.n	800139c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001376:	4b82      	ldr	r3, [pc, #520]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001382:	d10b      	bne.n	800139c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001384:	4b7e      	ldr	r3, [pc, #504]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d05b      	beq.n	8001448 <HAL_RCC_OscConfig+0x108>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d157      	bne.n	8001448 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e242      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a4:	d106      	bne.n	80013b4 <HAL_RCC_OscConfig+0x74>
 80013a6:	4b76      	ldr	r3, [pc, #472]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a75      	ldr	r2, [pc, #468]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 80013ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	e01d      	b.n	80013f0 <HAL_RCC_OscConfig+0xb0>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013bc:	d10c      	bne.n	80013d8 <HAL_RCC_OscConfig+0x98>
 80013be:	4b70      	ldr	r3, [pc, #448]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a6f      	ldr	r2, [pc, #444]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 80013c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	4b6d      	ldr	r3, [pc, #436]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a6c      	ldr	r2, [pc, #432]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 80013d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e00b      	b.n	80013f0 <HAL_RCC_OscConfig+0xb0>
 80013d8:	4b69      	ldr	r3, [pc, #420]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a68      	ldr	r2, [pc, #416]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 80013de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b66      	ldr	r3, [pc, #408]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a65      	ldr	r2, [pc, #404]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 80013ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d013      	beq.n	8001420 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fcac 	bl	8000d54 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff fca8 	bl	8000d54 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	; 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e207      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001412:	4b5b      	ldr	r3, [pc, #364]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0xc0>
 800141e:	e014      	b.n	800144a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fc98 	bl	8000d54 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fc94 	bl	8000d54 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e1f3      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143a:	4b51      	ldr	r3, [pc, #324]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0xe8>
 8001446:	e000      	b.n	800144a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d063      	beq.n	800151e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001456:	4b4a      	ldr	r3, [pc, #296]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00b      	beq.n	800147a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001462:	4b47      	ldr	r3, [pc, #284]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800146a:	2b08      	cmp	r3, #8
 800146c:	d11c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800146e:	4b44      	ldr	r3, [pc, #272]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d116      	bne.n	80014a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147a:	4b41      	ldr	r3, [pc, #260]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d005      	beq.n	8001492 <HAL_RCC_OscConfig+0x152>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d001      	beq.n	8001492 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e1c7      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001492:	4b3b      	ldr	r3, [pc, #236]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	4937      	ldr	r1, [pc, #220]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a6:	e03a      	b.n	800151e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d020      	beq.n	80014f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b0:	4b34      	ldr	r3, [pc, #208]	; (8001584 <HAL_RCC_OscConfig+0x244>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b6:	f7ff fc4d 	bl	8000d54 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014be:	f7ff fc49 	bl	8000d54 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e1a8      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d0:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014dc:	4b28      	ldr	r3, [pc, #160]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4925      	ldr	r1, [pc, #148]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	600b      	str	r3, [r1, #0]
 80014f0:	e015      	b.n	800151e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f2:	4b24      	ldr	r3, [pc, #144]	; (8001584 <HAL_RCC_OscConfig+0x244>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fc2c 	bl	8000d54 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001500:	f7ff fc28 	bl	8000d54 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e187      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	2b00      	cmp	r3, #0
 8001528:	d036      	beq.n	8001598 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d016      	beq.n	8001560 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_RCC_OscConfig+0x248>)
 8001534:	2201      	movs	r2, #1
 8001536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001538:	f7ff fc0c 	bl	8000d54 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001540:	f7ff fc08 	bl	8000d54 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e167      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <HAL_RCC_OscConfig+0x240>)
 8001554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0x200>
 800155e:	e01b      	b.n	8001598 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_RCC_OscConfig+0x248>)
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001566:	f7ff fbf5 	bl	8000d54 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156c:	e00e      	b.n	800158c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156e:	f7ff fbf1 	bl	8000d54 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d907      	bls.n	800158c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e150      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
 8001580:	40023800 	.word	0x40023800
 8001584:	42470000 	.word	0x42470000
 8001588:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158c:	4b88      	ldr	r3, [pc, #544]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 800158e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1ea      	bne.n	800156e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 8097 	beq.w	80016d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015aa:	4b81      	ldr	r3, [pc, #516]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10f      	bne.n	80015d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	4b7d      	ldr	r3, [pc, #500]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a7c      	ldr	r2, [pc, #496]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b7a      	ldr	r3, [pc, #488]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015d2:	2301      	movs	r3, #1
 80015d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d6:	4b77      	ldr	r3, [pc, #476]	; (80017b4 <HAL_RCC_OscConfig+0x474>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d118      	bne.n	8001614 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015e2:	4b74      	ldr	r3, [pc, #464]	; (80017b4 <HAL_RCC_OscConfig+0x474>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a73      	ldr	r2, [pc, #460]	; (80017b4 <HAL_RCC_OscConfig+0x474>)
 80015e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ee:	f7ff fbb1 	bl	8000d54 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f6:	f7ff fbad 	bl	8000d54 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e10c      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001608:	4b6a      	ldr	r3, [pc, #424]	; (80017b4 <HAL_RCC_OscConfig+0x474>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d106      	bne.n	800162a <HAL_RCC_OscConfig+0x2ea>
 800161c:	4b64      	ldr	r3, [pc, #400]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	4a63      	ldr	r2, [pc, #396]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6713      	str	r3, [r2, #112]	; 0x70
 8001628:	e01c      	b.n	8001664 <HAL_RCC_OscConfig+0x324>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b05      	cmp	r3, #5
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x30c>
 8001632:	4b5f      	ldr	r3, [pc, #380]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001636:	4a5e      	ldr	r2, [pc, #376]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	6713      	str	r3, [r2, #112]	; 0x70
 800163e:	4b5c      	ldr	r3, [pc, #368]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	4a5b      	ldr	r2, [pc, #364]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6713      	str	r3, [r2, #112]	; 0x70
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0x324>
 800164c:	4b58      	ldr	r3, [pc, #352]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 800164e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001650:	4a57      	ldr	r2, [pc, #348]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	6713      	str	r3, [r2, #112]	; 0x70
 8001658:	4b55      	ldr	r3, [pc, #340]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 800165a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165c:	4a54      	ldr	r2, [pc, #336]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 800165e:	f023 0304 	bic.w	r3, r3, #4
 8001662:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d015      	beq.n	8001698 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166c:	f7ff fb72 	bl	8000d54 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001672:	e00a      	b.n	800168a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001674:	f7ff fb6e 	bl	8000d54 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e0cb      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168a:	4b49      	ldr	r3, [pc, #292]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 800168c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0ee      	beq.n	8001674 <HAL_RCC_OscConfig+0x334>
 8001696:	e014      	b.n	80016c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001698:	f7ff fb5c 	bl	8000d54 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169e:	e00a      	b.n	80016b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a0:	f7ff fb58 	bl	8000d54 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e0b5      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b6:	4b3e      	ldr	r3, [pc, #248]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1ee      	bne.n	80016a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d105      	bne.n	80016d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c8:	4b39      	ldr	r3, [pc, #228]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	4a38      	ldr	r2, [pc, #224]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 80016ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 80a1 	beq.w	8001820 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016de:	4b34      	ldr	r3, [pc, #208]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d05c      	beq.n	80017a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d141      	bne.n	8001776 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f2:	4b31      	ldr	r3, [pc, #196]	; (80017b8 <HAL_RCC_OscConfig+0x478>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fb2c 	bl	8000d54 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001700:	f7ff fb28 	bl	8000d54 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e087      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001712:	4b27      	ldr	r3, [pc, #156]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69da      	ldr	r2, [r3, #28]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	019b      	lsls	r3, r3, #6
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	085b      	lsrs	r3, r3, #1
 8001736:	3b01      	subs	r3, #1
 8001738:	041b      	lsls	r3, r3, #16
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	061b      	lsls	r3, r3, #24
 8001742:	491b      	ldr	r1, [pc, #108]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 8001744:	4313      	orrs	r3, r2
 8001746:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001748:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <HAL_RCC_OscConfig+0x478>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174e:	f7ff fb01 	bl	8000d54 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001756:	f7ff fafd 	bl	8000d54 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e05c      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x416>
 8001774:	e054      	b.n	8001820 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <HAL_RCC_OscConfig+0x478>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff faea 	bl	8000d54 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001784:	f7ff fae6 	bl	8000d54 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e045      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_RCC_OscConfig+0x470>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x444>
 80017a2:	e03d      	b.n	8001820 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d107      	bne.n	80017bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e038      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40007000 	.word	0x40007000
 80017b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_RCC_OscConfig+0x4ec>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d028      	beq.n	800181c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d121      	bne.n	800181c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d11a      	bne.n	800181c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017ec:	4013      	ands	r3, r2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d111      	bne.n	800181c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	085b      	lsrs	r3, r3, #1
 8001804:	3b01      	subs	r3, #1
 8001806:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001808:	429a      	cmp	r2, r3
 800180a:	d107      	bne.n	800181c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001816:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800

08001830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0cc      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001844:	4b68      	ldr	r3, [pc, #416]	; (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 030f 	and.w	r3, r3, #15
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d90c      	bls.n	800186c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b65      	ldr	r3, [pc, #404]	; (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b63      	ldr	r3, [pc, #396]	; (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0b8      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d020      	beq.n	80018ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001884:	4b59      	ldr	r3, [pc, #356]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	4a58      	ldr	r2, [pc, #352]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800188e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800189c:	4b53      	ldr	r3, [pc, #332]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a52      	ldr	r2, [pc, #328]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a8:	4b50      	ldr	r3, [pc, #320]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	494d      	ldr	r1, [pc, #308]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d044      	beq.n	8001950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d107      	bne.n	80018de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	4b47      	ldr	r3, [pc, #284]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d119      	bne.n	800190e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e07f      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d003      	beq.n	80018ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ee:	4b3f      	ldr	r3, [pc, #252]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d109      	bne.n	800190e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e06f      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fe:	4b3b      	ldr	r3, [pc, #236]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e067      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800190e:	4b37      	ldr	r3, [pc, #220]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f023 0203 	bic.w	r2, r3, #3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	4934      	ldr	r1, [pc, #208]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	4313      	orrs	r3, r2
 800191e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001920:	f7ff fa18 	bl	8000d54 <HAL_GetTick>
 8001924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001926:	e00a      	b.n	800193e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001928:	f7ff fa14 	bl	8000d54 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	; 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e04f      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193e:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 020c 	and.w	r2, r3, #12
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	429a      	cmp	r2, r3
 800194e:	d1eb      	bne.n	8001928 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001950:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d20c      	bcs.n	8001978 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195e:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e032      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4916      	ldr	r1, [pc, #88]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	4313      	orrs	r3, r2
 8001994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d009      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	490e      	ldr	r1, [pc, #56]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019b6:	f000 f821 	bl	80019fc <HAL_RCC_GetSysClockFreq>
 80019ba:	4602      	mov	r2, r0
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	490a      	ldr	r1, [pc, #40]	; (80019f0 <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	5ccb      	ldrb	r3, [r1, r3]
 80019ca:	fa22 f303 	lsr.w	r3, r2, r3
 80019ce:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_RCC_ClockConfig+0x1c8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff f978 	bl	8000ccc <HAL_InitTick>

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023c00 	.word	0x40023c00
 80019ec:	40023800 	.word	0x40023800
 80019f0:	0800311c 	.word	0x0800311c
 80019f4:	20000000 	.word	0x20000000
 80019f8:	20000004 	.word	0x20000004

080019fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a00:	b094      	sub	sp, #80	; 0x50
 8001a02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	647b      	str	r3, [r7, #68]	; 0x44
 8001a08:	2300      	movs	r3, #0
 8001a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a14:	4b79      	ldr	r3, [pc, #484]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d00d      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x40>
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	f200 80e1 	bhi.w	8001be8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <HAL_RCC_GetSysClockFreq+0x34>
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d003      	beq.n	8001a36 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a2e:	e0db      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a30:	4b73      	ldr	r3, [pc, #460]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a34:	e0db      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a36:	4b73      	ldr	r3, [pc, #460]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a3a:	e0d8      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a3c:	4b6f      	ldr	r3, [pc, #444]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a46:	4b6d      	ldr	r3, [pc, #436]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d063      	beq.n	8001b1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a52:	4b6a      	ldr	r3, [pc, #424]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	099b      	lsrs	r3, r3, #6
 8001a58:	2200      	movs	r2, #0
 8001a5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a64:	633b      	str	r3, [r7, #48]	; 0x30
 8001a66:	2300      	movs	r3, #0
 8001a68:	637b      	str	r3, [r7, #52]	; 0x34
 8001a6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a6e:	4622      	mov	r2, r4
 8001a70:	462b      	mov	r3, r5
 8001a72:	f04f 0000 	mov.w	r0, #0
 8001a76:	f04f 0100 	mov.w	r1, #0
 8001a7a:	0159      	lsls	r1, r3, #5
 8001a7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a80:	0150      	lsls	r0, r2, #5
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4621      	mov	r1, r4
 8001a88:	1a51      	subs	r1, r2, r1
 8001a8a:	6139      	str	r1, [r7, #16]
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001aa0:	4659      	mov	r1, fp
 8001aa2:	018b      	lsls	r3, r1, #6
 8001aa4:	4651      	mov	r1, sl
 8001aa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aaa:	4651      	mov	r1, sl
 8001aac:	018a      	lsls	r2, r1, #6
 8001aae:	4651      	mov	r1, sl
 8001ab0:	ebb2 0801 	subs.w	r8, r2, r1
 8001ab4:	4659      	mov	r1, fp
 8001ab6:	eb63 0901 	sbc.w	r9, r3, r1
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ac6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001aca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ace:	4690      	mov	r8, r2
 8001ad0:	4699      	mov	r9, r3
 8001ad2:	4623      	mov	r3, r4
 8001ad4:	eb18 0303 	adds.w	r3, r8, r3
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	462b      	mov	r3, r5
 8001adc:	eb49 0303 	adc.w	r3, r9, r3
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001aee:	4629      	mov	r1, r5
 8001af0:	024b      	lsls	r3, r1, #9
 8001af2:	4621      	mov	r1, r4
 8001af4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001af8:	4621      	mov	r1, r4
 8001afa:	024a      	lsls	r2, r1, #9
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b02:	2200      	movs	r2, #0
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b0c:	f7fe fbc0 	bl	8000290 <__aeabi_uldivmod>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4613      	mov	r3, r2
 8001b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b18:	e058      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1a:	4b38      	ldr	r3, [pc, #224]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	099b      	lsrs	r3, r3, #6
 8001b20:	2200      	movs	r2, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	4611      	mov	r1, r2
 8001b26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b2a:	623b      	str	r3, [r7, #32]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b34:	4642      	mov	r2, r8
 8001b36:	464b      	mov	r3, r9
 8001b38:	f04f 0000 	mov.w	r0, #0
 8001b3c:	f04f 0100 	mov.w	r1, #0
 8001b40:	0159      	lsls	r1, r3, #5
 8001b42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b46:	0150      	lsls	r0, r2, #5
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4641      	mov	r1, r8
 8001b4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b52:	4649      	mov	r1, r9
 8001b54:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b6c:	ebb2 040a 	subs.w	r4, r2, sl
 8001b70:	eb63 050b 	sbc.w	r5, r3, fp
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	00eb      	lsls	r3, r5, #3
 8001b7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b82:	00e2      	lsls	r2, r4, #3
 8001b84:	4614      	mov	r4, r2
 8001b86:	461d      	mov	r5, r3
 8001b88:	4643      	mov	r3, r8
 8001b8a:	18e3      	adds	r3, r4, r3
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	464b      	mov	r3, r9
 8001b90:	eb45 0303 	adc.w	r3, r5, r3
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	028b      	lsls	r3, r1, #10
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bac:	4621      	mov	r1, r4
 8001bae:	028a      	lsls	r2, r1, #10
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	61fa      	str	r2, [r7, #28]
 8001bbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc0:	f7fe fb66 	bl	8000290 <__aeabi_uldivmod>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4613      	mov	r3, r2
 8001bca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	0c1b      	lsrs	r3, r3, #16
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001be6:	e002      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3750      	adds	r7, #80	; 0x50
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	00f42400 	.word	0x00f42400
 8001c04:	007a1200 	.word	0x007a1200

08001c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000000 	.word	0x20000000

08001c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c24:	f7ff fff0 	bl	8001c08 <HAL_RCC_GetHCLKFreq>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	0a9b      	lsrs	r3, r3, #10
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	4903      	ldr	r1, [pc, #12]	; (8001c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c36:	5ccb      	ldrb	r3, [r1, r3]
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800
 8001c44:	0800312c 	.word	0x0800312c

08001c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c4c:	f7ff ffdc 	bl	8001c08 <HAL_RCC_GetHCLKFreq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	0b5b      	lsrs	r3, r3, #13
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	4903      	ldr	r1, [pc, #12]	; (8001c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c5e:	5ccb      	ldrb	r3, [r1, r3]
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	0800312c 	.word	0x0800312c

08001c70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e03f      	b.n	8001d02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d106      	bne.n	8001c9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7fe fea4 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2224      	movs	r2, #36	; 0x24
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f829 	bl	8001d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695a      	ldr	r2, [r3, #20]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ce8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d10:	b0c0      	sub	sp, #256	; 0x100
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d28:	68d9      	ldr	r1, [r3, #12]
 8001d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	ea40 0301 	orr.w	r3, r0, r1
 8001d34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	431a      	orrs	r2, r3
 8001d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001d64:	f021 010c 	bic.w	r1, r1, #12
 8001d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001d72:	430b      	orrs	r3, r1
 8001d74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d86:	6999      	ldr	r1, [r3, #24]
 8001d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	ea40 0301 	orr.w	r3, r0, r1
 8001d92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4b8f      	ldr	r3, [pc, #572]	; (8001fd8 <UART_SetConfig+0x2cc>)
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d005      	beq.n	8001dac <UART_SetConfig+0xa0>
 8001da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	4b8d      	ldr	r3, [pc, #564]	; (8001fdc <UART_SetConfig+0x2d0>)
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d104      	bne.n	8001db6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001dac:	f7ff ff4c 	bl	8001c48 <HAL_RCC_GetPCLK2Freq>
 8001db0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001db4:	e003      	b.n	8001dbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001db6:	f7ff ff33 	bl	8001c20 <HAL_RCC_GetPCLK1Freq>
 8001dba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dc8:	f040 810c 	bne.w	8001fe4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001dd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001dda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001dde:	4622      	mov	r2, r4
 8001de0:	462b      	mov	r3, r5
 8001de2:	1891      	adds	r1, r2, r2
 8001de4:	65b9      	str	r1, [r7, #88]	; 0x58
 8001de6:	415b      	adcs	r3, r3
 8001de8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001dee:	4621      	mov	r1, r4
 8001df0:	eb12 0801 	adds.w	r8, r2, r1
 8001df4:	4629      	mov	r1, r5
 8001df6:	eb43 0901 	adc.w	r9, r3, r1
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	4623      	mov	r3, r4
 8001e14:	eb18 0303 	adds.w	r3, r8, r3
 8001e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001e1c:	462b      	mov	r3, r5
 8001e1e:	eb49 0303 	adc.w	r3, r9, r3
 8001e22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001e32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001e36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	18db      	adds	r3, r3, r3
 8001e3e:	653b      	str	r3, [r7, #80]	; 0x50
 8001e40:	4613      	mov	r3, r2
 8001e42:	eb42 0303 	adc.w	r3, r2, r3
 8001e46:	657b      	str	r3, [r7, #84]	; 0x54
 8001e48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001e50:	f7fe fa1e 	bl	8000290 <__aeabi_uldivmod>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4b61      	ldr	r3, [pc, #388]	; (8001fe0 <UART_SetConfig+0x2d4>)
 8001e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	011c      	lsls	r4, r3, #4
 8001e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e66:	2200      	movs	r2, #0
 8001e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001e70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001e74:	4642      	mov	r2, r8
 8001e76:	464b      	mov	r3, r9
 8001e78:	1891      	adds	r1, r2, r2
 8001e7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8001e7c:	415b      	adcs	r3, r3
 8001e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e84:	4641      	mov	r1, r8
 8001e86:	eb12 0a01 	adds.w	sl, r2, r1
 8001e8a:	4649      	mov	r1, r9
 8001e8c:	eb43 0b01 	adc.w	fp, r3, r1
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ea0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ea4:	4692      	mov	sl, r2
 8001ea6:	469b      	mov	fp, r3
 8001ea8:	4643      	mov	r3, r8
 8001eaa:	eb1a 0303 	adds.w	r3, sl, r3
 8001eae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001eb2:	464b      	mov	r3, r9
 8001eb4:	eb4b 0303 	adc.w	r3, fp, r3
 8001eb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001ec8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001ecc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	18db      	adds	r3, r3, r3
 8001ed4:	643b      	str	r3, [r7, #64]	; 0x40
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	eb42 0303 	adc.w	r3, r2, r3
 8001edc:	647b      	str	r3, [r7, #68]	; 0x44
 8001ede:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ee2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001ee6:	f7fe f9d3 	bl	8000290 <__aeabi_uldivmod>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4b3b      	ldr	r3, [pc, #236]	; (8001fe0 <UART_SetConfig+0x2d4>)
 8001ef2:	fba3 2301 	umull	r2, r3, r3, r1
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	2264      	movs	r2, #100	; 0x64
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	1acb      	subs	r3, r1, r3
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001f06:	4b36      	ldr	r3, [pc, #216]	; (8001fe0 <UART_SetConfig+0x2d4>)
 8001f08:	fba3 2302 	umull	r2, r3, r3, r2
 8001f0c:	095b      	lsrs	r3, r3, #5
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f14:	441c      	add	r4, r3
 8001f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001f24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001f28:	4642      	mov	r2, r8
 8001f2a:	464b      	mov	r3, r9
 8001f2c:	1891      	adds	r1, r2, r2
 8001f2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f30:	415b      	adcs	r3, r3
 8001f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f38:	4641      	mov	r1, r8
 8001f3a:	1851      	adds	r1, r2, r1
 8001f3c:	6339      	str	r1, [r7, #48]	; 0x30
 8001f3e:	4649      	mov	r1, r9
 8001f40:	414b      	adcs	r3, r1
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001f50:	4659      	mov	r1, fp
 8001f52:	00cb      	lsls	r3, r1, #3
 8001f54:	4651      	mov	r1, sl
 8001f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f5a:	4651      	mov	r1, sl
 8001f5c:	00ca      	lsls	r2, r1, #3
 8001f5e:	4610      	mov	r0, r2
 8001f60:	4619      	mov	r1, r3
 8001f62:	4603      	mov	r3, r0
 8001f64:	4642      	mov	r2, r8
 8001f66:	189b      	adds	r3, r3, r2
 8001f68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001f6c:	464b      	mov	r3, r9
 8001f6e:	460a      	mov	r2, r1
 8001f70:	eb42 0303 	adc.w	r3, r2, r3
 8001f74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001f88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	18db      	adds	r3, r3, r3
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f92:	4613      	mov	r3, r2
 8001f94:	eb42 0303 	adc.w	r3, r2, r3
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001fa2:	f7fe f975 	bl	8000290 <__aeabi_uldivmod>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <UART_SetConfig+0x2d4>)
 8001fac:	fba3 1302 	umull	r1, r3, r3, r2
 8001fb0:	095b      	lsrs	r3, r3, #5
 8001fb2:	2164      	movs	r1, #100	; 0x64
 8001fb4:	fb01 f303 	mul.w	r3, r1, r3
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	3332      	adds	r3, #50	; 0x32
 8001fbe:	4a08      	ldr	r2, [pc, #32]	; (8001fe0 <UART_SetConfig+0x2d4>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	095b      	lsrs	r3, r3, #5
 8001fc6:	f003 0207 	and.w	r2, r3, #7
 8001fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4422      	add	r2, r4
 8001fd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001fd4:	e106      	b.n	80021e4 <UART_SetConfig+0x4d8>
 8001fd6:	bf00      	nop
 8001fd8:	40011000 	.word	0x40011000
 8001fdc:	40011400 	.word	0x40011400
 8001fe0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001fee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001ff2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001ff6:	4642      	mov	r2, r8
 8001ff8:	464b      	mov	r3, r9
 8001ffa:	1891      	adds	r1, r2, r2
 8001ffc:	6239      	str	r1, [r7, #32]
 8001ffe:	415b      	adcs	r3, r3
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
 8002002:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002006:	4641      	mov	r1, r8
 8002008:	1854      	adds	r4, r2, r1
 800200a:	4649      	mov	r1, r9
 800200c:	eb43 0501 	adc.w	r5, r3, r1
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	00eb      	lsls	r3, r5, #3
 800201a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800201e:	00e2      	lsls	r2, r4, #3
 8002020:	4614      	mov	r4, r2
 8002022:	461d      	mov	r5, r3
 8002024:	4643      	mov	r3, r8
 8002026:	18e3      	adds	r3, r4, r3
 8002028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800202c:	464b      	mov	r3, r9
 800202e:	eb45 0303 	adc.w	r3, r5, r3
 8002032:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002042:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002052:	4629      	mov	r1, r5
 8002054:	008b      	lsls	r3, r1, #2
 8002056:	4621      	mov	r1, r4
 8002058:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800205c:	4621      	mov	r1, r4
 800205e:	008a      	lsls	r2, r1, #2
 8002060:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002064:	f7fe f914 	bl	8000290 <__aeabi_uldivmod>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4b60      	ldr	r3, [pc, #384]	; (80021f0 <UART_SetConfig+0x4e4>)
 800206e:	fba3 2302 	umull	r2, r3, r3, r2
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	011c      	lsls	r4, r3, #4
 8002076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800207a:	2200      	movs	r2, #0
 800207c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002080:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002084:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002088:	4642      	mov	r2, r8
 800208a:	464b      	mov	r3, r9
 800208c:	1891      	adds	r1, r2, r2
 800208e:	61b9      	str	r1, [r7, #24]
 8002090:	415b      	adcs	r3, r3
 8002092:	61fb      	str	r3, [r7, #28]
 8002094:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002098:	4641      	mov	r1, r8
 800209a:	1851      	adds	r1, r2, r1
 800209c:	6139      	str	r1, [r7, #16]
 800209e:	4649      	mov	r1, r9
 80020a0:	414b      	adcs	r3, r1
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020b0:	4659      	mov	r1, fp
 80020b2:	00cb      	lsls	r3, r1, #3
 80020b4:	4651      	mov	r1, sl
 80020b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020ba:	4651      	mov	r1, sl
 80020bc:	00ca      	lsls	r2, r1, #3
 80020be:	4610      	mov	r0, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	4642      	mov	r2, r8
 80020c6:	189b      	adds	r3, r3, r2
 80020c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80020cc:	464b      	mov	r3, r9
 80020ce:	460a      	mov	r2, r1
 80020d0:	eb42 0303 	adc.w	r3, r2, r3
 80020d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80020d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80020e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80020f0:	4649      	mov	r1, r9
 80020f2:	008b      	lsls	r3, r1, #2
 80020f4:	4641      	mov	r1, r8
 80020f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020fa:	4641      	mov	r1, r8
 80020fc:	008a      	lsls	r2, r1, #2
 80020fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002102:	f7fe f8c5 	bl	8000290 <__aeabi_uldivmod>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4611      	mov	r1, r2
 800210c:	4b38      	ldr	r3, [pc, #224]	; (80021f0 <UART_SetConfig+0x4e4>)
 800210e:	fba3 2301 	umull	r2, r3, r3, r1
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	2264      	movs	r2, #100	; 0x64
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	1acb      	subs	r3, r1, r3
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	3332      	adds	r3, #50	; 0x32
 8002120:	4a33      	ldr	r2, [pc, #204]	; (80021f0 <UART_SetConfig+0x4e4>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800212c:	441c      	add	r4, r3
 800212e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002132:	2200      	movs	r2, #0
 8002134:	673b      	str	r3, [r7, #112]	; 0x70
 8002136:	677a      	str	r2, [r7, #116]	; 0x74
 8002138:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800213c:	4642      	mov	r2, r8
 800213e:	464b      	mov	r3, r9
 8002140:	1891      	adds	r1, r2, r2
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	415b      	adcs	r3, r3
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800214c:	4641      	mov	r1, r8
 800214e:	1851      	adds	r1, r2, r1
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	4649      	mov	r1, r9
 8002154:	414b      	adcs	r3, r1
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002164:	4659      	mov	r1, fp
 8002166:	00cb      	lsls	r3, r1, #3
 8002168:	4651      	mov	r1, sl
 800216a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800216e:	4651      	mov	r1, sl
 8002170:	00ca      	lsls	r2, r1, #3
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	4603      	mov	r3, r0
 8002178:	4642      	mov	r2, r8
 800217a:	189b      	adds	r3, r3, r2
 800217c:	66bb      	str	r3, [r7, #104]	; 0x68
 800217e:	464b      	mov	r3, r9
 8002180:	460a      	mov	r2, r1
 8002182:	eb42 0303 	adc.w	r3, r2, r3
 8002186:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	663b      	str	r3, [r7, #96]	; 0x60
 8002192:	667a      	str	r2, [r7, #100]	; 0x64
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80021a0:	4649      	mov	r1, r9
 80021a2:	008b      	lsls	r3, r1, #2
 80021a4:	4641      	mov	r1, r8
 80021a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021aa:	4641      	mov	r1, r8
 80021ac:	008a      	lsls	r2, r1, #2
 80021ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80021b2:	f7fe f86d 	bl	8000290 <__aeabi_uldivmod>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <UART_SetConfig+0x4e4>)
 80021bc:	fba3 1302 	umull	r1, r3, r3, r2
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	2164      	movs	r1, #100	; 0x64
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	3332      	adds	r3, #50	; 0x32
 80021ce:	4a08      	ldr	r2, [pc, #32]	; (80021f0 <UART_SetConfig+0x4e4>)
 80021d0:	fba2 2303 	umull	r2, r3, r2, r3
 80021d4:	095b      	lsrs	r3, r3, #5
 80021d6:	f003 020f 	and.w	r2, r3, #15
 80021da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4422      	add	r2, r4
 80021e2:	609a      	str	r2, [r3, #8]
}
 80021e4:	bf00      	nop
 80021e6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80021ea:	46bd      	mov	sp, r7
 80021ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021f0:	51eb851f 	.word	0x51eb851f

080021f4 <std>:
 80021f4:	2300      	movs	r3, #0
 80021f6:	b510      	push	{r4, lr}
 80021f8:	4604      	mov	r4, r0
 80021fa:	e9c0 3300 	strd	r3, r3, [r0]
 80021fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002202:	6083      	str	r3, [r0, #8]
 8002204:	8181      	strh	r1, [r0, #12]
 8002206:	6643      	str	r3, [r0, #100]	; 0x64
 8002208:	81c2      	strh	r2, [r0, #14]
 800220a:	6183      	str	r3, [r0, #24]
 800220c:	4619      	mov	r1, r3
 800220e:	2208      	movs	r2, #8
 8002210:	305c      	adds	r0, #92	; 0x5c
 8002212:	f000 f9e5 	bl	80025e0 <memset>
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <std+0x38>)
 8002218:	6263      	str	r3, [r4, #36]	; 0x24
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <std+0x3c>)
 800221c:	62a3      	str	r3, [r4, #40]	; 0x28
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <std+0x40>)
 8002220:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002222:	4b05      	ldr	r3, [pc, #20]	; (8002238 <std+0x44>)
 8002224:	6224      	str	r4, [r4, #32]
 8002226:	6323      	str	r3, [r4, #48]	; 0x30
 8002228:	bd10      	pop	{r4, pc}
 800222a:	bf00      	nop
 800222c:	08002431 	.word	0x08002431
 8002230:	08002453 	.word	0x08002453
 8002234:	0800248b 	.word	0x0800248b
 8002238:	080024af 	.word	0x080024af

0800223c <stdio_exit_handler>:
 800223c:	4a02      	ldr	r2, [pc, #8]	; (8002248 <stdio_exit_handler+0xc>)
 800223e:	4903      	ldr	r1, [pc, #12]	; (800224c <stdio_exit_handler+0x10>)
 8002240:	4803      	ldr	r0, [pc, #12]	; (8002250 <stdio_exit_handler+0x14>)
 8002242:	f000 b869 	b.w	8002318 <_fwalk_sglue>
 8002246:	bf00      	nop
 8002248:	2000000c 	.word	0x2000000c
 800224c:	08002f79 	.word	0x08002f79
 8002250:	20000018 	.word	0x20000018

08002254 <cleanup_stdio>:
 8002254:	6841      	ldr	r1, [r0, #4]
 8002256:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <cleanup_stdio+0x34>)
 8002258:	4299      	cmp	r1, r3
 800225a:	b510      	push	{r4, lr}
 800225c:	4604      	mov	r4, r0
 800225e:	d001      	beq.n	8002264 <cleanup_stdio+0x10>
 8002260:	f000 fe8a 	bl	8002f78 <_fflush_r>
 8002264:	68a1      	ldr	r1, [r4, #8]
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <cleanup_stdio+0x38>)
 8002268:	4299      	cmp	r1, r3
 800226a:	d002      	beq.n	8002272 <cleanup_stdio+0x1e>
 800226c:	4620      	mov	r0, r4
 800226e:	f000 fe83 	bl	8002f78 <_fflush_r>
 8002272:	68e1      	ldr	r1, [r4, #12]
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <cleanup_stdio+0x3c>)
 8002276:	4299      	cmp	r1, r3
 8002278:	d004      	beq.n	8002284 <cleanup_stdio+0x30>
 800227a:	4620      	mov	r0, r4
 800227c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002280:	f000 be7a 	b.w	8002f78 <_fflush_r>
 8002284:	bd10      	pop	{r4, pc}
 8002286:	bf00      	nop
 8002288:	200000d0 	.word	0x200000d0
 800228c:	20000138 	.word	0x20000138
 8002290:	200001a0 	.word	0x200001a0

08002294 <global_stdio_init.part.0>:
 8002294:	b510      	push	{r4, lr}
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <global_stdio_init.part.0+0x30>)
 8002298:	4c0b      	ldr	r4, [pc, #44]	; (80022c8 <global_stdio_init.part.0+0x34>)
 800229a:	4a0c      	ldr	r2, [pc, #48]	; (80022cc <global_stdio_init.part.0+0x38>)
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	4620      	mov	r0, r4
 80022a0:	2200      	movs	r2, #0
 80022a2:	2104      	movs	r1, #4
 80022a4:	f7ff ffa6 	bl	80021f4 <std>
 80022a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80022ac:	2201      	movs	r2, #1
 80022ae:	2109      	movs	r1, #9
 80022b0:	f7ff ffa0 	bl	80021f4 <std>
 80022b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80022b8:	2202      	movs	r2, #2
 80022ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022be:	2112      	movs	r1, #18
 80022c0:	f7ff bf98 	b.w	80021f4 <std>
 80022c4:	20000208 	.word	0x20000208
 80022c8:	200000d0 	.word	0x200000d0
 80022cc:	0800223d 	.word	0x0800223d

080022d0 <__sfp_lock_acquire>:
 80022d0:	4801      	ldr	r0, [pc, #4]	; (80022d8 <__sfp_lock_acquire+0x8>)
 80022d2:	f000 b9fd 	b.w	80026d0 <__retarget_lock_acquire_recursive>
 80022d6:	bf00      	nop
 80022d8:	20000211 	.word	0x20000211

080022dc <__sfp_lock_release>:
 80022dc:	4801      	ldr	r0, [pc, #4]	; (80022e4 <__sfp_lock_release+0x8>)
 80022de:	f000 b9f8 	b.w	80026d2 <__retarget_lock_release_recursive>
 80022e2:	bf00      	nop
 80022e4:	20000211 	.word	0x20000211

080022e8 <__sinit>:
 80022e8:	b510      	push	{r4, lr}
 80022ea:	4604      	mov	r4, r0
 80022ec:	f7ff fff0 	bl	80022d0 <__sfp_lock_acquire>
 80022f0:	6a23      	ldr	r3, [r4, #32]
 80022f2:	b11b      	cbz	r3, 80022fc <__sinit+0x14>
 80022f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022f8:	f7ff bff0 	b.w	80022dc <__sfp_lock_release>
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <__sinit+0x28>)
 80022fe:	6223      	str	r3, [r4, #32]
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <__sinit+0x2c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f5      	bne.n	80022f4 <__sinit+0xc>
 8002308:	f7ff ffc4 	bl	8002294 <global_stdio_init.part.0>
 800230c:	e7f2      	b.n	80022f4 <__sinit+0xc>
 800230e:	bf00      	nop
 8002310:	08002255 	.word	0x08002255
 8002314:	20000208 	.word	0x20000208

08002318 <_fwalk_sglue>:
 8002318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800231c:	4607      	mov	r7, r0
 800231e:	4688      	mov	r8, r1
 8002320:	4614      	mov	r4, r2
 8002322:	2600      	movs	r6, #0
 8002324:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002328:	f1b9 0901 	subs.w	r9, r9, #1
 800232c:	d505      	bpl.n	800233a <_fwalk_sglue+0x22>
 800232e:	6824      	ldr	r4, [r4, #0]
 8002330:	2c00      	cmp	r4, #0
 8002332:	d1f7      	bne.n	8002324 <_fwalk_sglue+0xc>
 8002334:	4630      	mov	r0, r6
 8002336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800233a:	89ab      	ldrh	r3, [r5, #12]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d907      	bls.n	8002350 <_fwalk_sglue+0x38>
 8002340:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002344:	3301      	adds	r3, #1
 8002346:	d003      	beq.n	8002350 <_fwalk_sglue+0x38>
 8002348:	4629      	mov	r1, r5
 800234a:	4638      	mov	r0, r7
 800234c:	47c0      	blx	r8
 800234e:	4306      	orrs	r6, r0
 8002350:	3568      	adds	r5, #104	; 0x68
 8002352:	e7e9      	b.n	8002328 <_fwalk_sglue+0x10>

08002354 <iprintf>:
 8002354:	b40f      	push	{r0, r1, r2, r3}
 8002356:	b507      	push	{r0, r1, r2, lr}
 8002358:	4906      	ldr	r1, [pc, #24]	; (8002374 <iprintf+0x20>)
 800235a:	ab04      	add	r3, sp, #16
 800235c:	6808      	ldr	r0, [r1, #0]
 800235e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002362:	6881      	ldr	r1, [r0, #8]
 8002364:	9301      	str	r3, [sp, #4]
 8002366:	f000 fad7 	bl	8002918 <_vfiprintf_r>
 800236a:	b003      	add	sp, #12
 800236c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002370:	b004      	add	sp, #16
 8002372:	4770      	bx	lr
 8002374:	20000064 	.word	0x20000064

08002378 <_puts_r>:
 8002378:	6a03      	ldr	r3, [r0, #32]
 800237a:	b570      	push	{r4, r5, r6, lr}
 800237c:	6884      	ldr	r4, [r0, #8]
 800237e:	4605      	mov	r5, r0
 8002380:	460e      	mov	r6, r1
 8002382:	b90b      	cbnz	r3, 8002388 <_puts_r+0x10>
 8002384:	f7ff ffb0 	bl	80022e8 <__sinit>
 8002388:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800238a:	07db      	lsls	r3, r3, #31
 800238c:	d405      	bmi.n	800239a <_puts_r+0x22>
 800238e:	89a3      	ldrh	r3, [r4, #12]
 8002390:	0598      	lsls	r0, r3, #22
 8002392:	d402      	bmi.n	800239a <_puts_r+0x22>
 8002394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002396:	f000 f99b 	bl	80026d0 <__retarget_lock_acquire_recursive>
 800239a:	89a3      	ldrh	r3, [r4, #12]
 800239c:	0719      	lsls	r1, r3, #28
 800239e:	d513      	bpl.n	80023c8 <_puts_r+0x50>
 80023a0:	6923      	ldr	r3, [r4, #16]
 80023a2:	b18b      	cbz	r3, 80023c8 <_puts_r+0x50>
 80023a4:	3e01      	subs	r6, #1
 80023a6:	68a3      	ldr	r3, [r4, #8]
 80023a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80023ac:	3b01      	subs	r3, #1
 80023ae:	60a3      	str	r3, [r4, #8]
 80023b0:	b9e9      	cbnz	r1, 80023ee <_puts_r+0x76>
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	da2e      	bge.n	8002414 <_puts_r+0x9c>
 80023b6:	4622      	mov	r2, r4
 80023b8:	210a      	movs	r1, #10
 80023ba:	4628      	mov	r0, r5
 80023bc:	f000 f87b 	bl	80024b6 <__swbuf_r>
 80023c0:	3001      	adds	r0, #1
 80023c2:	d007      	beq.n	80023d4 <_puts_r+0x5c>
 80023c4:	250a      	movs	r5, #10
 80023c6:	e007      	b.n	80023d8 <_puts_r+0x60>
 80023c8:	4621      	mov	r1, r4
 80023ca:	4628      	mov	r0, r5
 80023cc:	f000 f8b0 	bl	8002530 <__swsetup_r>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d0e7      	beq.n	80023a4 <_puts_r+0x2c>
 80023d4:	f04f 35ff 	mov.w	r5, #4294967295
 80023d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80023da:	07da      	lsls	r2, r3, #31
 80023dc:	d405      	bmi.n	80023ea <_puts_r+0x72>
 80023de:	89a3      	ldrh	r3, [r4, #12]
 80023e0:	059b      	lsls	r3, r3, #22
 80023e2:	d402      	bmi.n	80023ea <_puts_r+0x72>
 80023e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023e6:	f000 f974 	bl	80026d2 <__retarget_lock_release_recursive>
 80023ea:	4628      	mov	r0, r5
 80023ec:	bd70      	pop	{r4, r5, r6, pc}
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	da04      	bge.n	80023fc <_puts_r+0x84>
 80023f2:	69a2      	ldr	r2, [r4, #24]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	dc06      	bgt.n	8002406 <_puts_r+0x8e>
 80023f8:	290a      	cmp	r1, #10
 80023fa:	d004      	beq.n	8002406 <_puts_r+0x8e>
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	6022      	str	r2, [r4, #0]
 8002402:	7019      	strb	r1, [r3, #0]
 8002404:	e7cf      	b.n	80023a6 <_puts_r+0x2e>
 8002406:	4622      	mov	r2, r4
 8002408:	4628      	mov	r0, r5
 800240a:	f000 f854 	bl	80024b6 <__swbuf_r>
 800240e:	3001      	adds	r0, #1
 8002410:	d1c9      	bne.n	80023a6 <_puts_r+0x2e>
 8002412:	e7df      	b.n	80023d4 <_puts_r+0x5c>
 8002414:	6823      	ldr	r3, [r4, #0]
 8002416:	250a      	movs	r5, #10
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	6022      	str	r2, [r4, #0]
 800241c:	701d      	strb	r5, [r3, #0]
 800241e:	e7db      	b.n	80023d8 <_puts_r+0x60>

08002420 <puts>:
 8002420:	4b02      	ldr	r3, [pc, #8]	; (800242c <puts+0xc>)
 8002422:	4601      	mov	r1, r0
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	f7ff bfa7 	b.w	8002378 <_puts_r>
 800242a:	bf00      	nop
 800242c:	20000064 	.word	0x20000064

08002430 <__sread>:
 8002430:	b510      	push	{r4, lr}
 8002432:	460c      	mov	r4, r1
 8002434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002438:	f000 f8fc 	bl	8002634 <_read_r>
 800243c:	2800      	cmp	r0, #0
 800243e:	bfab      	itete	ge
 8002440:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002442:	89a3      	ldrhlt	r3, [r4, #12]
 8002444:	181b      	addge	r3, r3, r0
 8002446:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800244a:	bfac      	ite	ge
 800244c:	6563      	strge	r3, [r4, #84]	; 0x54
 800244e:	81a3      	strhlt	r3, [r4, #12]
 8002450:	bd10      	pop	{r4, pc}

08002452 <__swrite>:
 8002452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002456:	461f      	mov	r7, r3
 8002458:	898b      	ldrh	r3, [r1, #12]
 800245a:	05db      	lsls	r3, r3, #23
 800245c:	4605      	mov	r5, r0
 800245e:	460c      	mov	r4, r1
 8002460:	4616      	mov	r6, r2
 8002462:	d505      	bpl.n	8002470 <__swrite+0x1e>
 8002464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002468:	2302      	movs	r3, #2
 800246a:	2200      	movs	r2, #0
 800246c:	f000 f8d0 	bl	8002610 <_lseek_r>
 8002470:	89a3      	ldrh	r3, [r4, #12]
 8002472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800247a:	81a3      	strh	r3, [r4, #12]
 800247c:	4632      	mov	r2, r6
 800247e:	463b      	mov	r3, r7
 8002480:	4628      	mov	r0, r5
 8002482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002486:	f000 b8e7 	b.w	8002658 <_write_r>

0800248a <__sseek>:
 800248a:	b510      	push	{r4, lr}
 800248c:	460c      	mov	r4, r1
 800248e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002492:	f000 f8bd 	bl	8002610 <_lseek_r>
 8002496:	1c43      	adds	r3, r0, #1
 8002498:	89a3      	ldrh	r3, [r4, #12]
 800249a:	bf15      	itete	ne
 800249c:	6560      	strne	r0, [r4, #84]	; 0x54
 800249e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80024a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80024a6:	81a3      	strheq	r3, [r4, #12]
 80024a8:	bf18      	it	ne
 80024aa:	81a3      	strhne	r3, [r4, #12]
 80024ac:	bd10      	pop	{r4, pc}

080024ae <__sclose>:
 80024ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024b2:	f000 b89d 	b.w	80025f0 <_close_r>

080024b6 <__swbuf_r>:
 80024b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b8:	460e      	mov	r6, r1
 80024ba:	4614      	mov	r4, r2
 80024bc:	4605      	mov	r5, r0
 80024be:	b118      	cbz	r0, 80024c8 <__swbuf_r+0x12>
 80024c0:	6a03      	ldr	r3, [r0, #32]
 80024c2:	b90b      	cbnz	r3, 80024c8 <__swbuf_r+0x12>
 80024c4:	f7ff ff10 	bl	80022e8 <__sinit>
 80024c8:	69a3      	ldr	r3, [r4, #24]
 80024ca:	60a3      	str	r3, [r4, #8]
 80024cc:	89a3      	ldrh	r3, [r4, #12]
 80024ce:	071a      	lsls	r2, r3, #28
 80024d0:	d525      	bpl.n	800251e <__swbuf_r+0x68>
 80024d2:	6923      	ldr	r3, [r4, #16]
 80024d4:	b31b      	cbz	r3, 800251e <__swbuf_r+0x68>
 80024d6:	6823      	ldr	r3, [r4, #0]
 80024d8:	6922      	ldr	r2, [r4, #16]
 80024da:	1a98      	subs	r0, r3, r2
 80024dc:	6963      	ldr	r3, [r4, #20]
 80024de:	b2f6      	uxtb	r6, r6
 80024e0:	4283      	cmp	r3, r0
 80024e2:	4637      	mov	r7, r6
 80024e4:	dc04      	bgt.n	80024f0 <__swbuf_r+0x3a>
 80024e6:	4621      	mov	r1, r4
 80024e8:	4628      	mov	r0, r5
 80024ea:	f000 fd45 	bl	8002f78 <_fflush_r>
 80024ee:	b9e0      	cbnz	r0, 800252a <__swbuf_r+0x74>
 80024f0:	68a3      	ldr	r3, [r4, #8]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	60a3      	str	r3, [r4, #8]
 80024f6:	6823      	ldr	r3, [r4, #0]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	6022      	str	r2, [r4, #0]
 80024fc:	701e      	strb	r6, [r3, #0]
 80024fe:	6962      	ldr	r2, [r4, #20]
 8002500:	1c43      	adds	r3, r0, #1
 8002502:	429a      	cmp	r2, r3
 8002504:	d004      	beq.n	8002510 <__swbuf_r+0x5a>
 8002506:	89a3      	ldrh	r3, [r4, #12]
 8002508:	07db      	lsls	r3, r3, #31
 800250a:	d506      	bpl.n	800251a <__swbuf_r+0x64>
 800250c:	2e0a      	cmp	r6, #10
 800250e:	d104      	bne.n	800251a <__swbuf_r+0x64>
 8002510:	4621      	mov	r1, r4
 8002512:	4628      	mov	r0, r5
 8002514:	f000 fd30 	bl	8002f78 <_fflush_r>
 8002518:	b938      	cbnz	r0, 800252a <__swbuf_r+0x74>
 800251a:	4638      	mov	r0, r7
 800251c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800251e:	4621      	mov	r1, r4
 8002520:	4628      	mov	r0, r5
 8002522:	f000 f805 	bl	8002530 <__swsetup_r>
 8002526:	2800      	cmp	r0, #0
 8002528:	d0d5      	beq.n	80024d6 <__swbuf_r+0x20>
 800252a:	f04f 37ff 	mov.w	r7, #4294967295
 800252e:	e7f4      	b.n	800251a <__swbuf_r+0x64>

08002530 <__swsetup_r>:
 8002530:	b538      	push	{r3, r4, r5, lr}
 8002532:	4b2a      	ldr	r3, [pc, #168]	; (80025dc <__swsetup_r+0xac>)
 8002534:	4605      	mov	r5, r0
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	460c      	mov	r4, r1
 800253a:	b118      	cbz	r0, 8002544 <__swsetup_r+0x14>
 800253c:	6a03      	ldr	r3, [r0, #32]
 800253e:	b90b      	cbnz	r3, 8002544 <__swsetup_r+0x14>
 8002540:	f7ff fed2 	bl	80022e8 <__sinit>
 8002544:	89a3      	ldrh	r3, [r4, #12]
 8002546:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800254a:	0718      	lsls	r0, r3, #28
 800254c:	d422      	bmi.n	8002594 <__swsetup_r+0x64>
 800254e:	06d9      	lsls	r1, r3, #27
 8002550:	d407      	bmi.n	8002562 <__swsetup_r+0x32>
 8002552:	2309      	movs	r3, #9
 8002554:	602b      	str	r3, [r5, #0]
 8002556:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800255a:	81a3      	strh	r3, [r4, #12]
 800255c:	f04f 30ff 	mov.w	r0, #4294967295
 8002560:	e034      	b.n	80025cc <__swsetup_r+0x9c>
 8002562:	0758      	lsls	r0, r3, #29
 8002564:	d512      	bpl.n	800258c <__swsetup_r+0x5c>
 8002566:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002568:	b141      	cbz	r1, 800257c <__swsetup_r+0x4c>
 800256a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800256e:	4299      	cmp	r1, r3
 8002570:	d002      	beq.n	8002578 <__swsetup_r+0x48>
 8002572:	4628      	mov	r0, r5
 8002574:	f000 f8ae 	bl	80026d4 <_free_r>
 8002578:	2300      	movs	r3, #0
 800257a:	6363      	str	r3, [r4, #52]	; 0x34
 800257c:	89a3      	ldrh	r3, [r4, #12]
 800257e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002582:	81a3      	strh	r3, [r4, #12]
 8002584:	2300      	movs	r3, #0
 8002586:	6063      	str	r3, [r4, #4]
 8002588:	6923      	ldr	r3, [r4, #16]
 800258a:	6023      	str	r3, [r4, #0]
 800258c:	89a3      	ldrh	r3, [r4, #12]
 800258e:	f043 0308 	orr.w	r3, r3, #8
 8002592:	81a3      	strh	r3, [r4, #12]
 8002594:	6923      	ldr	r3, [r4, #16]
 8002596:	b94b      	cbnz	r3, 80025ac <__swsetup_r+0x7c>
 8002598:	89a3      	ldrh	r3, [r4, #12]
 800259a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800259e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a2:	d003      	beq.n	80025ac <__swsetup_r+0x7c>
 80025a4:	4621      	mov	r1, r4
 80025a6:	4628      	mov	r0, r5
 80025a8:	f000 fd34 	bl	8003014 <__smakebuf_r>
 80025ac:	89a0      	ldrh	r0, [r4, #12]
 80025ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80025b2:	f010 0301 	ands.w	r3, r0, #1
 80025b6:	d00a      	beq.n	80025ce <__swsetup_r+0x9e>
 80025b8:	2300      	movs	r3, #0
 80025ba:	60a3      	str	r3, [r4, #8]
 80025bc:	6963      	ldr	r3, [r4, #20]
 80025be:	425b      	negs	r3, r3
 80025c0:	61a3      	str	r3, [r4, #24]
 80025c2:	6923      	ldr	r3, [r4, #16]
 80025c4:	b943      	cbnz	r3, 80025d8 <__swsetup_r+0xa8>
 80025c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80025ca:	d1c4      	bne.n	8002556 <__swsetup_r+0x26>
 80025cc:	bd38      	pop	{r3, r4, r5, pc}
 80025ce:	0781      	lsls	r1, r0, #30
 80025d0:	bf58      	it	pl
 80025d2:	6963      	ldrpl	r3, [r4, #20]
 80025d4:	60a3      	str	r3, [r4, #8]
 80025d6:	e7f4      	b.n	80025c2 <__swsetup_r+0x92>
 80025d8:	2000      	movs	r0, #0
 80025da:	e7f7      	b.n	80025cc <__swsetup_r+0x9c>
 80025dc:	20000064 	.word	0x20000064

080025e0 <memset>:
 80025e0:	4402      	add	r2, r0
 80025e2:	4603      	mov	r3, r0
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d100      	bne.n	80025ea <memset+0xa>
 80025e8:	4770      	bx	lr
 80025ea:	f803 1b01 	strb.w	r1, [r3], #1
 80025ee:	e7f9      	b.n	80025e4 <memset+0x4>

080025f0 <_close_r>:
 80025f0:	b538      	push	{r3, r4, r5, lr}
 80025f2:	4d06      	ldr	r5, [pc, #24]	; (800260c <_close_r+0x1c>)
 80025f4:	2300      	movs	r3, #0
 80025f6:	4604      	mov	r4, r0
 80025f8:	4608      	mov	r0, r1
 80025fa:	602b      	str	r3, [r5, #0]
 80025fc:	f7fe fa9d 	bl	8000b3a <_close>
 8002600:	1c43      	adds	r3, r0, #1
 8002602:	d102      	bne.n	800260a <_close_r+0x1a>
 8002604:	682b      	ldr	r3, [r5, #0]
 8002606:	b103      	cbz	r3, 800260a <_close_r+0x1a>
 8002608:	6023      	str	r3, [r4, #0]
 800260a:	bd38      	pop	{r3, r4, r5, pc}
 800260c:	2000020c 	.word	0x2000020c

08002610 <_lseek_r>:
 8002610:	b538      	push	{r3, r4, r5, lr}
 8002612:	4d07      	ldr	r5, [pc, #28]	; (8002630 <_lseek_r+0x20>)
 8002614:	4604      	mov	r4, r0
 8002616:	4608      	mov	r0, r1
 8002618:	4611      	mov	r1, r2
 800261a:	2200      	movs	r2, #0
 800261c:	602a      	str	r2, [r5, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	f7fe fab2 	bl	8000b88 <_lseek>
 8002624:	1c43      	adds	r3, r0, #1
 8002626:	d102      	bne.n	800262e <_lseek_r+0x1e>
 8002628:	682b      	ldr	r3, [r5, #0]
 800262a:	b103      	cbz	r3, 800262e <_lseek_r+0x1e>
 800262c:	6023      	str	r3, [r4, #0]
 800262e:	bd38      	pop	{r3, r4, r5, pc}
 8002630:	2000020c 	.word	0x2000020c

08002634 <_read_r>:
 8002634:	b538      	push	{r3, r4, r5, lr}
 8002636:	4d07      	ldr	r5, [pc, #28]	; (8002654 <_read_r+0x20>)
 8002638:	4604      	mov	r4, r0
 800263a:	4608      	mov	r0, r1
 800263c:	4611      	mov	r1, r2
 800263e:	2200      	movs	r2, #0
 8002640:	602a      	str	r2, [r5, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	f7fe fa40 	bl	8000ac8 <_read>
 8002648:	1c43      	adds	r3, r0, #1
 800264a:	d102      	bne.n	8002652 <_read_r+0x1e>
 800264c:	682b      	ldr	r3, [r5, #0]
 800264e:	b103      	cbz	r3, 8002652 <_read_r+0x1e>
 8002650:	6023      	str	r3, [r4, #0]
 8002652:	bd38      	pop	{r3, r4, r5, pc}
 8002654:	2000020c 	.word	0x2000020c

08002658 <_write_r>:
 8002658:	b538      	push	{r3, r4, r5, lr}
 800265a:	4d07      	ldr	r5, [pc, #28]	; (8002678 <_write_r+0x20>)
 800265c:	4604      	mov	r4, r0
 800265e:	4608      	mov	r0, r1
 8002660:	4611      	mov	r1, r2
 8002662:	2200      	movs	r2, #0
 8002664:	602a      	str	r2, [r5, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	f7fe fa4b 	bl	8000b02 <_write>
 800266c:	1c43      	adds	r3, r0, #1
 800266e:	d102      	bne.n	8002676 <_write_r+0x1e>
 8002670:	682b      	ldr	r3, [r5, #0]
 8002672:	b103      	cbz	r3, 8002676 <_write_r+0x1e>
 8002674:	6023      	str	r3, [r4, #0]
 8002676:	bd38      	pop	{r3, r4, r5, pc}
 8002678:	2000020c 	.word	0x2000020c

0800267c <__errno>:
 800267c:	4b01      	ldr	r3, [pc, #4]	; (8002684 <__errno+0x8>)
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	20000064 	.word	0x20000064

08002688 <__libc_init_array>:
 8002688:	b570      	push	{r4, r5, r6, lr}
 800268a:	4d0d      	ldr	r5, [pc, #52]	; (80026c0 <__libc_init_array+0x38>)
 800268c:	4c0d      	ldr	r4, [pc, #52]	; (80026c4 <__libc_init_array+0x3c>)
 800268e:	1b64      	subs	r4, r4, r5
 8002690:	10a4      	asrs	r4, r4, #2
 8002692:	2600      	movs	r6, #0
 8002694:	42a6      	cmp	r6, r4
 8002696:	d109      	bne.n	80026ac <__libc_init_array+0x24>
 8002698:	4d0b      	ldr	r5, [pc, #44]	; (80026c8 <__libc_init_array+0x40>)
 800269a:	4c0c      	ldr	r4, [pc, #48]	; (80026cc <__libc_init_array+0x44>)
 800269c:	f000 fd28 	bl	80030f0 <_init>
 80026a0:	1b64      	subs	r4, r4, r5
 80026a2:	10a4      	asrs	r4, r4, #2
 80026a4:	2600      	movs	r6, #0
 80026a6:	42a6      	cmp	r6, r4
 80026a8:	d105      	bne.n	80026b6 <__libc_init_array+0x2e>
 80026aa:	bd70      	pop	{r4, r5, r6, pc}
 80026ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80026b0:	4798      	blx	r3
 80026b2:	3601      	adds	r6, #1
 80026b4:	e7ee      	b.n	8002694 <__libc_init_array+0xc>
 80026b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ba:	4798      	blx	r3
 80026bc:	3601      	adds	r6, #1
 80026be:	e7f2      	b.n	80026a6 <__libc_init_array+0x1e>
 80026c0:	08003170 	.word	0x08003170
 80026c4:	08003170 	.word	0x08003170
 80026c8:	08003170 	.word	0x08003170
 80026cc:	08003174 	.word	0x08003174

080026d0 <__retarget_lock_acquire_recursive>:
 80026d0:	4770      	bx	lr

080026d2 <__retarget_lock_release_recursive>:
 80026d2:	4770      	bx	lr

080026d4 <_free_r>:
 80026d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80026d6:	2900      	cmp	r1, #0
 80026d8:	d044      	beq.n	8002764 <_free_r+0x90>
 80026da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026de:	9001      	str	r0, [sp, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f1a1 0404 	sub.w	r4, r1, #4
 80026e6:	bfb8      	it	lt
 80026e8:	18e4      	addlt	r4, r4, r3
 80026ea:	f000 f8df 	bl	80028ac <__malloc_lock>
 80026ee:	4a1e      	ldr	r2, [pc, #120]	; (8002768 <_free_r+0x94>)
 80026f0:	9801      	ldr	r0, [sp, #4]
 80026f2:	6813      	ldr	r3, [r2, #0]
 80026f4:	b933      	cbnz	r3, 8002704 <_free_r+0x30>
 80026f6:	6063      	str	r3, [r4, #4]
 80026f8:	6014      	str	r4, [r2, #0]
 80026fa:	b003      	add	sp, #12
 80026fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002700:	f000 b8da 	b.w	80028b8 <__malloc_unlock>
 8002704:	42a3      	cmp	r3, r4
 8002706:	d908      	bls.n	800271a <_free_r+0x46>
 8002708:	6825      	ldr	r5, [r4, #0]
 800270a:	1961      	adds	r1, r4, r5
 800270c:	428b      	cmp	r3, r1
 800270e:	bf01      	itttt	eq
 8002710:	6819      	ldreq	r1, [r3, #0]
 8002712:	685b      	ldreq	r3, [r3, #4]
 8002714:	1949      	addeq	r1, r1, r5
 8002716:	6021      	streq	r1, [r4, #0]
 8002718:	e7ed      	b.n	80026f6 <_free_r+0x22>
 800271a:	461a      	mov	r2, r3
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	b10b      	cbz	r3, 8002724 <_free_r+0x50>
 8002720:	42a3      	cmp	r3, r4
 8002722:	d9fa      	bls.n	800271a <_free_r+0x46>
 8002724:	6811      	ldr	r1, [r2, #0]
 8002726:	1855      	adds	r5, r2, r1
 8002728:	42a5      	cmp	r5, r4
 800272a:	d10b      	bne.n	8002744 <_free_r+0x70>
 800272c:	6824      	ldr	r4, [r4, #0]
 800272e:	4421      	add	r1, r4
 8002730:	1854      	adds	r4, r2, r1
 8002732:	42a3      	cmp	r3, r4
 8002734:	6011      	str	r1, [r2, #0]
 8002736:	d1e0      	bne.n	80026fa <_free_r+0x26>
 8002738:	681c      	ldr	r4, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	6053      	str	r3, [r2, #4]
 800273e:	440c      	add	r4, r1
 8002740:	6014      	str	r4, [r2, #0]
 8002742:	e7da      	b.n	80026fa <_free_r+0x26>
 8002744:	d902      	bls.n	800274c <_free_r+0x78>
 8002746:	230c      	movs	r3, #12
 8002748:	6003      	str	r3, [r0, #0]
 800274a:	e7d6      	b.n	80026fa <_free_r+0x26>
 800274c:	6825      	ldr	r5, [r4, #0]
 800274e:	1961      	adds	r1, r4, r5
 8002750:	428b      	cmp	r3, r1
 8002752:	bf04      	itt	eq
 8002754:	6819      	ldreq	r1, [r3, #0]
 8002756:	685b      	ldreq	r3, [r3, #4]
 8002758:	6063      	str	r3, [r4, #4]
 800275a:	bf04      	itt	eq
 800275c:	1949      	addeq	r1, r1, r5
 800275e:	6021      	streq	r1, [r4, #0]
 8002760:	6054      	str	r4, [r2, #4]
 8002762:	e7ca      	b.n	80026fa <_free_r+0x26>
 8002764:	b003      	add	sp, #12
 8002766:	bd30      	pop	{r4, r5, pc}
 8002768:	20000214 	.word	0x20000214

0800276c <sbrk_aligned>:
 800276c:	b570      	push	{r4, r5, r6, lr}
 800276e:	4e0e      	ldr	r6, [pc, #56]	; (80027a8 <sbrk_aligned+0x3c>)
 8002770:	460c      	mov	r4, r1
 8002772:	6831      	ldr	r1, [r6, #0]
 8002774:	4605      	mov	r5, r0
 8002776:	b911      	cbnz	r1, 800277e <sbrk_aligned+0x12>
 8002778:	f000 fcaa 	bl	80030d0 <_sbrk_r>
 800277c:	6030      	str	r0, [r6, #0]
 800277e:	4621      	mov	r1, r4
 8002780:	4628      	mov	r0, r5
 8002782:	f000 fca5 	bl	80030d0 <_sbrk_r>
 8002786:	1c43      	adds	r3, r0, #1
 8002788:	d00a      	beq.n	80027a0 <sbrk_aligned+0x34>
 800278a:	1cc4      	adds	r4, r0, #3
 800278c:	f024 0403 	bic.w	r4, r4, #3
 8002790:	42a0      	cmp	r0, r4
 8002792:	d007      	beq.n	80027a4 <sbrk_aligned+0x38>
 8002794:	1a21      	subs	r1, r4, r0
 8002796:	4628      	mov	r0, r5
 8002798:	f000 fc9a 	bl	80030d0 <_sbrk_r>
 800279c:	3001      	adds	r0, #1
 800279e:	d101      	bne.n	80027a4 <sbrk_aligned+0x38>
 80027a0:	f04f 34ff 	mov.w	r4, #4294967295
 80027a4:	4620      	mov	r0, r4
 80027a6:	bd70      	pop	{r4, r5, r6, pc}
 80027a8:	20000218 	.word	0x20000218

080027ac <_malloc_r>:
 80027ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027b0:	1ccd      	adds	r5, r1, #3
 80027b2:	f025 0503 	bic.w	r5, r5, #3
 80027b6:	3508      	adds	r5, #8
 80027b8:	2d0c      	cmp	r5, #12
 80027ba:	bf38      	it	cc
 80027bc:	250c      	movcc	r5, #12
 80027be:	2d00      	cmp	r5, #0
 80027c0:	4607      	mov	r7, r0
 80027c2:	db01      	blt.n	80027c8 <_malloc_r+0x1c>
 80027c4:	42a9      	cmp	r1, r5
 80027c6:	d905      	bls.n	80027d4 <_malloc_r+0x28>
 80027c8:	230c      	movs	r3, #12
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	2600      	movs	r6, #0
 80027ce:	4630      	mov	r0, r6
 80027d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80028a8 <_malloc_r+0xfc>
 80027d8:	f000 f868 	bl	80028ac <__malloc_lock>
 80027dc:	f8d8 3000 	ldr.w	r3, [r8]
 80027e0:	461c      	mov	r4, r3
 80027e2:	bb5c      	cbnz	r4, 800283c <_malloc_r+0x90>
 80027e4:	4629      	mov	r1, r5
 80027e6:	4638      	mov	r0, r7
 80027e8:	f7ff ffc0 	bl	800276c <sbrk_aligned>
 80027ec:	1c43      	adds	r3, r0, #1
 80027ee:	4604      	mov	r4, r0
 80027f0:	d155      	bne.n	800289e <_malloc_r+0xf2>
 80027f2:	f8d8 4000 	ldr.w	r4, [r8]
 80027f6:	4626      	mov	r6, r4
 80027f8:	2e00      	cmp	r6, #0
 80027fa:	d145      	bne.n	8002888 <_malloc_r+0xdc>
 80027fc:	2c00      	cmp	r4, #0
 80027fe:	d048      	beq.n	8002892 <_malloc_r+0xe6>
 8002800:	6823      	ldr	r3, [r4, #0]
 8002802:	4631      	mov	r1, r6
 8002804:	4638      	mov	r0, r7
 8002806:	eb04 0903 	add.w	r9, r4, r3
 800280a:	f000 fc61 	bl	80030d0 <_sbrk_r>
 800280e:	4581      	cmp	r9, r0
 8002810:	d13f      	bne.n	8002892 <_malloc_r+0xe6>
 8002812:	6821      	ldr	r1, [r4, #0]
 8002814:	1a6d      	subs	r5, r5, r1
 8002816:	4629      	mov	r1, r5
 8002818:	4638      	mov	r0, r7
 800281a:	f7ff ffa7 	bl	800276c <sbrk_aligned>
 800281e:	3001      	adds	r0, #1
 8002820:	d037      	beq.n	8002892 <_malloc_r+0xe6>
 8002822:	6823      	ldr	r3, [r4, #0]
 8002824:	442b      	add	r3, r5
 8002826:	6023      	str	r3, [r4, #0]
 8002828:	f8d8 3000 	ldr.w	r3, [r8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d038      	beq.n	80028a2 <_malloc_r+0xf6>
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	42a2      	cmp	r2, r4
 8002834:	d12b      	bne.n	800288e <_malloc_r+0xe2>
 8002836:	2200      	movs	r2, #0
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	e00f      	b.n	800285c <_malloc_r+0xb0>
 800283c:	6822      	ldr	r2, [r4, #0]
 800283e:	1b52      	subs	r2, r2, r5
 8002840:	d41f      	bmi.n	8002882 <_malloc_r+0xd6>
 8002842:	2a0b      	cmp	r2, #11
 8002844:	d917      	bls.n	8002876 <_malloc_r+0xca>
 8002846:	1961      	adds	r1, r4, r5
 8002848:	42a3      	cmp	r3, r4
 800284a:	6025      	str	r5, [r4, #0]
 800284c:	bf18      	it	ne
 800284e:	6059      	strne	r1, [r3, #4]
 8002850:	6863      	ldr	r3, [r4, #4]
 8002852:	bf08      	it	eq
 8002854:	f8c8 1000 	streq.w	r1, [r8]
 8002858:	5162      	str	r2, [r4, r5]
 800285a:	604b      	str	r3, [r1, #4]
 800285c:	4638      	mov	r0, r7
 800285e:	f104 060b 	add.w	r6, r4, #11
 8002862:	f000 f829 	bl	80028b8 <__malloc_unlock>
 8002866:	f026 0607 	bic.w	r6, r6, #7
 800286a:	1d23      	adds	r3, r4, #4
 800286c:	1af2      	subs	r2, r6, r3
 800286e:	d0ae      	beq.n	80027ce <_malloc_r+0x22>
 8002870:	1b9b      	subs	r3, r3, r6
 8002872:	50a3      	str	r3, [r4, r2]
 8002874:	e7ab      	b.n	80027ce <_malloc_r+0x22>
 8002876:	42a3      	cmp	r3, r4
 8002878:	6862      	ldr	r2, [r4, #4]
 800287a:	d1dd      	bne.n	8002838 <_malloc_r+0x8c>
 800287c:	f8c8 2000 	str.w	r2, [r8]
 8002880:	e7ec      	b.n	800285c <_malloc_r+0xb0>
 8002882:	4623      	mov	r3, r4
 8002884:	6864      	ldr	r4, [r4, #4]
 8002886:	e7ac      	b.n	80027e2 <_malloc_r+0x36>
 8002888:	4634      	mov	r4, r6
 800288a:	6876      	ldr	r6, [r6, #4]
 800288c:	e7b4      	b.n	80027f8 <_malloc_r+0x4c>
 800288e:	4613      	mov	r3, r2
 8002890:	e7cc      	b.n	800282c <_malloc_r+0x80>
 8002892:	230c      	movs	r3, #12
 8002894:	603b      	str	r3, [r7, #0]
 8002896:	4638      	mov	r0, r7
 8002898:	f000 f80e 	bl	80028b8 <__malloc_unlock>
 800289c:	e797      	b.n	80027ce <_malloc_r+0x22>
 800289e:	6025      	str	r5, [r4, #0]
 80028a0:	e7dc      	b.n	800285c <_malloc_r+0xb0>
 80028a2:	605b      	str	r3, [r3, #4]
 80028a4:	deff      	udf	#255	; 0xff
 80028a6:	bf00      	nop
 80028a8:	20000214 	.word	0x20000214

080028ac <__malloc_lock>:
 80028ac:	4801      	ldr	r0, [pc, #4]	; (80028b4 <__malloc_lock+0x8>)
 80028ae:	f7ff bf0f 	b.w	80026d0 <__retarget_lock_acquire_recursive>
 80028b2:	bf00      	nop
 80028b4:	20000210 	.word	0x20000210

080028b8 <__malloc_unlock>:
 80028b8:	4801      	ldr	r0, [pc, #4]	; (80028c0 <__malloc_unlock+0x8>)
 80028ba:	f7ff bf0a 	b.w	80026d2 <__retarget_lock_release_recursive>
 80028be:	bf00      	nop
 80028c0:	20000210 	.word	0x20000210

080028c4 <__sfputc_r>:
 80028c4:	6893      	ldr	r3, [r2, #8]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	b410      	push	{r4}
 80028cc:	6093      	str	r3, [r2, #8]
 80028ce:	da08      	bge.n	80028e2 <__sfputc_r+0x1e>
 80028d0:	6994      	ldr	r4, [r2, #24]
 80028d2:	42a3      	cmp	r3, r4
 80028d4:	db01      	blt.n	80028da <__sfputc_r+0x16>
 80028d6:	290a      	cmp	r1, #10
 80028d8:	d103      	bne.n	80028e2 <__sfputc_r+0x1e>
 80028da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028de:	f7ff bdea 	b.w	80024b6 <__swbuf_r>
 80028e2:	6813      	ldr	r3, [r2, #0]
 80028e4:	1c58      	adds	r0, r3, #1
 80028e6:	6010      	str	r0, [r2, #0]
 80028e8:	7019      	strb	r1, [r3, #0]
 80028ea:	4608      	mov	r0, r1
 80028ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <__sfputs_r>:
 80028f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f4:	4606      	mov	r6, r0
 80028f6:	460f      	mov	r7, r1
 80028f8:	4614      	mov	r4, r2
 80028fa:	18d5      	adds	r5, r2, r3
 80028fc:	42ac      	cmp	r4, r5
 80028fe:	d101      	bne.n	8002904 <__sfputs_r+0x12>
 8002900:	2000      	movs	r0, #0
 8002902:	e007      	b.n	8002914 <__sfputs_r+0x22>
 8002904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002908:	463a      	mov	r2, r7
 800290a:	4630      	mov	r0, r6
 800290c:	f7ff ffda 	bl	80028c4 <__sfputc_r>
 8002910:	1c43      	adds	r3, r0, #1
 8002912:	d1f3      	bne.n	80028fc <__sfputs_r+0xa>
 8002914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002918 <_vfiprintf_r>:
 8002918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800291c:	460d      	mov	r5, r1
 800291e:	b09d      	sub	sp, #116	; 0x74
 8002920:	4614      	mov	r4, r2
 8002922:	4698      	mov	r8, r3
 8002924:	4606      	mov	r6, r0
 8002926:	b118      	cbz	r0, 8002930 <_vfiprintf_r+0x18>
 8002928:	6a03      	ldr	r3, [r0, #32]
 800292a:	b90b      	cbnz	r3, 8002930 <_vfiprintf_r+0x18>
 800292c:	f7ff fcdc 	bl	80022e8 <__sinit>
 8002930:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002932:	07d9      	lsls	r1, r3, #31
 8002934:	d405      	bmi.n	8002942 <_vfiprintf_r+0x2a>
 8002936:	89ab      	ldrh	r3, [r5, #12]
 8002938:	059a      	lsls	r2, r3, #22
 800293a:	d402      	bmi.n	8002942 <_vfiprintf_r+0x2a>
 800293c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800293e:	f7ff fec7 	bl	80026d0 <__retarget_lock_acquire_recursive>
 8002942:	89ab      	ldrh	r3, [r5, #12]
 8002944:	071b      	lsls	r3, r3, #28
 8002946:	d501      	bpl.n	800294c <_vfiprintf_r+0x34>
 8002948:	692b      	ldr	r3, [r5, #16]
 800294a:	b99b      	cbnz	r3, 8002974 <_vfiprintf_r+0x5c>
 800294c:	4629      	mov	r1, r5
 800294e:	4630      	mov	r0, r6
 8002950:	f7ff fdee 	bl	8002530 <__swsetup_r>
 8002954:	b170      	cbz	r0, 8002974 <_vfiprintf_r+0x5c>
 8002956:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002958:	07dc      	lsls	r4, r3, #31
 800295a:	d504      	bpl.n	8002966 <_vfiprintf_r+0x4e>
 800295c:	f04f 30ff 	mov.w	r0, #4294967295
 8002960:	b01d      	add	sp, #116	; 0x74
 8002962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002966:	89ab      	ldrh	r3, [r5, #12]
 8002968:	0598      	lsls	r0, r3, #22
 800296a:	d4f7      	bmi.n	800295c <_vfiprintf_r+0x44>
 800296c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800296e:	f7ff feb0 	bl	80026d2 <__retarget_lock_release_recursive>
 8002972:	e7f3      	b.n	800295c <_vfiprintf_r+0x44>
 8002974:	2300      	movs	r3, #0
 8002976:	9309      	str	r3, [sp, #36]	; 0x24
 8002978:	2320      	movs	r3, #32
 800297a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800297e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002982:	2330      	movs	r3, #48	; 0x30
 8002984:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002b38 <_vfiprintf_r+0x220>
 8002988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800298c:	f04f 0901 	mov.w	r9, #1
 8002990:	4623      	mov	r3, r4
 8002992:	469a      	mov	sl, r3
 8002994:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002998:	b10a      	cbz	r2, 800299e <_vfiprintf_r+0x86>
 800299a:	2a25      	cmp	r2, #37	; 0x25
 800299c:	d1f9      	bne.n	8002992 <_vfiprintf_r+0x7a>
 800299e:	ebba 0b04 	subs.w	fp, sl, r4
 80029a2:	d00b      	beq.n	80029bc <_vfiprintf_r+0xa4>
 80029a4:	465b      	mov	r3, fp
 80029a6:	4622      	mov	r2, r4
 80029a8:	4629      	mov	r1, r5
 80029aa:	4630      	mov	r0, r6
 80029ac:	f7ff ffa1 	bl	80028f2 <__sfputs_r>
 80029b0:	3001      	adds	r0, #1
 80029b2:	f000 80a9 	beq.w	8002b08 <_vfiprintf_r+0x1f0>
 80029b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029b8:	445a      	add	r2, fp
 80029ba:	9209      	str	r2, [sp, #36]	; 0x24
 80029bc:	f89a 3000 	ldrb.w	r3, [sl]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80a1 	beq.w	8002b08 <_vfiprintf_r+0x1f0>
 80029c6:	2300      	movs	r3, #0
 80029c8:	f04f 32ff 	mov.w	r2, #4294967295
 80029cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029d0:	f10a 0a01 	add.w	sl, sl, #1
 80029d4:	9304      	str	r3, [sp, #16]
 80029d6:	9307      	str	r3, [sp, #28]
 80029d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80029dc:	931a      	str	r3, [sp, #104]	; 0x68
 80029de:	4654      	mov	r4, sl
 80029e0:	2205      	movs	r2, #5
 80029e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029e6:	4854      	ldr	r0, [pc, #336]	; (8002b38 <_vfiprintf_r+0x220>)
 80029e8:	f7fd fc02 	bl	80001f0 <memchr>
 80029ec:	9a04      	ldr	r2, [sp, #16]
 80029ee:	b9d8      	cbnz	r0, 8002a28 <_vfiprintf_r+0x110>
 80029f0:	06d1      	lsls	r1, r2, #27
 80029f2:	bf44      	itt	mi
 80029f4:	2320      	movmi	r3, #32
 80029f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029fa:	0713      	lsls	r3, r2, #28
 80029fc:	bf44      	itt	mi
 80029fe:	232b      	movmi	r3, #43	; 0x2b
 8002a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a04:	f89a 3000 	ldrb.w	r3, [sl]
 8002a08:	2b2a      	cmp	r3, #42	; 0x2a
 8002a0a:	d015      	beq.n	8002a38 <_vfiprintf_r+0x120>
 8002a0c:	9a07      	ldr	r2, [sp, #28]
 8002a0e:	4654      	mov	r4, sl
 8002a10:	2000      	movs	r0, #0
 8002a12:	f04f 0c0a 	mov.w	ip, #10
 8002a16:	4621      	mov	r1, r4
 8002a18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a1c:	3b30      	subs	r3, #48	; 0x30
 8002a1e:	2b09      	cmp	r3, #9
 8002a20:	d94d      	bls.n	8002abe <_vfiprintf_r+0x1a6>
 8002a22:	b1b0      	cbz	r0, 8002a52 <_vfiprintf_r+0x13a>
 8002a24:	9207      	str	r2, [sp, #28]
 8002a26:	e014      	b.n	8002a52 <_vfiprintf_r+0x13a>
 8002a28:	eba0 0308 	sub.w	r3, r0, r8
 8002a2c:	fa09 f303 	lsl.w	r3, r9, r3
 8002a30:	4313      	orrs	r3, r2
 8002a32:	9304      	str	r3, [sp, #16]
 8002a34:	46a2      	mov	sl, r4
 8002a36:	e7d2      	b.n	80029de <_vfiprintf_r+0xc6>
 8002a38:	9b03      	ldr	r3, [sp, #12]
 8002a3a:	1d19      	adds	r1, r3, #4
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	9103      	str	r1, [sp, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bfbb      	ittet	lt
 8002a44:	425b      	neglt	r3, r3
 8002a46:	f042 0202 	orrlt.w	r2, r2, #2
 8002a4a:	9307      	strge	r3, [sp, #28]
 8002a4c:	9307      	strlt	r3, [sp, #28]
 8002a4e:	bfb8      	it	lt
 8002a50:	9204      	strlt	r2, [sp, #16]
 8002a52:	7823      	ldrb	r3, [r4, #0]
 8002a54:	2b2e      	cmp	r3, #46	; 0x2e
 8002a56:	d10c      	bne.n	8002a72 <_vfiprintf_r+0x15a>
 8002a58:	7863      	ldrb	r3, [r4, #1]
 8002a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8002a5c:	d134      	bne.n	8002ac8 <_vfiprintf_r+0x1b0>
 8002a5e:	9b03      	ldr	r3, [sp, #12]
 8002a60:	1d1a      	adds	r2, r3, #4
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	9203      	str	r2, [sp, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	bfb8      	it	lt
 8002a6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a6e:	3402      	adds	r4, #2
 8002a70:	9305      	str	r3, [sp, #20]
 8002a72:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002b48 <_vfiprintf_r+0x230>
 8002a76:	7821      	ldrb	r1, [r4, #0]
 8002a78:	2203      	movs	r2, #3
 8002a7a:	4650      	mov	r0, sl
 8002a7c:	f7fd fbb8 	bl	80001f0 <memchr>
 8002a80:	b138      	cbz	r0, 8002a92 <_vfiprintf_r+0x17a>
 8002a82:	9b04      	ldr	r3, [sp, #16]
 8002a84:	eba0 000a 	sub.w	r0, r0, sl
 8002a88:	2240      	movs	r2, #64	; 0x40
 8002a8a:	4082      	lsls	r2, r0
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	3401      	adds	r4, #1
 8002a90:	9304      	str	r3, [sp, #16]
 8002a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a96:	4829      	ldr	r0, [pc, #164]	; (8002b3c <_vfiprintf_r+0x224>)
 8002a98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a9c:	2206      	movs	r2, #6
 8002a9e:	f7fd fba7 	bl	80001f0 <memchr>
 8002aa2:	2800      	cmp	r0, #0
 8002aa4:	d03f      	beq.n	8002b26 <_vfiprintf_r+0x20e>
 8002aa6:	4b26      	ldr	r3, [pc, #152]	; (8002b40 <_vfiprintf_r+0x228>)
 8002aa8:	bb1b      	cbnz	r3, 8002af2 <_vfiprintf_r+0x1da>
 8002aaa:	9b03      	ldr	r3, [sp, #12]
 8002aac:	3307      	adds	r3, #7
 8002aae:	f023 0307 	bic.w	r3, r3, #7
 8002ab2:	3308      	adds	r3, #8
 8002ab4:	9303      	str	r3, [sp, #12]
 8002ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ab8:	443b      	add	r3, r7
 8002aba:	9309      	str	r3, [sp, #36]	; 0x24
 8002abc:	e768      	b.n	8002990 <_vfiprintf_r+0x78>
 8002abe:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ac2:	460c      	mov	r4, r1
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	e7a6      	b.n	8002a16 <_vfiprintf_r+0xfe>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	3401      	adds	r4, #1
 8002acc:	9305      	str	r3, [sp, #20]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f04f 0c0a 	mov.w	ip, #10
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ada:	3a30      	subs	r2, #48	; 0x30
 8002adc:	2a09      	cmp	r2, #9
 8002ade:	d903      	bls.n	8002ae8 <_vfiprintf_r+0x1d0>
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0c6      	beq.n	8002a72 <_vfiprintf_r+0x15a>
 8002ae4:	9105      	str	r1, [sp, #20]
 8002ae6:	e7c4      	b.n	8002a72 <_vfiprintf_r+0x15a>
 8002ae8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002aec:	4604      	mov	r4, r0
 8002aee:	2301      	movs	r3, #1
 8002af0:	e7f0      	b.n	8002ad4 <_vfiprintf_r+0x1bc>
 8002af2:	ab03      	add	r3, sp, #12
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	462a      	mov	r2, r5
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <_vfiprintf_r+0x22c>)
 8002afa:	a904      	add	r1, sp, #16
 8002afc:	4630      	mov	r0, r6
 8002afe:	f3af 8000 	nop.w
 8002b02:	4607      	mov	r7, r0
 8002b04:	1c78      	adds	r0, r7, #1
 8002b06:	d1d6      	bne.n	8002ab6 <_vfiprintf_r+0x19e>
 8002b08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b0a:	07d9      	lsls	r1, r3, #31
 8002b0c:	d405      	bmi.n	8002b1a <_vfiprintf_r+0x202>
 8002b0e:	89ab      	ldrh	r3, [r5, #12]
 8002b10:	059a      	lsls	r2, r3, #22
 8002b12:	d402      	bmi.n	8002b1a <_vfiprintf_r+0x202>
 8002b14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b16:	f7ff fddc 	bl	80026d2 <__retarget_lock_release_recursive>
 8002b1a:	89ab      	ldrh	r3, [r5, #12]
 8002b1c:	065b      	lsls	r3, r3, #25
 8002b1e:	f53f af1d 	bmi.w	800295c <_vfiprintf_r+0x44>
 8002b22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b24:	e71c      	b.n	8002960 <_vfiprintf_r+0x48>
 8002b26:	ab03      	add	r3, sp, #12
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	462a      	mov	r2, r5
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <_vfiprintf_r+0x22c>)
 8002b2e:	a904      	add	r1, sp, #16
 8002b30:	4630      	mov	r0, r6
 8002b32:	f000 f879 	bl	8002c28 <_printf_i>
 8002b36:	e7e4      	b.n	8002b02 <_vfiprintf_r+0x1ea>
 8002b38:	08003134 	.word	0x08003134
 8002b3c:	0800313e 	.word	0x0800313e
 8002b40:	00000000 	.word	0x00000000
 8002b44:	080028f3 	.word	0x080028f3
 8002b48:	0800313a 	.word	0x0800313a

08002b4c <_printf_common>:
 8002b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b50:	4616      	mov	r6, r2
 8002b52:	4699      	mov	r9, r3
 8002b54:	688a      	ldr	r2, [r1, #8]
 8002b56:	690b      	ldr	r3, [r1, #16]
 8002b58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	bfb8      	it	lt
 8002b60:	4613      	movlt	r3, r2
 8002b62:	6033      	str	r3, [r6, #0]
 8002b64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b68:	4607      	mov	r7, r0
 8002b6a:	460c      	mov	r4, r1
 8002b6c:	b10a      	cbz	r2, 8002b72 <_printf_common+0x26>
 8002b6e:	3301      	adds	r3, #1
 8002b70:	6033      	str	r3, [r6, #0]
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	0699      	lsls	r1, r3, #26
 8002b76:	bf42      	ittt	mi
 8002b78:	6833      	ldrmi	r3, [r6, #0]
 8002b7a:	3302      	addmi	r3, #2
 8002b7c:	6033      	strmi	r3, [r6, #0]
 8002b7e:	6825      	ldr	r5, [r4, #0]
 8002b80:	f015 0506 	ands.w	r5, r5, #6
 8002b84:	d106      	bne.n	8002b94 <_printf_common+0x48>
 8002b86:	f104 0a19 	add.w	sl, r4, #25
 8002b8a:	68e3      	ldr	r3, [r4, #12]
 8002b8c:	6832      	ldr	r2, [r6, #0]
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	42ab      	cmp	r3, r5
 8002b92:	dc26      	bgt.n	8002be2 <_printf_common+0x96>
 8002b94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b98:	1e13      	subs	r3, r2, #0
 8002b9a:	6822      	ldr	r2, [r4, #0]
 8002b9c:	bf18      	it	ne
 8002b9e:	2301      	movne	r3, #1
 8002ba0:	0692      	lsls	r2, r2, #26
 8002ba2:	d42b      	bmi.n	8002bfc <_printf_common+0xb0>
 8002ba4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ba8:	4649      	mov	r1, r9
 8002baa:	4638      	mov	r0, r7
 8002bac:	47c0      	blx	r8
 8002bae:	3001      	adds	r0, #1
 8002bb0:	d01e      	beq.n	8002bf0 <_printf_common+0xa4>
 8002bb2:	6823      	ldr	r3, [r4, #0]
 8002bb4:	6922      	ldr	r2, [r4, #16]
 8002bb6:	f003 0306 	and.w	r3, r3, #6
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	bf02      	ittt	eq
 8002bbe:	68e5      	ldreq	r5, [r4, #12]
 8002bc0:	6833      	ldreq	r3, [r6, #0]
 8002bc2:	1aed      	subeq	r5, r5, r3
 8002bc4:	68a3      	ldr	r3, [r4, #8]
 8002bc6:	bf0c      	ite	eq
 8002bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bcc:	2500      	movne	r5, #0
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	bfc4      	itt	gt
 8002bd2:	1a9b      	subgt	r3, r3, r2
 8002bd4:	18ed      	addgt	r5, r5, r3
 8002bd6:	2600      	movs	r6, #0
 8002bd8:	341a      	adds	r4, #26
 8002bda:	42b5      	cmp	r5, r6
 8002bdc:	d11a      	bne.n	8002c14 <_printf_common+0xc8>
 8002bde:	2000      	movs	r0, #0
 8002be0:	e008      	b.n	8002bf4 <_printf_common+0xa8>
 8002be2:	2301      	movs	r3, #1
 8002be4:	4652      	mov	r2, sl
 8002be6:	4649      	mov	r1, r9
 8002be8:	4638      	mov	r0, r7
 8002bea:	47c0      	blx	r8
 8002bec:	3001      	adds	r0, #1
 8002bee:	d103      	bne.n	8002bf8 <_printf_common+0xac>
 8002bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bf8:	3501      	adds	r5, #1
 8002bfa:	e7c6      	b.n	8002b8a <_printf_common+0x3e>
 8002bfc:	18e1      	adds	r1, r4, r3
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	2030      	movs	r0, #48	; 0x30
 8002c02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c06:	4422      	add	r2, r4
 8002c08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c10:	3302      	adds	r3, #2
 8002c12:	e7c7      	b.n	8002ba4 <_printf_common+0x58>
 8002c14:	2301      	movs	r3, #1
 8002c16:	4622      	mov	r2, r4
 8002c18:	4649      	mov	r1, r9
 8002c1a:	4638      	mov	r0, r7
 8002c1c:	47c0      	blx	r8
 8002c1e:	3001      	adds	r0, #1
 8002c20:	d0e6      	beq.n	8002bf0 <_printf_common+0xa4>
 8002c22:	3601      	adds	r6, #1
 8002c24:	e7d9      	b.n	8002bda <_printf_common+0x8e>
	...

08002c28 <_printf_i>:
 8002c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c2c:	7e0f      	ldrb	r7, [r1, #24]
 8002c2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c30:	2f78      	cmp	r7, #120	; 0x78
 8002c32:	4691      	mov	r9, r2
 8002c34:	4680      	mov	r8, r0
 8002c36:	460c      	mov	r4, r1
 8002c38:	469a      	mov	sl, r3
 8002c3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c3e:	d807      	bhi.n	8002c50 <_printf_i+0x28>
 8002c40:	2f62      	cmp	r7, #98	; 0x62
 8002c42:	d80a      	bhi.n	8002c5a <_printf_i+0x32>
 8002c44:	2f00      	cmp	r7, #0
 8002c46:	f000 80d4 	beq.w	8002df2 <_printf_i+0x1ca>
 8002c4a:	2f58      	cmp	r7, #88	; 0x58
 8002c4c:	f000 80c0 	beq.w	8002dd0 <_printf_i+0x1a8>
 8002c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c58:	e03a      	b.n	8002cd0 <_printf_i+0xa8>
 8002c5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c5e:	2b15      	cmp	r3, #21
 8002c60:	d8f6      	bhi.n	8002c50 <_printf_i+0x28>
 8002c62:	a101      	add	r1, pc, #4	; (adr r1, 8002c68 <_printf_i+0x40>)
 8002c64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c68:	08002cc1 	.word	0x08002cc1
 8002c6c:	08002cd5 	.word	0x08002cd5
 8002c70:	08002c51 	.word	0x08002c51
 8002c74:	08002c51 	.word	0x08002c51
 8002c78:	08002c51 	.word	0x08002c51
 8002c7c:	08002c51 	.word	0x08002c51
 8002c80:	08002cd5 	.word	0x08002cd5
 8002c84:	08002c51 	.word	0x08002c51
 8002c88:	08002c51 	.word	0x08002c51
 8002c8c:	08002c51 	.word	0x08002c51
 8002c90:	08002c51 	.word	0x08002c51
 8002c94:	08002dd9 	.word	0x08002dd9
 8002c98:	08002d01 	.word	0x08002d01
 8002c9c:	08002d93 	.word	0x08002d93
 8002ca0:	08002c51 	.word	0x08002c51
 8002ca4:	08002c51 	.word	0x08002c51
 8002ca8:	08002dfb 	.word	0x08002dfb
 8002cac:	08002c51 	.word	0x08002c51
 8002cb0:	08002d01 	.word	0x08002d01
 8002cb4:	08002c51 	.word	0x08002c51
 8002cb8:	08002c51 	.word	0x08002c51
 8002cbc:	08002d9b 	.word	0x08002d9b
 8002cc0:	682b      	ldr	r3, [r5, #0]
 8002cc2:	1d1a      	adds	r2, r3, #4
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	602a      	str	r2, [r5, #0]
 8002cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ccc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e09f      	b.n	8002e14 <_printf_i+0x1ec>
 8002cd4:	6820      	ldr	r0, [r4, #0]
 8002cd6:	682b      	ldr	r3, [r5, #0]
 8002cd8:	0607      	lsls	r7, r0, #24
 8002cda:	f103 0104 	add.w	r1, r3, #4
 8002cde:	6029      	str	r1, [r5, #0]
 8002ce0:	d501      	bpl.n	8002ce6 <_printf_i+0xbe>
 8002ce2:	681e      	ldr	r6, [r3, #0]
 8002ce4:	e003      	b.n	8002cee <_printf_i+0xc6>
 8002ce6:	0646      	lsls	r6, r0, #25
 8002ce8:	d5fb      	bpl.n	8002ce2 <_printf_i+0xba>
 8002cea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002cee:	2e00      	cmp	r6, #0
 8002cf0:	da03      	bge.n	8002cfa <_printf_i+0xd2>
 8002cf2:	232d      	movs	r3, #45	; 0x2d
 8002cf4:	4276      	negs	r6, r6
 8002cf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cfa:	485a      	ldr	r0, [pc, #360]	; (8002e64 <_printf_i+0x23c>)
 8002cfc:	230a      	movs	r3, #10
 8002cfe:	e012      	b.n	8002d26 <_printf_i+0xfe>
 8002d00:	682b      	ldr	r3, [r5, #0]
 8002d02:	6820      	ldr	r0, [r4, #0]
 8002d04:	1d19      	adds	r1, r3, #4
 8002d06:	6029      	str	r1, [r5, #0]
 8002d08:	0605      	lsls	r5, r0, #24
 8002d0a:	d501      	bpl.n	8002d10 <_printf_i+0xe8>
 8002d0c:	681e      	ldr	r6, [r3, #0]
 8002d0e:	e002      	b.n	8002d16 <_printf_i+0xee>
 8002d10:	0641      	lsls	r1, r0, #25
 8002d12:	d5fb      	bpl.n	8002d0c <_printf_i+0xe4>
 8002d14:	881e      	ldrh	r6, [r3, #0]
 8002d16:	4853      	ldr	r0, [pc, #332]	; (8002e64 <_printf_i+0x23c>)
 8002d18:	2f6f      	cmp	r7, #111	; 0x6f
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2308      	moveq	r3, #8
 8002d1e:	230a      	movne	r3, #10
 8002d20:	2100      	movs	r1, #0
 8002d22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d26:	6865      	ldr	r5, [r4, #4]
 8002d28:	60a5      	str	r5, [r4, #8]
 8002d2a:	2d00      	cmp	r5, #0
 8002d2c:	bfa2      	ittt	ge
 8002d2e:	6821      	ldrge	r1, [r4, #0]
 8002d30:	f021 0104 	bicge.w	r1, r1, #4
 8002d34:	6021      	strge	r1, [r4, #0]
 8002d36:	b90e      	cbnz	r6, 8002d3c <_printf_i+0x114>
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	d04b      	beq.n	8002dd4 <_printf_i+0x1ac>
 8002d3c:	4615      	mov	r5, r2
 8002d3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d42:	fb03 6711 	mls	r7, r3, r1, r6
 8002d46:	5dc7      	ldrb	r7, [r0, r7]
 8002d48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d4c:	4637      	mov	r7, r6
 8002d4e:	42bb      	cmp	r3, r7
 8002d50:	460e      	mov	r6, r1
 8002d52:	d9f4      	bls.n	8002d3e <_printf_i+0x116>
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d10b      	bne.n	8002d70 <_printf_i+0x148>
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	07de      	lsls	r6, r3, #31
 8002d5c:	d508      	bpl.n	8002d70 <_printf_i+0x148>
 8002d5e:	6923      	ldr	r3, [r4, #16]
 8002d60:	6861      	ldr	r1, [r4, #4]
 8002d62:	4299      	cmp	r1, r3
 8002d64:	bfde      	ittt	le
 8002d66:	2330      	movle	r3, #48	; 0x30
 8002d68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d70:	1b52      	subs	r2, r2, r5
 8002d72:	6122      	str	r2, [r4, #16]
 8002d74:	f8cd a000 	str.w	sl, [sp]
 8002d78:	464b      	mov	r3, r9
 8002d7a:	aa03      	add	r2, sp, #12
 8002d7c:	4621      	mov	r1, r4
 8002d7e:	4640      	mov	r0, r8
 8002d80:	f7ff fee4 	bl	8002b4c <_printf_common>
 8002d84:	3001      	adds	r0, #1
 8002d86:	d14a      	bne.n	8002e1e <_printf_i+0x1f6>
 8002d88:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8c:	b004      	add	sp, #16
 8002d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d92:	6823      	ldr	r3, [r4, #0]
 8002d94:	f043 0320 	orr.w	r3, r3, #32
 8002d98:	6023      	str	r3, [r4, #0]
 8002d9a:	4833      	ldr	r0, [pc, #204]	; (8002e68 <_printf_i+0x240>)
 8002d9c:	2778      	movs	r7, #120	; 0x78
 8002d9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	6829      	ldr	r1, [r5, #0]
 8002da6:	061f      	lsls	r7, r3, #24
 8002da8:	f851 6b04 	ldr.w	r6, [r1], #4
 8002dac:	d402      	bmi.n	8002db4 <_printf_i+0x18c>
 8002dae:	065f      	lsls	r7, r3, #25
 8002db0:	bf48      	it	mi
 8002db2:	b2b6      	uxthmi	r6, r6
 8002db4:	07df      	lsls	r7, r3, #31
 8002db6:	bf48      	it	mi
 8002db8:	f043 0320 	orrmi.w	r3, r3, #32
 8002dbc:	6029      	str	r1, [r5, #0]
 8002dbe:	bf48      	it	mi
 8002dc0:	6023      	strmi	r3, [r4, #0]
 8002dc2:	b91e      	cbnz	r6, 8002dcc <_printf_i+0x1a4>
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	f023 0320 	bic.w	r3, r3, #32
 8002dca:	6023      	str	r3, [r4, #0]
 8002dcc:	2310      	movs	r3, #16
 8002dce:	e7a7      	b.n	8002d20 <_printf_i+0xf8>
 8002dd0:	4824      	ldr	r0, [pc, #144]	; (8002e64 <_printf_i+0x23c>)
 8002dd2:	e7e4      	b.n	8002d9e <_printf_i+0x176>
 8002dd4:	4615      	mov	r5, r2
 8002dd6:	e7bd      	b.n	8002d54 <_printf_i+0x12c>
 8002dd8:	682b      	ldr	r3, [r5, #0]
 8002dda:	6826      	ldr	r6, [r4, #0]
 8002ddc:	6961      	ldr	r1, [r4, #20]
 8002dde:	1d18      	adds	r0, r3, #4
 8002de0:	6028      	str	r0, [r5, #0]
 8002de2:	0635      	lsls	r5, r6, #24
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	d501      	bpl.n	8002dec <_printf_i+0x1c4>
 8002de8:	6019      	str	r1, [r3, #0]
 8002dea:	e002      	b.n	8002df2 <_printf_i+0x1ca>
 8002dec:	0670      	lsls	r0, r6, #25
 8002dee:	d5fb      	bpl.n	8002de8 <_printf_i+0x1c0>
 8002df0:	8019      	strh	r1, [r3, #0]
 8002df2:	2300      	movs	r3, #0
 8002df4:	6123      	str	r3, [r4, #16]
 8002df6:	4615      	mov	r5, r2
 8002df8:	e7bc      	b.n	8002d74 <_printf_i+0x14c>
 8002dfa:	682b      	ldr	r3, [r5, #0]
 8002dfc:	1d1a      	adds	r2, r3, #4
 8002dfe:	602a      	str	r2, [r5, #0]
 8002e00:	681d      	ldr	r5, [r3, #0]
 8002e02:	6862      	ldr	r2, [r4, #4]
 8002e04:	2100      	movs	r1, #0
 8002e06:	4628      	mov	r0, r5
 8002e08:	f7fd f9f2 	bl	80001f0 <memchr>
 8002e0c:	b108      	cbz	r0, 8002e12 <_printf_i+0x1ea>
 8002e0e:	1b40      	subs	r0, r0, r5
 8002e10:	6060      	str	r0, [r4, #4]
 8002e12:	6863      	ldr	r3, [r4, #4]
 8002e14:	6123      	str	r3, [r4, #16]
 8002e16:	2300      	movs	r3, #0
 8002e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e1c:	e7aa      	b.n	8002d74 <_printf_i+0x14c>
 8002e1e:	6923      	ldr	r3, [r4, #16]
 8002e20:	462a      	mov	r2, r5
 8002e22:	4649      	mov	r1, r9
 8002e24:	4640      	mov	r0, r8
 8002e26:	47d0      	blx	sl
 8002e28:	3001      	adds	r0, #1
 8002e2a:	d0ad      	beq.n	8002d88 <_printf_i+0x160>
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	079b      	lsls	r3, r3, #30
 8002e30:	d413      	bmi.n	8002e5a <_printf_i+0x232>
 8002e32:	68e0      	ldr	r0, [r4, #12]
 8002e34:	9b03      	ldr	r3, [sp, #12]
 8002e36:	4298      	cmp	r0, r3
 8002e38:	bfb8      	it	lt
 8002e3a:	4618      	movlt	r0, r3
 8002e3c:	e7a6      	b.n	8002d8c <_printf_i+0x164>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	4632      	mov	r2, r6
 8002e42:	4649      	mov	r1, r9
 8002e44:	4640      	mov	r0, r8
 8002e46:	47d0      	blx	sl
 8002e48:	3001      	adds	r0, #1
 8002e4a:	d09d      	beq.n	8002d88 <_printf_i+0x160>
 8002e4c:	3501      	adds	r5, #1
 8002e4e:	68e3      	ldr	r3, [r4, #12]
 8002e50:	9903      	ldr	r1, [sp, #12]
 8002e52:	1a5b      	subs	r3, r3, r1
 8002e54:	42ab      	cmp	r3, r5
 8002e56:	dcf2      	bgt.n	8002e3e <_printf_i+0x216>
 8002e58:	e7eb      	b.n	8002e32 <_printf_i+0x20a>
 8002e5a:	2500      	movs	r5, #0
 8002e5c:	f104 0619 	add.w	r6, r4, #25
 8002e60:	e7f5      	b.n	8002e4e <_printf_i+0x226>
 8002e62:	bf00      	nop
 8002e64:	08003145 	.word	0x08003145
 8002e68:	08003156 	.word	0x08003156

08002e6c <__sflush_r>:
 8002e6c:	898a      	ldrh	r2, [r1, #12]
 8002e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e72:	4605      	mov	r5, r0
 8002e74:	0710      	lsls	r0, r2, #28
 8002e76:	460c      	mov	r4, r1
 8002e78:	d458      	bmi.n	8002f2c <__sflush_r+0xc0>
 8002e7a:	684b      	ldr	r3, [r1, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	dc05      	bgt.n	8002e8c <__sflush_r+0x20>
 8002e80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	dc02      	bgt.n	8002e8c <__sflush_r+0x20>
 8002e86:	2000      	movs	r0, #0
 8002e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e8e:	2e00      	cmp	r6, #0
 8002e90:	d0f9      	beq.n	8002e86 <__sflush_r+0x1a>
 8002e92:	2300      	movs	r3, #0
 8002e94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e98:	682f      	ldr	r7, [r5, #0]
 8002e9a:	6a21      	ldr	r1, [r4, #32]
 8002e9c:	602b      	str	r3, [r5, #0]
 8002e9e:	d032      	beq.n	8002f06 <__sflush_r+0x9a>
 8002ea0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ea2:	89a3      	ldrh	r3, [r4, #12]
 8002ea4:	075a      	lsls	r2, r3, #29
 8002ea6:	d505      	bpl.n	8002eb4 <__sflush_r+0x48>
 8002ea8:	6863      	ldr	r3, [r4, #4]
 8002eaa:	1ac0      	subs	r0, r0, r3
 8002eac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002eae:	b10b      	cbz	r3, 8002eb4 <__sflush_r+0x48>
 8002eb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002eb2:	1ac0      	subs	r0, r0, r3
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002eba:	6a21      	ldr	r1, [r4, #32]
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	47b0      	blx	r6
 8002ec0:	1c43      	adds	r3, r0, #1
 8002ec2:	89a3      	ldrh	r3, [r4, #12]
 8002ec4:	d106      	bne.n	8002ed4 <__sflush_r+0x68>
 8002ec6:	6829      	ldr	r1, [r5, #0]
 8002ec8:	291d      	cmp	r1, #29
 8002eca:	d82b      	bhi.n	8002f24 <__sflush_r+0xb8>
 8002ecc:	4a29      	ldr	r2, [pc, #164]	; (8002f74 <__sflush_r+0x108>)
 8002ece:	410a      	asrs	r2, r1
 8002ed0:	07d6      	lsls	r6, r2, #31
 8002ed2:	d427      	bmi.n	8002f24 <__sflush_r+0xb8>
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	6062      	str	r2, [r4, #4]
 8002ed8:	04d9      	lsls	r1, r3, #19
 8002eda:	6922      	ldr	r2, [r4, #16]
 8002edc:	6022      	str	r2, [r4, #0]
 8002ede:	d504      	bpl.n	8002eea <__sflush_r+0x7e>
 8002ee0:	1c42      	adds	r2, r0, #1
 8002ee2:	d101      	bne.n	8002ee8 <__sflush_r+0x7c>
 8002ee4:	682b      	ldr	r3, [r5, #0]
 8002ee6:	b903      	cbnz	r3, 8002eea <__sflush_r+0x7e>
 8002ee8:	6560      	str	r0, [r4, #84]	; 0x54
 8002eea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002eec:	602f      	str	r7, [r5, #0]
 8002eee:	2900      	cmp	r1, #0
 8002ef0:	d0c9      	beq.n	8002e86 <__sflush_r+0x1a>
 8002ef2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ef6:	4299      	cmp	r1, r3
 8002ef8:	d002      	beq.n	8002f00 <__sflush_r+0x94>
 8002efa:	4628      	mov	r0, r5
 8002efc:	f7ff fbea 	bl	80026d4 <_free_r>
 8002f00:	2000      	movs	r0, #0
 8002f02:	6360      	str	r0, [r4, #52]	; 0x34
 8002f04:	e7c0      	b.n	8002e88 <__sflush_r+0x1c>
 8002f06:	2301      	movs	r3, #1
 8002f08:	4628      	mov	r0, r5
 8002f0a:	47b0      	blx	r6
 8002f0c:	1c41      	adds	r1, r0, #1
 8002f0e:	d1c8      	bne.n	8002ea2 <__sflush_r+0x36>
 8002f10:	682b      	ldr	r3, [r5, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0c5      	beq.n	8002ea2 <__sflush_r+0x36>
 8002f16:	2b1d      	cmp	r3, #29
 8002f18:	d001      	beq.n	8002f1e <__sflush_r+0xb2>
 8002f1a:	2b16      	cmp	r3, #22
 8002f1c:	d101      	bne.n	8002f22 <__sflush_r+0xb6>
 8002f1e:	602f      	str	r7, [r5, #0]
 8002f20:	e7b1      	b.n	8002e86 <__sflush_r+0x1a>
 8002f22:	89a3      	ldrh	r3, [r4, #12]
 8002f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f28:	81a3      	strh	r3, [r4, #12]
 8002f2a:	e7ad      	b.n	8002e88 <__sflush_r+0x1c>
 8002f2c:	690f      	ldr	r7, [r1, #16]
 8002f2e:	2f00      	cmp	r7, #0
 8002f30:	d0a9      	beq.n	8002e86 <__sflush_r+0x1a>
 8002f32:	0793      	lsls	r3, r2, #30
 8002f34:	680e      	ldr	r6, [r1, #0]
 8002f36:	bf08      	it	eq
 8002f38:	694b      	ldreq	r3, [r1, #20]
 8002f3a:	600f      	str	r7, [r1, #0]
 8002f3c:	bf18      	it	ne
 8002f3e:	2300      	movne	r3, #0
 8002f40:	eba6 0807 	sub.w	r8, r6, r7
 8002f44:	608b      	str	r3, [r1, #8]
 8002f46:	f1b8 0f00 	cmp.w	r8, #0
 8002f4a:	dd9c      	ble.n	8002e86 <__sflush_r+0x1a>
 8002f4c:	6a21      	ldr	r1, [r4, #32]
 8002f4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f50:	4643      	mov	r3, r8
 8002f52:	463a      	mov	r2, r7
 8002f54:	4628      	mov	r0, r5
 8002f56:	47b0      	blx	r6
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	dc06      	bgt.n	8002f6a <__sflush_r+0xfe>
 8002f5c:	89a3      	ldrh	r3, [r4, #12]
 8002f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f62:	81a3      	strh	r3, [r4, #12]
 8002f64:	f04f 30ff 	mov.w	r0, #4294967295
 8002f68:	e78e      	b.n	8002e88 <__sflush_r+0x1c>
 8002f6a:	4407      	add	r7, r0
 8002f6c:	eba8 0800 	sub.w	r8, r8, r0
 8002f70:	e7e9      	b.n	8002f46 <__sflush_r+0xda>
 8002f72:	bf00      	nop
 8002f74:	dfbffffe 	.word	0xdfbffffe

08002f78 <_fflush_r>:
 8002f78:	b538      	push	{r3, r4, r5, lr}
 8002f7a:	690b      	ldr	r3, [r1, #16]
 8002f7c:	4605      	mov	r5, r0
 8002f7e:	460c      	mov	r4, r1
 8002f80:	b913      	cbnz	r3, 8002f88 <_fflush_r+0x10>
 8002f82:	2500      	movs	r5, #0
 8002f84:	4628      	mov	r0, r5
 8002f86:	bd38      	pop	{r3, r4, r5, pc}
 8002f88:	b118      	cbz	r0, 8002f92 <_fflush_r+0x1a>
 8002f8a:	6a03      	ldr	r3, [r0, #32]
 8002f8c:	b90b      	cbnz	r3, 8002f92 <_fflush_r+0x1a>
 8002f8e:	f7ff f9ab 	bl	80022e8 <__sinit>
 8002f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f3      	beq.n	8002f82 <_fflush_r+0xa>
 8002f9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002f9c:	07d0      	lsls	r0, r2, #31
 8002f9e:	d404      	bmi.n	8002faa <_fflush_r+0x32>
 8002fa0:	0599      	lsls	r1, r3, #22
 8002fa2:	d402      	bmi.n	8002faa <_fflush_r+0x32>
 8002fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fa6:	f7ff fb93 	bl	80026d0 <__retarget_lock_acquire_recursive>
 8002faa:	4628      	mov	r0, r5
 8002fac:	4621      	mov	r1, r4
 8002fae:	f7ff ff5d 	bl	8002e6c <__sflush_r>
 8002fb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fb4:	07da      	lsls	r2, r3, #31
 8002fb6:	4605      	mov	r5, r0
 8002fb8:	d4e4      	bmi.n	8002f84 <_fflush_r+0xc>
 8002fba:	89a3      	ldrh	r3, [r4, #12]
 8002fbc:	059b      	lsls	r3, r3, #22
 8002fbe:	d4e1      	bmi.n	8002f84 <_fflush_r+0xc>
 8002fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fc2:	f7ff fb86 	bl	80026d2 <__retarget_lock_release_recursive>
 8002fc6:	e7dd      	b.n	8002f84 <_fflush_r+0xc>

08002fc8 <__swhatbuf_r>:
 8002fc8:	b570      	push	{r4, r5, r6, lr}
 8002fca:	460c      	mov	r4, r1
 8002fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fd0:	2900      	cmp	r1, #0
 8002fd2:	b096      	sub	sp, #88	; 0x58
 8002fd4:	4615      	mov	r5, r2
 8002fd6:	461e      	mov	r6, r3
 8002fd8:	da0d      	bge.n	8002ff6 <__swhatbuf_r+0x2e>
 8002fda:	89a3      	ldrh	r3, [r4, #12]
 8002fdc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002fe0:	f04f 0100 	mov.w	r1, #0
 8002fe4:	bf0c      	ite	eq
 8002fe6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002fea:	2340      	movne	r3, #64	; 0x40
 8002fec:	2000      	movs	r0, #0
 8002fee:	6031      	str	r1, [r6, #0]
 8002ff0:	602b      	str	r3, [r5, #0]
 8002ff2:	b016      	add	sp, #88	; 0x58
 8002ff4:	bd70      	pop	{r4, r5, r6, pc}
 8002ff6:	466a      	mov	r2, sp
 8002ff8:	f000 f848 	bl	800308c <_fstat_r>
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	dbec      	blt.n	8002fda <__swhatbuf_r+0x12>
 8003000:	9901      	ldr	r1, [sp, #4]
 8003002:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003006:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800300a:	4259      	negs	r1, r3
 800300c:	4159      	adcs	r1, r3
 800300e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003012:	e7eb      	b.n	8002fec <__swhatbuf_r+0x24>

08003014 <__smakebuf_r>:
 8003014:	898b      	ldrh	r3, [r1, #12]
 8003016:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003018:	079d      	lsls	r5, r3, #30
 800301a:	4606      	mov	r6, r0
 800301c:	460c      	mov	r4, r1
 800301e:	d507      	bpl.n	8003030 <__smakebuf_r+0x1c>
 8003020:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003024:	6023      	str	r3, [r4, #0]
 8003026:	6123      	str	r3, [r4, #16]
 8003028:	2301      	movs	r3, #1
 800302a:	6163      	str	r3, [r4, #20]
 800302c:	b002      	add	sp, #8
 800302e:	bd70      	pop	{r4, r5, r6, pc}
 8003030:	ab01      	add	r3, sp, #4
 8003032:	466a      	mov	r2, sp
 8003034:	f7ff ffc8 	bl	8002fc8 <__swhatbuf_r>
 8003038:	9900      	ldr	r1, [sp, #0]
 800303a:	4605      	mov	r5, r0
 800303c:	4630      	mov	r0, r6
 800303e:	f7ff fbb5 	bl	80027ac <_malloc_r>
 8003042:	b948      	cbnz	r0, 8003058 <__smakebuf_r+0x44>
 8003044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003048:	059a      	lsls	r2, r3, #22
 800304a:	d4ef      	bmi.n	800302c <__smakebuf_r+0x18>
 800304c:	f023 0303 	bic.w	r3, r3, #3
 8003050:	f043 0302 	orr.w	r3, r3, #2
 8003054:	81a3      	strh	r3, [r4, #12]
 8003056:	e7e3      	b.n	8003020 <__smakebuf_r+0xc>
 8003058:	89a3      	ldrh	r3, [r4, #12]
 800305a:	6020      	str	r0, [r4, #0]
 800305c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003060:	81a3      	strh	r3, [r4, #12]
 8003062:	9b00      	ldr	r3, [sp, #0]
 8003064:	6163      	str	r3, [r4, #20]
 8003066:	9b01      	ldr	r3, [sp, #4]
 8003068:	6120      	str	r0, [r4, #16]
 800306a:	b15b      	cbz	r3, 8003084 <__smakebuf_r+0x70>
 800306c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003070:	4630      	mov	r0, r6
 8003072:	f000 f81d 	bl	80030b0 <_isatty_r>
 8003076:	b128      	cbz	r0, 8003084 <__smakebuf_r+0x70>
 8003078:	89a3      	ldrh	r3, [r4, #12]
 800307a:	f023 0303 	bic.w	r3, r3, #3
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	81a3      	strh	r3, [r4, #12]
 8003084:	89a3      	ldrh	r3, [r4, #12]
 8003086:	431d      	orrs	r5, r3
 8003088:	81a5      	strh	r5, [r4, #12]
 800308a:	e7cf      	b.n	800302c <__smakebuf_r+0x18>

0800308c <_fstat_r>:
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	4d07      	ldr	r5, [pc, #28]	; (80030ac <_fstat_r+0x20>)
 8003090:	2300      	movs	r3, #0
 8003092:	4604      	mov	r4, r0
 8003094:	4608      	mov	r0, r1
 8003096:	4611      	mov	r1, r2
 8003098:	602b      	str	r3, [r5, #0]
 800309a:	f7fd fd5a 	bl	8000b52 <_fstat>
 800309e:	1c43      	adds	r3, r0, #1
 80030a0:	d102      	bne.n	80030a8 <_fstat_r+0x1c>
 80030a2:	682b      	ldr	r3, [r5, #0]
 80030a4:	b103      	cbz	r3, 80030a8 <_fstat_r+0x1c>
 80030a6:	6023      	str	r3, [r4, #0]
 80030a8:	bd38      	pop	{r3, r4, r5, pc}
 80030aa:	bf00      	nop
 80030ac:	2000020c 	.word	0x2000020c

080030b0 <_isatty_r>:
 80030b0:	b538      	push	{r3, r4, r5, lr}
 80030b2:	4d06      	ldr	r5, [pc, #24]	; (80030cc <_isatty_r+0x1c>)
 80030b4:	2300      	movs	r3, #0
 80030b6:	4604      	mov	r4, r0
 80030b8:	4608      	mov	r0, r1
 80030ba:	602b      	str	r3, [r5, #0]
 80030bc:	f7fd fd59 	bl	8000b72 <_isatty>
 80030c0:	1c43      	adds	r3, r0, #1
 80030c2:	d102      	bne.n	80030ca <_isatty_r+0x1a>
 80030c4:	682b      	ldr	r3, [r5, #0]
 80030c6:	b103      	cbz	r3, 80030ca <_isatty_r+0x1a>
 80030c8:	6023      	str	r3, [r4, #0]
 80030ca:	bd38      	pop	{r3, r4, r5, pc}
 80030cc:	2000020c 	.word	0x2000020c

080030d0 <_sbrk_r>:
 80030d0:	b538      	push	{r3, r4, r5, lr}
 80030d2:	4d06      	ldr	r5, [pc, #24]	; (80030ec <_sbrk_r+0x1c>)
 80030d4:	2300      	movs	r3, #0
 80030d6:	4604      	mov	r4, r0
 80030d8:	4608      	mov	r0, r1
 80030da:	602b      	str	r3, [r5, #0]
 80030dc:	f7fd fd62 	bl	8000ba4 <_sbrk>
 80030e0:	1c43      	adds	r3, r0, #1
 80030e2:	d102      	bne.n	80030ea <_sbrk_r+0x1a>
 80030e4:	682b      	ldr	r3, [r5, #0]
 80030e6:	b103      	cbz	r3, 80030ea <_sbrk_r+0x1a>
 80030e8:	6023      	str	r3, [r4, #0]
 80030ea:	bd38      	pop	{r3, r4, r5, pc}
 80030ec:	2000020c 	.word	0x2000020c

080030f0 <_init>:
 80030f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f2:	bf00      	nop
 80030f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f6:	bc08      	pop	{r3}
 80030f8:	469e      	mov	lr, r3
 80030fa:	4770      	bx	lr

080030fc <_fini>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	bf00      	nop
 8003100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003102:	bc08      	pop	{r3}
 8003104:	469e      	mov	lr, r3
 8003106:	4770      	bx	lr
