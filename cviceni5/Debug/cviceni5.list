
cviceni5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000382c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080038ec  080038ec  000138ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a30  08003a30  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003a30  08003a30  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a30  08003a30  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a30  08003a30  00013a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a34  08003a34  00013a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000068  08003aa0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08003aa0  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007fef  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001785  00000000  00000000  000280c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f8  00000000  00000000  00029848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000551  00000000  00000000  00029f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001048d  00000000  00000000  0002a491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000963d  00000000  00000000  0003a91e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005e85d  00000000  00000000  00043f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002174  00000000  00000000  000a27b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000a492c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080038d4 	.word	0x080038d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080038d4 	.word	0x080038d4

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <uart_byte_available>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
static void uart_byte_available(uint8_t c) {
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	0002      	movs	r2, r0
 8000250:	1dfb      	adds	r3, r7, #7
 8000252:	701a      	strb	r2, [r3, #0]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 126)
 8000254:	4b21      	ldr	r3, [pc, #132]	; (80002dc <uart_byte_available+0x94>)
 8000256:	881b      	ldrh	r3, [r3, #0]
 8000258:	2bff      	cmp	r3, #255	; 0xff
 800025a:	d812      	bhi.n	8000282 <uart_byte_available+0x3a>
 800025c:	1dfb      	adds	r3, r7, #7
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b1f      	cmp	r3, #31
 8000262:	d90e      	bls.n	8000282 <uart_byte_available+0x3a>
 8000264:	1dfb      	adds	r3, r7, #7
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b7e      	cmp	r3, #126	; 0x7e
 800026a:	d80a      	bhi.n	8000282 <uart_byte_available+0x3a>
		data[cnt++] = c;
 800026c:	4b1b      	ldr	r3, [pc, #108]	; (80002dc <uart_byte_available+0x94>)
 800026e:	881b      	ldrh	r3, [r3, #0]
 8000270:	1c5a      	adds	r2, r3, #1
 8000272:	b291      	uxth	r1, r2
 8000274:	4a19      	ldr	r2, [pc, #100]	; (80002dc <uart_byte_available+0x94>)
 8000276:	8011      	strh	r1, [r2, #0]
 8000278:	0019      	movs	r1, r3
 800027a:	4b19      	ldr	r3, [pc, #100]	; (80002e0 <uart_byte_available+0x98>)
 800027c:	1dfa      	adds	r2, r7, #7
 800027e:	7812      	ldrb	r2, [r2, #0]
 8000280:	545a      	strb	r2, [r3, r1]
	if ((c == '\n' || c == '\r') && cnt > 0) {
 8000282:	1dfb      	adds	r3, r7, #7
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b0a      	cmp	r3, #10
 8000288:	d003      	beq.n	8000292 <uart_byte_available+0x4a>
 800028a:	1dfb      	adds	r3, r7, #7
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b0d      	cmp	r3, #13
 8000290:	d120      	bne.n	80002d4 <uart_byte_available+0x8c>
 8000292:	4b12      	ldr	r3, [pc, #72]	; (80002dc <uart_byte_available+0x94>)
 8000294:	881b      	ldrh	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d01c      	beq.n	80002d4 <uart_byte_available+0x8c>
		data[cnt] = '\0';
 800029a:	4b10      	ldr	r3, [pc, #64]	; (80002dc <uart_byte_available+0x94>)
 800029c:	881b      	ldrh	r3, [r3, #0]
 800029e:	001a      	movs	r2, r3
 80002a0:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <uart_byte_available+0x98>)
 80002a2:	2100      	movs	r1, #0
 80002a4:	5499      	strb	r1, [r3, r2]
		/*uart_process_command(data);*/
		char *token;
		token = strtok(data, " ");
 80002a6:	4a0f      	ldr	r2, [pc, #60]	; (80002e4 <uart_byte_available+0x9c>)
 80002a8:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <uart_byte_available+0x98>)
 80002aa:	0011      	movs	r1, r2
 80002ac:	0018      	movs	r0, r3
 80002ae:	f002 fc8b 	bl	8002bc8 <strtok>
 80002b2:	0003      	movs	r3, r0
 80002b4:	60fb      	str	r3, [r7, #12]
		if (strcmp(token, "HELLO") == 0) {
 80002b6:	4a0c      	ldr	r2, [pc, #48]	; (80002e8 <uart_byte_available+0xa0>)
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	0011      	movs	r1, r2
 80002bc:	0018      	movs	r0, r3
 80002be:	f7ff ff23 	bl	8000108 <strcmp>
 80002c2:	1e03      	subs	r3, r0, #0
 80002c4:	d103      	bne.n	80002ce <uart_byte_available+0x86>
			printf("Komunikace OK\n");
 80002c6:	4b09      	ldr	r3, [pc, #36]	; (80002ec <uart_byte_available+0xa4>)
 80002c8:	0018      	movs	r0, r3
 80002ca:	f002 fb79 	bl	80029c0 <puts>
		}
		cnt = 0;
 80002ce:	4b03      	ldr	r3, [pc, #12]	; (80002dc <uart_byte_available+0x94>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	801a      	strh	r2, [r3, #0]
	}
}
 80002d4:	46c0      	nop			; (mov r8, r8)
 80002d6:	46bd      	mov	sp, r7
 80002d8:	b004      	add	sp, #16
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000190 	.word	0x20000190
 80002e0:	20000194 	.word	0x20000194
 80002e4:	080038ec 	.word	0x080038ec
 80002e8:	080038f0 	.word	0x080038f0
 80002ec:	080038f8 	.word	0x080038f8

080002f0 <_write>:
void uart_process_command(char* cmd) {
	printf("prijato: '%s'\n", cmd);
}

int _write(int file, char const *buf, int n)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	60f8      	str	r0, [r7, #12]
 80002f8:	60b9      	str	r1, [r7, #8]
 80002fa:	607a      	str	r2, [r7, #4]
 /* stdout redirection to UART2 */
	HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	b29a      	uxth	r2, r3
 8000300:	2301      	movs	r3, #1
 8000302:	425b      	negs	r3, r3
 8000304:	68b9      	ldr	r1, [r7, #8]
 8000306:	4804      	ldr	r0, [pc, #16]	; (8000318 <_write+0x28>)
 8000308:	f001 fc0a 	bl	8001b20 <HAL_UART_Transmit>
	return n;
 800030c:	687b      	ldr	r3, [r7, #4]
}
 800030e:	0018      	movs	r0, r3
 8000310:	46bd      	mov	sp, r7
 8000312:	b004      	add	sp, #16
 8000314:	bd80      	pop	{r7, pc}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	200000c8 	.word	0x200000c8

0800031c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000322:	f000 fad5 	bl	80008d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000326:	f000 f83b 	bl	80003a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800032a:	f000 f8d1 	bl	80004d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800032e:	f000 f8b1 	bl	8000494 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000332:	f000 f87f 	bl	8000434 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 8000336:	4916      	ldr	r1, [pc, #88]	; (8000390 <main+0x74>)
 8000338:	4b16      	ldr	r3, [pc, #88]	; (8000394 <main+0x78>)
 800033a:	2240      	movs	r2, #64	; 0x40
 800033c:	0018      	movs	r0, r3
 800033e:	f001 fc98 	bl	8001c72 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	while (uart_rx_read_ptr != uart_rx_write_ptr) {
 8000342:	e019      	b.n	8000378 <main+0x5c>
	   uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 8000344:	4b14      	ldr	r3, [pc, #80]	; (8000398 <main+0x7c>)
 8000346:	881b      	ldrh	r3, [r3, #0]
 8000348:	b29b      	uxth	r3, r3
 800034a:	0019      	movs	r1, r3
 800034c:	1dfb      	adds	r3, r7, #7
 800034e:	4a10      	ldr	r2, [pc, #64]	; (8000390 <main+0x74>)
 8000350:	5c52      	ldrb	r2, [r2, r1]
 8000352:	701a      	strb	r2, [r3, #0]
	   if (++uart_rx_read_ptr >= RX_BUFFER_LEN) uart_rx_read_ptr = 0; // increase read pointer
 8000354:	4b10      	ldr	r3, [pc, #64]	; (8000398 <main+0x7c>)
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	b29b      	uxth	r3, r3
 800035a:	3301      	adds	r3, #1
 800035c:	b29b      	uxth	r3, r3
 800035e:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <main+0x7c>)
 8000360:	1c19      	adds	r1, r3, #0
 8000362:	8011      	strh	r1, [r2, #0]
 8000364:	2b3f      	cmp	r3, #63	; 0x3f
 8000366:	d902      	bls.n	800036e <main+0x52>
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <main+0x7c>)
 800036a:	2200      	movs	r2, #0
 800036c:	801a      	strh	r2, [r3, #0]
	   uart_byte_available(b);// process every received byte with the RX state machine
 800036e:	1dfb      	adds	r3, r7, #7
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	0018      	movs	r0, r3
 8000374:	f7ff ff68 	bl	8000248 <uart_byte_available>
	while (uart_rx_read_ptr != uart_rx_write_ptr) {
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <main+0x7c>)
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	b29b      	uxth	r3, r3
 800037e:	0019      	movs	r1, r3
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <main+0x80>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	2240      	movs	r2, #64	; 0x40
 8000388:	1ad3      	subs	r3, r2, r3
 800038a:	4299      	cmp	r1, r3
 800038c:	d1da      	bne.n	8000344 <main+0x28>
 800038e:	e7f3      	b.n	8000378 <main+0x5c>
 8000390:	20000084 	.word	0x20000084
 8000394:	200000c8 	.word	0x200000c8
 8000398:	200000c4 	.word	0x200000c4
 800039c:	2000014c 	.word	0x2000014c

080003a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a0:	b590      	push	{r4, r7, lr}
 80003a2:	b091      	sub	sp, #68	; 0x44
 80003a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a6:	2410      	movs	r4, #16
 80003a8:	193b      	adds	r3, r7, r4
 80003aa:	0018      	movs	r0, r3
 80003ac:	2330      	movs	r3, #48	; 0x30
 80003ae:	001a      	movs	r2, r3
 80003b0:	2100      	movs	r1, #0
 80003b2:	f002 fc01 	bl	8002bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b6:	003b      	movs	r3, r7
 80003b8:	0018      	movs	r0, r3
 80003ba:	2310      	movs	r3, #16
 80003bc:	001a      	movs	r2, r3
 80003be:	2100      	movs	r1, #0
 80003c0:	f002 fbfa 	bl	8002bb8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c4:	0021      	movs	r1, r4
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	2202      	movs	r2, #2
 80003ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	2201      	movs	r2, #1
 80003d0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	2210      	movs	r2, #16
 80003d6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	2202      	movs	r2, #2
 80003dc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	2200      	movs	r2, #0
 80003e2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	22a0      	movs	r2, #160	; 0xa0
 80003e8:	0392      	lsls	r2, r2, #14
 80003ea:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	2200      	movs	r2, #0
 80003f0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f2:	187b      	adds	r3, r7, r1
 80003f4:	0018      	movs	r0, r3
 80003f6:	f000 fed3 	bl	80011a0 <HAL_RCC_OscConfig>
 80003fa:	1e03      	subs	r3, r0, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80003fe:	f000 f8d1 	bl	80005a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000402:	003b      	movs	r3, r7
 8000404:	2207      	movs	r2, #7
 8000406:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000408:	003b      	movs	r3, r7
 800040a:	2202      	movs	r2, #2
 800040c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040e:	003b      	movs	r3, r7
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000414:	003b      	movs	r3, r7
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800041a:	003b      	movs	r3, r7
 800041c:	2101      	movs	r1, #1
 800041e:	0018      	movs	r0, r3
 8000420:	f001 f9d8 	bl	80017d4 <HAL_RCC_ClockConfig>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000428:	f000 f8bc 	bl	80005a4 <Error_Handler>
  }
}
 800042c:	46c0      	nop			; (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	b011      	add	sp, #68	; 0x44
 8000432:	bd90      	pop	{r4, r7, pc}

08000434 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <MX_USART2_UART_Init+0x58>)
 800043a:	4a15      	ldr	r2, [pc, #84]	; (8000490 <MX_USART2_UART_Init+0x5c>)
 800043c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800043e:	4b13      	ldr	r3, [pc, #76]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000440:	2296      	movs	r2, #150	; 0x96
 8000442:	0212      	lsls	r2, r2, #8
 8000444:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000446:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_USART2_UART_Init+0x58>)
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_USART2_UART_Init+0x58>)
 800045a:	220c      	movs	r2, #12
 800045c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <MX_USART2_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000472:	2200      	movs	r2, #0
 8000474:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000476:	4b05      	ldr	r3, [pc, #20]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000478:	0018      	movs	r0, r3
 800047a:	f001 fafd 	bl	8001a78 <HAL_UART_Init>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d001      	beq.n	8000486 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000482:	f000 f88f 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	200000c8 	.word	0x200000c8
 8000490:	40004400 	.word	0x40004400

08000494 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_DMA_Init+0x38>)
 800049c:	695a      	ldr	r2, [r3, #20]
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_DMA_Init+0x38>)
 80004a0:	2101      	movs	r1, #1
 80004a2:	430a      	orrs	r2, r1
 80004a4:	615a      	str	r2, [r3, #20]
 80004a6:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_DMA_Init+0x38>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	2201      	movs	r2, #1
 80004ac:	4013      	ands	r3, r2
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80004b2:	2200      	movs	r2, #0
 80004b4:	2100      	movs	r1, #0
 80004b6:	200b      	movs	r0, #11
 80004b8:	f000 fb1a 	bl	8000af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80004bc:	200b      	movs	r0, #11
 80004be:	f000 fb2c 	bl	8000b1a <HAL_NVIC_EnableIRQ>

}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b002      	add	sp, #8
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	40021000 	.word	0x40021000

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b089      	sub	sp, #36	; 0x24
 80004d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	240c      	movs	r4, #12
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	0018      	movs	r0, r3
 80004dc:	2314      	movs	r3, #20
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f002 fb69 	bl	8002bb8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	4b2d      	ldr	r3, [pc, #180]	; (800059c <MX_GPIO_Init+0xcc>)
 80004e8:	695a      	ldr	r2, [r3, #20]
 80004ea:	4b2c      	ldr	r3, [pc, #176]	; (800059c <MX_GPIO_Init+0xcc>)
 80004ec:	2180      	movs	r1, #128	; 0x80
 80004ee:	0309      	lsls	r1, r1, #12
 80004f0:	430a      	orrs	r2, r1
 80004f2:	615a      	str	r2, [r3, #20]
 80004f4:	4b29      	ldr	r3, [pc, #164]	; (800059c <MX_GPIO_Init+0xcc>)
 80004f6:	695a      	ldr	r2, [r3, #20]
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	031b      	lsls	r3, r3, #12
 80004fc:	4013      	ands	r3, r2
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000502:	4b26      	ldr	r3, [pc, #152]	; (800059c <MX_GPIO_Init+0xcc>)
 8000504:	695a      	ldr	r2, [r3, #20]
 8000506:	4b25      	ldr	r3, [pc, #148]	; (800059c <MX_GPIO_Init+0xcc>)
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	03c9      	lsls	r1, r1, #15
 800050c:	430a      	orrs	r2, r1
 800050e:	615a      	str	r2, [r3, #20]
 8000510:	4b22      	ldr	r3, [pc, #136]	; (800059c <MX_GPIO_Init+0xcc>)
 8000512:	695a      	ldr	r2, [r3, #20]
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	03db      	lsls	r3, r3, #15
 8000518:	4013      	ands	r3, r2
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b1f      	ldr	r3, [pc, #124]	; (800059c <MX_GPIO_Init+0xcc>)
 8000520:	695a      	ldr	r2, [r3, #20]
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_GPIO_Init+0xcc>)
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	0289      	lsls	r1, r1, #10
 8000528:	430a      	orrs	r2, r1
 800052a:	615a      	str	r2, [r3, #20]
 800052c:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_GPIO_Init+0xcc>)
 800052e:	695a      	ldr	r2, [r3, #20]
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	029b      	lsls	r3, r3, #10
 8000534:	4013      	ands	r3, r2
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800053a:	2390      	movs	r3, #144	; 0x90
 800053c:	05db      	lsls	r3, r3, #23
 800053e:	2200      	movs	r2, #0
 8000540:	2120      	movs	r1, #32
 8000542:	0018      	movs	r0, r3
 8000544:	f000 fe0e 	bl	8001164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000548:	193b      	adds	r3, r7, r4
 800054a:	2280      	movs	r2, #128	; 0x80
 800054c:	0192      	lsls	r2, r2, #6
 800054e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000550:	193b      	adds	r3, r7, r4
 8000552:	2284      	movs	r2, #132	; 0x84
 8000554:	0392      	lsls	r2, r2, #14
 8000556:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	193b      	adds	r3, r7, r4
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800055e:	193b      	adds	r3, r7, r4
 8000560:	4a0f      	ldr	r2, [pc, #60]	; (80005a0 <MX_GPIO_Init+0xd0>)
 8000562:	0019      	movs	r1, r3
 8000564:	0010      	movs	r0, r2
 8000566:	f000 fc8d 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800056a:	0021      	movs	r1, r4
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2220      	movs	r2, #32
 8000570:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2201      	movs	r2, #1
 8000576:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000584:	187a      	adds	r2, r7, r1
 8000586:	2390      	movs	r3, #144	; 0x90
 8000588:	05db      	lsls	r3, r3, #23
 800058a:	0011      	movs	r1, r2
 800058c:	0018      	movs	r0, r3
 800058e:	f000 fc79 	bl	8000e84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b009      	add	sp, #36	; 0x24
 8000598:	bd90      	pop	{r4, r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	40021000 	.word	0x40021000
 80005a0:	48000800 	.word	0x48000800

080005a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a8:	b672      	cpsid	i
}
 80005aa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ac:	e7fe      	b.n	80005ac <Error_Handler+0x8>
	...

080005b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <HAL_MspInit+0x44>)
 80005b8:	699a      	ldr	r2, [r3, #24]
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <HAL_MspInit+0x44>)
 80005bc:	2101      	movs	r1, #1
 80005be:	430a      	orrs	r2, r1
 80005c0:	619a      	str	r2, [r3, #24]
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <HAL_MspInit+0x44>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	2201      	movs	r2, #1
 80005c8:	4013      	ands	r3, r2
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <HAL_MspInit+0x44>)
 80005d0:	69da      	ldr	r2, [r3, #28]
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <HAL_MspInit+0x44>)
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	0549      	lsls	r1, r1, #21
 80005d8:	430a      	orrs	r2, r1
 80005da:	61da      	str	r2, [r3, #28]
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <HAL_MspInit+0x44>)
 80005de:	69da      	ldr	r2, [r3, #28]
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	055b      	lsls	r3, r3, #21
 80005e4:	4013      	ands	r3, r2
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b002      	add	sp, #8
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b08b      	sub	sp, #44	; 0x2c
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	2414      	movs	r4, #20
 8000602:	193b      	adds	r3, r7, r4
 8000604:	0018      	movs	r0, r3
 8000606:	2314      	movs	r3, #20
 8000608:	001a      	movs	r2, r3
 800060a:	2100      	movs	r1, #0
 800060c:	f002 fad4 	bl	8002bb8 <memset>
  if(huart->Instance==USART2)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a2f      	ldr	r2, [pc, #188]	; (80006d4 <HAL_UART_MspInit+0xdc>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d158      	bne.n	80006cc <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800061a:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <HAL_UART_MspInit+0xe0>)
 800061c:	69da      	ldr	r2, [r3, #28]
 800061e:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <HAL_UART_MspInit+0xe0>)
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	0289      	lsls	r1, r1, #10
 8000624:	430a      	orrs	r2, r1
 8000626:	61da      	str	r2, [r3, #28]
 8000628:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <HAL_UART_MspInit+0xe0>)
 800062a:	69da      	ldr	r2, [r3, #28]
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	029b      	lsls	r3, r3, #10
 8000630:	4013      	ands	r3, r2
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <HAL_UART_MspInit+0xe0>)
 8000638:	695a      	ldr	r2, [r3, #20]
 800063a:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <HAL_UART_MspInit+0xe0>)
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	0289      	lsls	r1, r1, #10
 8000640:	430a      	orrs	r2, r1
 8000642:	615a      	str	r2, [r3, #20]
 8000644:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <HAL_UART_MspInit+0xe0>)
 8000646:	695a      	ldr	r2, [r3, #20]
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	029b      	lsls	r3, r3, #10
 800064c:	4013      	ands	r3, r2
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000652:	0021      	movs	r1, r4
 8000654:	187b      	adds	r3, r7, r1
 8000656:	220c      	movs	r2, #12
 8000658:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2202      	movs	r2, #2
 800065e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2201      	movs	r2, #1
 8000670:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000672:	187a      	adds	r2, r7, r1
 8000674:	2390      	movs	r3, #144	; 0x90
 8000676:	05db      	lsls	r3, r3, #23
 8000678:	0011      	movs	r1, r2
 800067a:	0018      	movs	r0, r3
 800067c:	f000 fc02 	bl	8000e84 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <HAL_UART_MspInit+0xe4>)
 8000682:	4a17      	ldr	r2, [pc, #92]	; (80006e0 <HAL_UART_MspInit+0xe8>)
 8000684:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_UART_MspInit+0xe4>)
 8000688:	2200      	movs	r2, #0
 800068a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800068c:	4b13      	ldr	r3, [pc, #76]	; (80006dc <HAL_UART_MspInit+0xe4>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_UART_MspInit+0xe4>)
 8000694:	2280      	movs	r2, #128	; 0x80
 8000696:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000698:	4b10      	ldr	r3, [pc, #64]	; (80006dc <HAL_UART_MspInit+0xe4>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <HAL_UART_MspInit+0xe4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80006a4:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <HAL_UART_MspInit+0xe4>)
 80006a6:	2220      	movs	r2, #32
 80006a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <HAL_UART_MspInit+0xe4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <HAL_UART_MspInit+0xe4>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 fa4e 	bl	8000b54 <HAL_DMA_Init>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80006bc:	f7ff ff72 	bl	80005a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a06      	ldr	r2, [pc, #24]	; (80006dc <HAL_UART_MspInit+0xe4>)
 80006c4:	671a      	str	r2, [r3, #112]	; 0x70
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <HAL_UART_MspInit+0xe4>)
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b00b      	add	sp, #44	; 0x2c
 80006d2:	bd90      	pop	{r4, r7, pc}
 80006d4:	40004400 	.word	0x40004400
 80006d8:	40021000 	.word	0x40021000
 80006dc:	2000014c 	.word	0x2000014c
 80006e0:	40020058 	.word	0x40020058

080006e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <NMI_Handler+0x4>

080006ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <HardFault_Handler+0x4>

080006f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000708:	f000 f92a 	bl	8000960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <DMA1_Channel4_5_IRQHandler+0x14>)
 800071a:	0018      	movs	r0, r3
 800071c:	f000 fac8 	bl	8000cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	2000014c 	.word	0x2000014c

0800072c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  return 1;
 8000730:	2301      	movs	r3, #1
}
 8000732:	0018      	movs	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <_kill>:

int _kill(int pid, int sig)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000742:	f002 faf3 	bl	8002d2c <__errno>
 8000746:	0003      	movs	r3, r0
 8000748:	2216      	movs	r2, #22
 800074a:	601a      	str	r2, [r3, #0]
  return -1;
 800074c:	2301      	movs	r3, #1
 800074e:	425b      	negs	r3, r3
}
 8000750:	0018      	movs	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	b002      	add	sp, #8
 8000756:	bd80      	pop	{r7, pc}

08000758 <_exit>:

void _exit (int status)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000760:	2301      	movs	r3, #1
 8000762:	425a      	negs	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	0011      	movs	r1, r2
 8000768:	0018      	movs	r0, r3
 800076a:	f7ff ffe5 	bl	8000738 <_kill>
  while (1) {}    /* Make sure we hang here */
 800076e:	e7fe      	b.n	800076e <_exit+0x16>

08000770 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	e00a      	b.n	8000798 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000782:	e000      	b.n	8000786 <_read+0x16>
 8000784:	bf00      	nop
 8000786:	0001      	movs	r1, r0
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	1c5a      	adds	r2, r3, #1
 800078c:	60ba      	str	r2, [r7, #8]
 800078e:	b2ca      	uxtb	r2, r1
 8000790:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	3301      	adds	r3, #1
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	697a      	ldr	r2, [r7, #20]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	429a      	cmp	r2, r3
 800079e:	dbf0      	blt.n	8000782 <_read+0x12>
  }

  return len;
 80007a0:	687b      	ldr	r3, [r7, #4]
}
 80007a2:	0018      	movs	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b006      	add	sp, #24
 80007a8:	bd80      	pop	{r7, pc}

080007aa <_close>:
  }
  return len;
}

int _close(int file)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	425b      	negs	r3, r3
}
 80007b6:	0018      	movs	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b002      	add	sp, #8
 80007bc:	bd80      	pop	{r7, pc}

080007be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	0192      	lsls	r2, r2, #6
 80007ce:	605a      	str	r2, [r3, #4]
  return 0;
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	0018      	movs	r0, r3
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b002      	add	sp, #8
 80007d8:	bd80      	pop	{r7, pc}

080007da <_isatty>:

int _isatty(int file)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007e2:	2301      	movs	r3, #1
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b002      	add	sp, #8
 80007ea:	bd80      	pop	{r7, pc}

080007ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	0018      	movs	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b004      	add	sp, #16
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800080c:	4a14      	ldr	r2, [pc, #80]	; (8000860 <_sbrk+0x5c>)
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <_sbrk+0x60>)
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <_sbrk+0x64>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d102      	bne.n	8000826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <_sbrk+0x64>)
 8000822:	4a12      	ldr	r2, [pc, #72]	; (800086c <_sbrk+0x68>)
 8000824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <_sbrk+0x64>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	18d3      	adds	r3, r2, r3
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	429a      	cmp	r2, r3
 8000832:	d207      	bcs.n	8000844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000834:	f002 fa7a 	bl	8002d2c <__errno>
 8000838:	0003      	movs	r3, r0
 800083a:	220c      	movs	r2, #12
 800083c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800083e:	2301      	movs	r3, #1
 8000840:	425b      	negs	r3, r3
 8000842:	e009      	b.n	8000858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <_sbrk+0x64>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <_sbrk+0x64>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	18d2      	adds	r2, r2, r3
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <_sbrk+0x64>)
 8000854:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000856:	68fb      	ldr	r3, [r7, #12]
}
 8000858:	0018      	movs	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	b006      	add	sp, #24
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20002000 	.word	0x20002000
 8000864:	00000400 	.word	0x00000400
 8000868:	20000294 	.word	0x20000294
 800086c:	200003e8 	.word	0x200003e8

08000870 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800087c:	480d      	ldr	r0, [pc, #52]	; (80008b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800087e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000882:	490e      	ldr	r1, [pc, #56]	; (80008bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000884:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <LoopForever+0xe>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000898:	4c0b      	ldr	r4, [pc, #44]	; (80008c8 <LoopForever+0x16>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008a6:	f7ff ffe3 	bl	8000870 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80008aa:	f002 fa45 	bl	8002d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ae:	f7ff fd35 	bl	800031c <main>

080008b2 <LoopForever>:

LoopForever:
    b LoopForever
 80008b2:	e7fe      	b.n	80008b2 <LoopForever>
  ldr   r0, =_estack
 80008b4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008bc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80008c0:	08003a38 	.word	0x08003a38
  ldr r2, =_sbss
 80008c4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008c8:	200003e8 	.word	0x200003e8

080008cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC1_IRQHandler>
	...

080008d0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <HAL_Init+0x24>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_Init+0x24>)
 80008da:	2110      	movs	r1, #16
 80008dc:	430a      	orrs	r2, r1
 80008de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f000 f809 	bl	80008f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e6:	f7ff fe63 	bl	80005b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ea:	2300      	movs	r3, #0
}
 80008ec:	0018      	movs	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	40022000 	.word	0x40022000

080008f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <HAL_InitTick+0x5c>)
 8000902:	681c      	ldr	r4, [r3, #0]
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <HAL_InitTick+0x60>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	0019      	movs	r1, r3
 800090a:	23fa      	movs	r3, #250	; 0xfa
 800090c:	0098      	lsls	r0, r3, #2
 800090e:	f7ff fc0f 	bl	8000130 <__udivsi3>
 8000912:	0003      	movs	r3, r0
 8000914:	0019      	movs	r1, r3
 8000916:	0020      	movs	r0, r4
 8000918:	f7ff fc0a 	bl	8000130 <__udivsi3>
 800091c:	0003      	movs	r3, r0
 800091e:	0018      	movs	r0, r3
 8000920:	f000 f90b 	bl	8000b3a <HAL_SYSTICK_Config>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000928:	2301      	movs	r3, #1
 800092a:	e00f      	b.n	800094c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b03      	cmp	r3, #3
 8000930:	d80b      	bhi.n	800094a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	2301      	movs	r3, #1
 8000936:	425b      	negs	r3, r3
 8000938:	2200      	movs	r2, #0
 800093a:	0018      	movs	r0, r3
 800093c:	f000 f8d8 	bl	8000af0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_InitTick+0x64>)
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000946:	2300      	movs	r3, #0
 8000948:	e000      	b.n	800094c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
}
 800094c:	0018      	movs	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	b003      	add	sp, #12
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	20000000 	.word	0x20000000
 8000958:	20000008 	.word	0x20000008
 800095c:	20000004 	.word	0x20000004

08000960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_IncTick+0x1c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	001a      	movs	r2, r3
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_IncTick+0x20>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	18d2      	adds	r2, r2, r3
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <HAL_IncTick+0x20>)
 8000972:	601a      	str	r2, [r3, #0]
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	20000008 	.word	0x20000008
 8000980:	20000298 	.word	0x20000298

08000984 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;
 8000988:	4b02      	ldr	r3, [pc, #8]	; (8000994 <HAL_GetTick+0x10>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	0018      	movs	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	20000298 	.word	0x20000298

08000998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	0002      	movs	r2, r0
 80009a0:	1dfb      	adds	r3, r7, #7
 80009a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b7f      	cmp	r3, #127	; 0x7f
 80009aa:	d809      	bhi.n	80009c0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ac:	1dfb      	adds	r3, r7, #7
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	001a      	movs	r2, r3
 80009b2:	231f      	movs	r3, #31
 80009b4:	401a      	ands	r2, r3
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <__NVIC_EnableIRQ+0x30>)
 80009b8:	2101      	movs	r1, #1
 80009ba:	4091      	lsls	r1, r2
 80009bc:	000a      	movs	r2, r1
 80009be:	601a      	str	r2, [r3, #0]
  }
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b002      	add	sp, #8
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	e000e100 	.word	0xe000e100

080009cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	0002      	movs	r2, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b7f      	cmp	r3, #127	; 0x7f
 80009e0:	d828      	bhi.n	8000a34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e2:	4a2f      	ldr	r2, [pc, #188]	; (8000aa0 <__NVIC_SetPriority+0xd4>)
 80009e4:	1dfb      	adds	r3, r7, #7
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	089b      	lsrs	r3, r3, #2
 80009ec:	33c0      	adds	r3, #192	; 0xc0
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	589b      	ldr	r3, [r3, r2]
 80009f2:	1dfa      	adds	r2, r7, #7
 80009f4:	7812      	ldrb	r2, [r2, #0]
 80009f6:	0011      	movs	r1, r2
 80009f8:	2203      	movs	r2, #3
 80009fa:	400a      	ands	r2, r1
 80009fc:	00d2      	lsls	r2, r2, #3
 80009fe:	21ff      	movs	r1, #255	; 0xff
 8000a00:	4091      	lsls	r1, r2
 8000a02:	000a      	movs	r2, r1
 8000a04:	43d2      	mvns	r2, r2
 8000a06:	401a      	ands	r2, r3
 8000a08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	019b      	lsls	r3, r3, #6
 8000a0e:	22ff      	movs	r2, #255	; 0xff
 8000a10:	401a      	ands	r2, r3
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	0018      	movs	r0, r3
 8000a18:	2303      	movs	r3, #3
 8000a1a:	4003      	ands	r3, r0
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a20:	481f      	ldr	r0, [pc, #124]	; (8000aa0 <__NVIC_SetPriority+0xd4>)
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	b25b      	sxtb	r3, r3
 8000a28:	089b      	lsrs	r3, r3, #2
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	33c0      	adds	r3, #192	; 0xc0
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a32:	e031      	b.n	8000a98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a34:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <__NVIC_SetPriority+0xd8>)
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	400b      	ands	r3, r1
 8000a40:	3b08      	subs	r3, #8
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	3306      	adds	r3, #6
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	18d3      	adds	r3, r2, r3
 8000a4a:	3304      	adds	r3, #4
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	1dfa      	adds	r2, r7, #7
 8000a50:	7812      	ldrb	r2, [r2, #0]
 8000a52:	0011      	movs	r1, r2
 8000a54:	2203      	movs	r2, #3
 8000a56:	400a      	ands	r2, r1
 8000a58:	00d2      	lsls	r2, r2, #3
 8000a5a:	21ff      	movs	r1, #255	; 0xff
 8000a5c:	4091      	lsls	r1, r2
 8000a5e:	000a      	movs	r2, r1
 8000a60:	43d2      	mvns	r2, r2
 8000a62:	401a      	ands	r2, r3
 8000a64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	019b      	lsls	r3, r3, #6
 8000a6a:	22ff      	movs	r2, #255	; 0xff
 8000a6c:	401a      	ands	r2, r3
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	0018      	movs	r0, r3
 8000a74:	2303      	movs	r3, #3
 8000a76:	4003      	ands	r3, r0
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a7c:	4809      	ldr	r0, [pc, #36]	; (8000aa4 <__NVIC_SetPriority+0xd8>)
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	001c      	movs	r4, r3
 8000a84:	230f      	movs	r3, #15
 8000a86:	4023      	ands	r3, r4
 8000a88:	3b08      	subs	r3, #8
 8000a8a:	089b      	lsrs	r3, r3, #2
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	3306      	adds	r3, #6
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	18c3      	adds	r3, r0, r3
 8000a94:	3304      	adds	r3, #4
 8000a96:	601a      	str	r2, [r3, #0]
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b003      	add	sp, #12
 8000a9e:	bd90      	pop	{r4, r7, pc}
 8000aa0:	e000e100 	.word	0xe000e100
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	1e5a      	subs	r2, r3, #1
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	045b      	lsls	r3, r3, #17
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d301      	bcc.n	8000ac0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000abc:	2301      	movs	r3, #1
 8000abe:	e010      	b.n	8000ae2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <SysTick_Config+0x44>)
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	3a01      	subs	r2, #1
 8000ac6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac8:	2301      	movs	r3, #1
 8000aca:	425b      	negs	r3, r3
 8000acc:	2103      	movs	r1, #3
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f7ff ff7c 	bl	80009cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <SysTick_Config+0x44>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ada:	4b04      	ldr	r3, [pc, #16]	; (8000aec <SysTick_Config+0x44>)
 8000adc:	2207      	movs	r2, #7
 8000ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b002      	add	sp, #8
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	e000e010 	.word	0xe000e010

08000af0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
 8000afa:	210f      	movs	r1, #15
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	1c02      	adds	r2, r0, #0
 8000b00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f7ff ff5d 	bl	80009cc <__NVIC_SetPriority>
}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b004      	add	sp, #16
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	0002      	movs	r2, r0
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f7ff ff33 	bl	8000998 <__NVIC_EnableIRQ>
}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b002      	add	sp, #8
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	0018      	movs	r0, r3
 8000b46:	f7ff ffaf 	bl	8000aa8 <SysTick_Config>
 8000b4a:	0003      	movs	r3, r0
}
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b002      	add	sp, #8
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d101      	bne.n	8000b6a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e036      	b.n	8000bd8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2221      	movs	r2, #33	; 0x21
 8000b6e:	2102      	movs	r1, #2
 8000b70:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4a18      	ldr	r2, [pc, #96]	; (8000be0 <HAL_DMA_Init+0x8c>)
 8000b7e:	4013      	ands	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000b8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ba2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	69db      	ldr	r3, [r3, #28]
 8000ba8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f000 f946 	bl	8000e4c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2221      	movs	r2, #33	; 0x21
 8000bca:	2101      	movs	r1, #1
 8000bcc:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2220      	movs	r2, #32
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
}  
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b004      	add	sp, #16
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	ffffc00f 	.word	0xffffc00f

08000be4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
 8000bf0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000bf2:	2317      	movs	r3, #23
 8000bf4:	18fb      	adds	r3, r7, r3
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2220      	movs	r2, #32
 8000bfe:	5c9b      	ldrb	r3, [r3, r2]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d101      	bne.n	8000c08 <HAL_DMA_Start_IT+0x24>
 8000c04:	2302      	movs	r3, #2
 8000c06:	e04f      	b.n	8000ca8 <HAL_DMA_Start_IT+0xc4>
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2220      	movs	r2, #32
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2221      	movs	r2, #33	; 0x21
 8000c14:	5c9b      	ldrb	r3, [r3, r2]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d13a      	bne.n	8000c92 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	2221      	movs	r2, #33	; 0x21
 8000c20:	2102      	movs	r1, #2
 8000c22:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2200      	movs	r2, #0
 8000c28:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2101      	movs	r1, #1
 8000c36:	438a      	bics	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	68b9      	ldr	r1, [r7, #8]
 8000c40:	68f8      	ldr	r0, [r7, #12]
 8000c42:	f000 f8d7 	bl	8000df4 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d008      	beq.n	8000c60 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	210e      	movs	r1, #14
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	e00f      	b.n	8000c80 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	210a      	movs	r1, #10
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2104      	movs	r1, #4
 8000c7c:	438a      	bics	r2, r1
 8000c7e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	e007      	b.n	8000ca2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2220      	movs	r2, #32
 8000c96:	2100      	movs	r1, #0
 8000c98:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000c9a:	2317      	movs	r3, #23
 8000c9c:	18fb      	adds	r3, r7, r3
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000ca2:	2317      	movs	r3, #23
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	781b      	ldrb	r3, [r3, #0]
} 
 8000ca8:	0018      	movs	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b006      	add	sp, #24
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	2204      	movs	r2, #4
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	0013      	movs	r3, r2
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	d024      	beq.n	8000d22 <HAL_DMA_IRQHandler+0x72>
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	2204      	movs	r2, #4
 8000cdc:	4013      	ands	r3, r2
 8000cde:	d020      	beq.n	8000d22 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2220      	movs	r2, #32
 8000ce8:	4013      	ands	r3, r2
 8000cea:	d107      	bne.n	8000cfc <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	438a      	bics	r2, r1
 8000cfa:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d04:	2104      	movs	r1, #4
 8000d06:	4091      	lsls	r1, r2
 8000d08:	000a      	movs	r2, r1
 8000d0a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d100      	bne.n	8000d16 <HAL_DMA_IRQHandler+0x66>
 8000d14:	e06a      	b.n	8000dec <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	0010      	movs	r0, r2
 8000d1e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000d20:	e064      	b.n	8000dec <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	2202      	movs	r2, #2
 8000d28:	409a      	lsls	r2, r3
 8000d2a:	0013      	movs	r3, r2
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	d02b      	beq.n	8000d8a <HAL_DMA_IRQHandler+0xda>
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	2202      	movs	r2, #2
 8000d36:	4013      	ands	r3, r2
 8000d38:	d027      	beq.n	8000d8a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2220      	movs	r2, #32
 8000d42:	4013      	ands	r3, r2
 8000d44:	d10b      	bne.n	8000d5e <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	210a      	movs	r1, #10
 8000d52:	438a      	bics	r2, r1
 8000d54:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2221      	movs	r2, #33	; 0x21
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d66:	2102      	movs	r1, #2
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	000a      	movs	r2, r1
 8000d6c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2220      	movs	r2, #32
 8000d72:	2100      	movs	r1, #0
 8000d74:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d036      	beq.n	8000dec <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	0010      	movs	r0, r2
 8000d86:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000d88:	e030      	b.n	8000dec <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	2208      	movs	r2, #8
 8000d90:	409a      	lsls	r2, r3
 8000d92:	0013      	movs	r3, r2
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	4013      	ands	r3, r2
 8000d98:	d028      	beq.n	8000dec <HAL_DMA_IRQHandler+0x13c>
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	2208      	movs	r2, #8
 8000d9e:	4013      	ands	r3, r2
 8000da0:	d024      	beq.n	8000dec <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	210e      	movs	r1, #14
 8000dae:	438a      	bics	r2, r1
 8000db0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dba:	2101      	movs	r1, #1
 8000dbc:	4091      	lsls	r1, r2
 8000dbe:	000a      	movs	r2, r1
 8000dc0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2221      	movs	r2, #33	; 0x21
 8000dcc:	2101      	movs	r1, #1
 8000dce:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2220      	movs	r2, #32
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d005      	beq.n	8000dec <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	0010      	movs	r0, r2
 8000de8:	4798      	blx	r3
    }
   }
}  
 8000dea:	e7ff      	b.n	8000dec <HAL_DMA_IRQHandler+0x13c>
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b004      	add	sp, #16
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	4091      	lsls	r1, r2
 8000e0e:	000a      	movs	r2, r1
 8000e10:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b10      	cmp	r3, #16
 8000e20:	d108      	bne.n	8000e34 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e32:	e007      	b.n	8000e44 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	68ba      	ldr	r2, [r7, #8]
 8000e3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	60da      	str	r2, [r3, #12]
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b004      	add	sp, #16
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <DMA_CalcBaseAndBitshift+0x30>)
 8000e5a:	4694      	mov	ip, r2
 8000e5c:	4463      	add	r3, ip
 8000e5e:	2114      	movs	r1, #20
 8000e60:	0018      	movs	r0, r3
 8000e62:	f7ff f965 	bl	8000130 <__udivsi3>
 8000e66:	0003      	movs	r3, r0
 8000e68:	009a      	lsls	r2, r3, #2
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a03      	ldr	r2, [pc, #12]	; (8000e80 <DMA_CalcBaseAndBitshift+0x34>)
 8000e72:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b002      	add	sp, #8
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	bffdfff8 	.word	0xbffdfff8
 8000e80:	40020000 	.word	0x40020000

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e92:	e14f      	b.n	8001134 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2101      	movs	r1, #1
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	4091      	lsls	r1, r2
 8000e9e:	000a      	movs	r2, r1
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d100      	bne.n	8000eac <HAL_GPIO_Init+0x28>
 8000eaa:	e140      	b.n	800112e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d005      	beq.n	8000ec4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d130      	bne.n	8000f26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	409a      	lsls	r2, r3
 8000ed2:	0013      	movs	r3, r2
 8000ed4:	43da      	mvns	r2, r3
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	409a      	lsls	r2, r3
 8000ee6:	0013      	movs	r3, r2
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000efa:	2201      	movs	r2, #1
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
 8000f00:	0013      	movs	r3, r2
 8000f02:	43da      	mvns	r2, r3
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	091b      	lsrs	r3, r3, #4
 8000f10:	2201      	movs	r2, #1
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
 8000f18:	0013      	movs	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d017      	beq.n	8000f62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	0013      	movs	r3, r2
 8000f42:	43da      	mvns	r2, r3
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	409a      	lsls	r2, r3
 8000f54:	0013      	movs	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2203      	movs	r2, #3
 8000f68:	4013      	ands	r3, r2
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d123      	bne.n	8000fb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	08da      	lsrs	r2, r3, #3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3208      	adds	r2, #8
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	58d3      	ldr	r3, [r2, r3]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	2207      	movs	r2, #7
 8000f80:	4013      	ands	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	220f      	movs	r2, #15
 8000f86:	409a      	lsls	r2, r3
 8000f88:	0013      	movs	r3, r2
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	691a      	ldr	r2, [r3, #16]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	2107      	movs	r1, #7
 8000f9a:	400b      	ands	r3, r1
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	0013      	movs	r3, r2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	08da      	lsrs	r2, r3, #3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3208      	adds	r2, #8
 8000fb0:	0092      	lsls	r2, r2, #2
 8000fb2:	6939      	ldr	r1, [r7, #16]
 8000fb4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	0013      	movs	r3, r2
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	0013      	movs	r3, r2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	23c0      	movs	r3, #192	; 0xc0
 8000ff0:	029b      	lsls	r3, r3, #10
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d100      	bne.n	8000ff8 <HAL_GPIO_Init+0x174>
 8000ff6:	e09a      	b.n	800112e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff8:	4b54      	ldr	r3, [pc, #336]	; (800114c <HAL_GPIO_Init+0x2c8>)
 8000ffa:	699a      	ldr	r2, [r3, #24]
 8000ffc:	4b53      	ldr	r3, [pc, #332]	; (800114c <HAL_GPIO_Init+0x2c8>)
 8000ffe:	2101      	movs	r1, #1
 8001000:	430a      	orrs	r2, r1
 8001002:	619a      	str	r2, [r3, #24]
 8001004:	4b51      	ldr	r3, [pc, #324]	; (800114c <HAL_GPIO_Init+0x2c8>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	2201      	movs	r2, #1
 800100a:	4013      	ands	r3, r2
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001010:	4a4f      	ldr	r2, [pc, #316]	; (8001150 <HAL_GPIO_Init+0x2cc>)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	089b      	lsrs	r3, r3, #2
 8001016:	3302      	adds	r3, #2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	589b      	ldr	r3, [r3, r2]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2203      	movs	r2, #3
 8001022:	4013      	ands	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	409a      	lsls	r2, r3
 800102a:	0013      	movs	r3, r2
 800102c:	43da      	mvns	r2, r3
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	2390      	movs	r3, #144	; 0x90
 8001038:	05db      	lsls	r3, r3, #23
 800103a:	429a      	cmp	r2, r3
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0x1e2>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a44      	ldr	r2, [pc, #272]	; (8001154 <HAL_GPIO_Init+0x2d0>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00d      	beq.n	8001062 <HAL_GPIO_Init+0x1de>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a43      	ldr	r2, [pc, #268]	; (8001158 <HAL_GPIO_Init+0x2d4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d007      	beq.n	800105e <HAL_GPIO_Init+0x1da>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a42      	ldr	r2, [pc, #264]	; (800115c <HAL_GPIO_Init+0x2d8>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_GPIO_Init+0x1d6>
 8001056:	2303      	movs	r3, #3
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x1e4>
 800105a:	2305      	movs	r3, #5
 800105c:	e004      	b.n	8001068 <HAL_GPIO_Init+0x1e4>
 800105e:	2302      	movs	r3, #2
 8001060:	e002      	b.n	8001068 <HAL_GPIO_Init+0x1e4>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <HAL_GPIO_Init+0x1e4>
 8001066:	2300      	movs	r3, #0
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	2103      	movs	r1, #3
 800106c:	400a      	ands	r2, r1
 800106e:	0092      	lsls	r2, r2, #2
 8001070:	4093      	lsls	r3, r2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001078:	4935      	ldr	r1, [pc, #212]	; (8001150 <HAL_GPIO_Init+0x2cc>)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3302      	adds	r3, #2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001086:	4b36      	ldr	r3, [pc, #216]	; (8001160 <HAL_GPIO_Init+0x2dc>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	43da      	mvns	r2, r3
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	025b      	lsls	r3, r3, #9
 800109e:	4013      	ands	r3, r2
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010aa:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <HAL_GPIO_Init+0x2dc>)
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <HAL_GPIO_Init+0x2dc>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	43da      	mvns	r2, r3
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	029b      	lsls	r3, r3, #10
 80010c8:	4013      	ands	r3, r2
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <HAL_GPIO_Init+0x2dc>)
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010da:	4b21      	ldr	r3, [pc, #132]	; (8001160 <HAL_GPIO_Init+0x2dc>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	43da      	mvns	r2, r3
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	035b      	lsls	r3, r3, #13
 80010f2:	4013      	ands	r3, r2
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_GPIO_Init+0x2dc>)
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001104:	4b16      	ldr	r3, [pc, #88]	; (8001160 <HAL_GPIO_Init+0x2dc>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	43da      	mvns	r2, r3
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	039b      	lsls	r3, r3, #14
 800111c:	4013      	ands	r3, r2
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <HAL_GPIO_Init+0x2dc>)
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	3301      	adds	r3, #1
 8001132:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	40da      	lsrs	r2, r3
 800113c:	1e13      	subs	r3, r2, #0
 800113e:	d000      	beq.n	8001142 <HAL_GPIO_Init+0x2be>
 8001140:	e6a8      	b.n	8000e94 <HAL_GPIO_Init+0x10>
  } 
}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	b006      	add	sp, #24
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40021000 	.word	0x40021000
 8001150:	40010000 	.word	0x40010000
 8001154:	48000400 	.word	0x48000400
 8001158:	48000800 	.word	0x48000800
 800115c:	48000c00 	.word	0x48000c00
 8001160:	40010400 	.word	0x40010400

08001164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	0008      	movs	r0, r1
 800116e:	0011      	movs	r1, r2
 8001170:	1cbb      	adds	r3, r7, #2
 8001172:	1c02      	adds	r2, r0, #0
 8001174:	801a      	strh	r2, [r3, #0]
 8001176:	1c7b      	adds	r3, r7, #1
 8001178:	1c0a      	adds	r2, r1, #0
 800117a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800117c:	1c7b      	adds	r3, r7, #1
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d004      	beq.n	800118e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001184:	1cbb      	adds	r3, r7, #2
 8001186:	881a      	ldrh	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800118c:	e003      	b.n	8001196 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800118e:	1cbb      	adds	r3, r7, #2
 8001190:	881a      	ldrh	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e301      	b.n	80017b6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2201      	movs	r2, #1
 80011b8:	4013      	ands	r3, r2
 80011ba:	d100      	bne.n	80011be <HAL_RCC_OscConfig+0x1e>
 80011bc:	e08d      	b.n	80012da <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011be:	4bc3      	ldr	r3, [pc, #780]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	220c      	movs	r2, #12
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d00e      	beq.n	80011e8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011ca:	4bc0      	ldr	r3, [pc, #768]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	220c      	movs	r2, #12
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	d116      	bne.n	8001204 <HAL_RCC_OscConfig+0x64>
 80011d6:	4bbd      	ldr	r3, [pc, #756]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	2380      	movs	r3, #128	; 0x80
 80011dc:	025b      	lsls	r3, r3, #9
 80011de:	401a      	ands	r2, r3
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	025b      	lsls	r3, r3, #9
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d10d      	bne.n	8001204 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e8:	4bb8      	ldr	r3, [pc, #736]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	029b      	lsls	r3, r3, #10
 80011f0:	4013      	ands	r3, r2
 80011f2:	d100      	bne.n	80011f6 <HAL_RCC_OscConfig+0x56>
 80011f4:	e070      	b.n	80012d8 <HAL_RCC_OscConfig+0x138>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d000      	beq.n	8001200 <HAL_RCC_OscConfig+0x60>
 80011fe:	e06b      	b.n	80012d8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e2d8      	b.n	80017b6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d107      	bne.n	800121c <HAL_RCC_OscConfig+0x7c>
 800120c:	4baf      	ldr	r3, [pc, #700]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4bae      	ldr	r3, [pc, #696]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001212:	2180      	movs	r1, #128	; 0x80
 8001214:	0249      	lsls	r1, r1, #9
 8001216:	430a      	orrs	r2, r1
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	e02f      	b.n	800127c <HAL_RCC_OscConfig+0xdc>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d10c      	bne.n	800123e <HAL_RCC_OscConfig+0x9e>
 8001224:	4ba9      	ldr	r3, [pc, #676]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4ba8      	ldr	r3, [pc, #672]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 800122a:	49a9      	ldr	r1, [pc, #676]	; (80014d0 <HAL_RCC_OscConfig+0x330>)
 800122c:	400a      	ands	r2, r1
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	4ba6      	ldr	r3, [pc, #664]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4ba5      	ldr	r3, [pc, #660]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001236:	49a7      	ldr	r1, [pc, #668]	; (80014d4 <HAL_RCC_OscConfig+0x334>)
 8001238:	400a      	ands	r2, r1
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	e01e      	b.n	800127c <HAL_RCC_OscConfig+0xdc>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b05      	cmp	r3, #5
 8001244:	d10e      	bne.n	8001264 <HAL_RCC_OscConfig+0xc4>
 8001246:	4ba1      	ldr	r3, [pc, #644]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4ba0      	ldr	r3, [pc, #640]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	02c9      	lsls	r1, r1, #11
 8001250:	430a      	orrs	r2, r1
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	4b9d      	ldr	r3, [pc, #628]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b9c      	ldr	r3, [pc, #624]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 800125a:	2180      	movs	r1, #128	; 0x80
 800125c:	0249      	lsls	r1, r1, #9
 800125e:	430a      	orrs	r2, r1
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e00b      	b.n	800127c <HAL_RCC_OscConfig+0xdc>
 8001264:	4b99      	ldr	r3, [pc, #612]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b98      	ldr	r3, [pc, #608]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 800126a:	4999      	ldr	r1, [pc, #612]	; (80014d0 <HAL_RCC_OscConfig+0x330>)
 800126c:	400a      	ands	r2, r1
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	4b96      	ldr	r3, [pc, #600]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b95      	ldr	r3, [pc, #596]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001276:	4997      	ldr	r1, [pc, #604]	; (80014d4 <HAL_RCC_OscConfig+0x334>)
 8001278:	400a      	ands	r2, r1
 800127a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d014      	beq.n	80012ae <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001284:	f7ff fb7e 	bl	8000984 <HAL_GetTick>
 8001288:	0003      	movs	r3, r0
 800128a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800128e:	f7ff fb79 	bl	8000984 <HAL_GetTick>
 8001292:	0002      	movs	r2, r0
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b64      	cmp	r3, #100	; 0x64
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e28a      	b.n	80017b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a0:	4b8a      	ldr	r3, [pc, #552]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	029b      	lsls	r3, r3, #10
 80012a8:	4013      	ands	r3, r2
 80012aa:	d0f0      	beq.n	800128e <HAL_RCC_OscConfig+0xee>
 80012ac:	e015      	b.n	80012da <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ae:	f7ff fb69 	bl	8000984 <HAL_GetTick>
 80012b2:	0003      	movs	r3, r0
 80012b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b8:	f7ff fb64 	bl	8000984 <HAL_GetTick>
 80012bc:	0002      	movs	r2, r0
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	; 0x64
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e275      	b.n	80017b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ca:	4b80      	ldr	r3, [pc, #512]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	029b      	lsls	r3, r3, #10
 80012d2:	4013      	ands	r3, r2
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0x118>
 80012d6:	e000      	b.n	80012da <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2202      	movs	r2, #2
 80012e0:	4013      	ands	r3, r2
 80012e2:	d100      	bne.n	80012e6 <HAL_RCC_OscConfig+0x146>
 80012e4:	e069      	b.n	80013ba <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012e6:	4b79      	ldr	r3, [pc, #484]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	220c      	movs	r2, #12
 80012ec:	4013      	ands	r3, r2
 80012ee:	d00b      	beq.n	8001308 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012f0:	4b76      	ldr	r3, [pc, #472]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	220c      	movs	r2, #12
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b08      	cmp	r3, #8
 80012fa:	d11c      	bne.n	8001336 <HAL_RCC_OscConfig+0x196>
 80012fc:	4b73      	ldr	r3, [pc, #460]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	025b      	lsls	r3, r3, #9
 8001304:	4013      	ands	r3, r2
 8001306:	d116      	bne.n	8001336 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001308:	4b70      	ldr	r3, [pc, #448]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2202      	movs	r2, #2
 800130e:	4013      	ands	r3, r2
 8001310:	d005      	beq.n	800131e <HAL_RCC_OscConfig+0x17e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d001      	beq.n	800131e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e24b      	b.n	80017b6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131e:	4b6b      	ldr	r3, [pc, #428]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	22f8      	movs	r2, #248	; 0xf8
 8001324:	4393      	bics	r3, r2
 8001326:	0019      	movs	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	00da      	lsls	r2, r3, #3
 800132e:	4b67      	ldr	r3, [pc, #412]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001330:	430a      	orrs	r2, r1
 8001332:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001334:	e041      	b.n	80013ba <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d024      	beq.n	8001388 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800133e:	4b63      	ldr	r3, [pc, #396]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b62      	ldr	r3, [pc, #392]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001344:	2101      	movs	r1, #1
 8001346:	430a      	orrs	r2, r1
 8001348:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134a:	f7ff fb1b 	bl	8000984 <HAL_GetTick>
 800134e:	0003      	movs	r3, r0
 8001350:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001354:	f7ff fb16 	bl	8000984 <HAL_GetTick>
 8001358:	0002      	movs	r2, r0
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e227      	b.n	80017b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001366:	4b59      	ldr	r3, [pc, #356]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2202      	movs	r2, #2
 800136c:	4013      	ands	r3, r2
 800136e:	d0f1      	beq.n	8001354 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001370:	4b56      	ldr	r3, [pc, #344]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	22f8      	movs	r2, #248	; 0xf8
 8001376:	4393      	bics	r3, r2
 8001378:	0019      	movs	r1, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	00da      	lsls	r2, r3, #3
 8001380:	4b52      	ldr	r3, [pc, #328]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001382:	430a      	orrs	r2, r1
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	e018      	b.n	80013ba <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001388:	4b50      	ldr	r3, [pc, #320]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b4f      	ldr	r3, [pc, #316]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 800138e:	2101      	movs	r1, #1
 8001390:	438a      	bics	r2, r1
 8001392:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff faf6 	bl	8000984 <HAL_GetTick>
 8001398:	0003      	movs	r3, r0
 800139a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139e:	f7ff faf1 	bl	8000984 <HAL_GetTick>
 80013a2:	0002      	movs	r2, r0
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e202      	b.n	80017b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b0:	4b46      	ldr	r3, [pc, #280]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2202      	movs	r2, #2
 80013b6:	4013      	ands	r3, r2
 80013b8:	d1f1      	bne.n	800139e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2208      	movs	r2, #8
 80013c0:	4013      	ands	r3, r2
 80013c2:	d036      	beq.n	8001432 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d019      	beq.n	8001400 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013cc:	4b3f      	ldr	r3, [pc, #252]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 80013ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d0:	4b3e      	ldr	r3, [pc, #248]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 80013d2:	2101      	movs	r1, #1
 80013d4:	430a      	orrs	r2, r1
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d8:	f7ff fad4 	bl	8000984 <HAL_GetTick>
 80013dc:	0003      	movs	r3, r0
 80013de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e2:	f7ff facf 	bl	8000984 <HAL_GetTick>
 80013e6:	0002      	movs	r2, r0
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e1e0      	b.n	80017b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f4:	4b35      	ldr	r3, [pc, #212]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	2202      	movs	r2, #2
 80013fa:	4013      	ands	r3, r2
 80013fc:	d0f1      	beq.n	80013e2 <HAL_RCC_OscConfig+0x242>
 80013fe:	e018      	b.n	8001432 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001400:	4b32      	ldr	r3, [pc, #200]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001404:	4b31      	ldr	r3, [pc, #196]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001406:	2101      	movs	r1, #1
 8001408:	438a      	bics	r2, r1
 800140a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140c:	f7ff faba 	bl	8000984 <HAL_GetTick>
 8001410:	0003      	movs	r3, r0
 8001412:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001416:	f7ff fab5 	bl	8000984 <HAL_GetTick>
 800141a:	0002      	movs	r2, r0
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e1c6      	b.n	80017b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001428:	4b28      	ldr	r3, [pc, #160]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	2202      	movs	r2, #2
 800142e:	4013      	ands	r3, r2
 8001430:	d1f1      	bne.n	8001416 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2204      	movs	r2, #4
 8001438:	4013      	ands	r3, r2
 800143a:	d100      	bne.n	800143e <HAL_RCC_OscConfig+0x29e>
 800143c:	e0b4      	b.n	80015a8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800143e:	201f      	movs	r0, #31
 8001440:	183b      	adds	r3, r7, r0
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001446:	4b21      	ldr	r3, [pc, #132]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001448:	69da      	ldr	r2, [r3, #28]
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	055b      	lsls	r3, r3, #21
 800144e:	4013      	ands	r3, r2
 8001450:	d110      	bne.n	8001474 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001454:	69da      	ldr	r2, [r3, #28]
 8001456:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001458:	2180      	movs	r1, #128	; 0x80
 800145a:	0549      	lsls	r1, r1, #21
 800145c:	430a      	orrs	r2, r1
 800145e:	61da      	str	r2, [r3, #28]
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001462:	69da      	ldr	r2, [r3, #28]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	055b      	lsls	r3, r3, #21
 8001468:	4013      	ands	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800146e:	183b      	adds	r3, r7, r0
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <HAL_RCC_OscConfig+0x338>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4013      	ands	r3, r2
 800147e:	d11a      	bne.n	80014b6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001480:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_RCC_OscConfig+0x338>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <HAL_RCC_OscConfig+0x338>)
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	0049      	lsls	r1, r1, #1
 800148a:	430a      	orrs	r2, r1
 800148c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800148e:	f7ff fa79 	bl	8000984 <HAL_GetTick>
 8001492:	0003      	movs	r3, r0
 8001494:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001498:	f7ff fa74 	bl	8000984 <HAL_GetTick>
 800149c:	0002      	movs	r2, r0
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	; 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e185      	b.n	80017b6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_RCC_OscConfig+0x338>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4013      	ands	r3, r2
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d10e      	bne.n	80014dc <HAL_RCC_OscConfig+0x33c>
 80014be:	4b03      	ldr	r3, [pc, #12]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 80014c0:	6a1a      	ldr	r2, [r3, #32]
 80014c2:	4b02      	ldr	r3, [pc, #8]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 80014c4:	2101      	movs	r1, #1
 80014c6:	430a      	orrs	r2, r1
 80014c8:	621a      	str	r2, [r3, #32]
 80014ca:	e035      	b.n	8001538 <HAL_RCC_OscConfig+0x398>
 80014cc:	40021000 	.word	0x40021000
 80014d0:	fffeffff 	.word	0xfffeffff
 80014d4:	fffbffff 	.word	0xfffbffff
 80014d8:	40007000 	.word	0x40007000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d10c      	bne.n	80014fe <HAL_RCC_OscConfig+0x35e>
 80014e4:	4bb6      	ldr	r3, [pc, #728]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 80014e6:	6a1a      	ldr	r2, [r3, #32]
 80014e8:	4bb5      	ldr	r3, [pc, #724]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 80014ea:	2101      	movs	r1, #1
 80014ec:	438a      	bics	r2, r1
 80014ee:	621a      	str	r2, [r3, #32]
 80014f0:	4bb3      	ldr	r3, [pc, #716]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 80014f2:	6a1a      	ldr	r2, [r3, #32]
 80014f4:	4bb2      	ldr	r3, [pc, #712]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 80014f6:	2104      	movs	r1, #4
 80014f8:	438a      	bics	r2, r1
 80014fa:	621a      	str	r2, [r3, #32]
 80014fc:	e01c      	b.n	8001538 <HAL_RCC_OscConfig+0x398>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b05      	cmp	r3, #5
 8001504:	d10c      	bne.n	8001520 <HAL_RCC_OscConfig+0x380>
 8001506:	4bae      	ldr	r3, [pc, #696]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 8001508:	6a1a      	ldr	r2, [r3, #32]
 800150a:	4bad      	ldr	r3, [pc, #692]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 800150c:	2104      	movs	r1, #4
 800150e:	430a      	orrs	r2, r1
 8001510:	621a      	str	r2, [r3, #32]
 8001512:	4bab      	ldr	r3, [pc, #684]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 8001514:	6a1a      	ldr	r2, [r3, #32]
 8001516:	4baa      	ldr	r3, [pc, #680]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 8001518:	2101      	movs	r1, #1
 800151a:	430a      	orrs	r2, r1
 800151c:	621a      	str	r2, [r3, #32]
 800151e:	e00b      	b.n	8001538 <HAL_RCC_OscConfig+0x398>
 8001520:	4ba7      	ldr	r3, [pc, #668]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 8001522:	6a1a      	ldr	r2, [r3, #32]
 8001524:	4ba6      	ldr	r3, [pc, #664]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 8001526:	2101      	movs	r1, #1
 8001528:	438a      	bics	r2, r1
 800152a:	621a      	str	r2, [r3, #32]
 800152c:	4ba4      	ldr	r3, [pc, #656]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 800152e:	6a1a      	ldr	r2, [r3, #32]
 8001530:	4ba3      	ldr	r3, [pc, #652]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 8001532:	2104      	movs	r1, #4
 8001534:	438a      	bics	r2, r1
 8001536:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d014      	beq.n	800156a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001540:	f7ff fa20 	bl	8000984 <HAL_GetTick>
 8001544:	0003      	movs	r3, r0
 8001546:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001548:	e009      	b.n	800155e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154a:	f7ff fa1b 	bl	8000984 <HAL_GetTick>
 800154e:	0002      	movs	r2, r0
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	4a9b      	ldr	r2, [pc, #620]	; (80017c4 <HAL_RCC_OscConfig+0x624>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e12b      	b.n	80017b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800155e:	4b98      	ldr	r3, [pc, #608]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	2202      	movs	r2, #2
 8001564:	4013      	ands	r3, r2
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x3aa>
 8001568:	e013      	b.n	8001592 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156a:	f7ff fa0b 	bl	8000984 <HAL_GetTick>
 800156e:	0003      	movs	r3, r0
 8001570:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001572:	e009      	b.n	8001588 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001574:	f7ff fa06 	bl	8000984 <HAL_GetTick>
 8001578:	0002      	movs	r2, r0
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	4a91      	ldr	r2, [pc, #580]	; (80017c4 <HAL_RCC_OscConfig+0x624>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e116      	b.n	80017b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001588:	4b8d      	ldr	r3, [pc, #564]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	2202      	movs	r2, #2
 800158e:	4013      	ands	r3, r2
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001592:	231f      	movs	r3, #31
 8001594:	18fb      	adds	r3, r7, r3
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d105      	bne.n	80015a8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800159c:	4b88      	ldr	r3, [pc, #544]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 800159e:	69da      	ldr	r2, [r3, #28]
 80015a0:	4b87      	ldr	r3, [pc, #540]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 80015a2:	4989      	ldr	r1, [pc, #548]	; (80017c8 <HAL_RCC_OscConfig+0x628>)
 80015a4:	400a      	ands	r2, r1
 80015a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2210      	movs	r2, #16
 80015ae:	4013      	ands	r3, r2
 80015b0:	d063      	beq.n	800167a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d12a      	bne.n	8001610 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015ba:	4b81      	ldr	r3, [pc, #516]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 80015bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015be:	4b80      	ldr	r3, [pc, #512]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 80015c0:	2104      	movs	r1, #4
 80015c2:	430a      	orrs	r2, r1
 80015c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80015c6:	4b7e      	ldr	r3, [pc, #504]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 80015c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ca:	4b7d      	ldr	r3, [pc, #500]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 80015cc:	2101      	movs	r1, #1
 80015ce:	430a      	orrs	r2, r1
 80015d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d2:	f7ff f9d7 	bl	8000984 <HAL_GetTick>
 80015d6:	0003      	movs	r3, r0
 80015d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015dc:	f7ff f9d2 	bl	8000984 <HAL_GetTick>
 80015e0:	0002      	movs	r2, r0
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e0e3      	b.n	80017b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015ee:	4b74      	ldr	r3, [pc, #464]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 80015f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f2:	2202      	movs	r2, #2
 80015f4:	4013      	ands	r3, r2
 80015f6:	d0f1      	beq.n	80015dc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015f8:	4b71      	ldr	r3, [pc, #452]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 80015fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fc:	22f8      	movs	r2, #248	; 0xf8
 80015fe:	4393      	bics	r3, r2
 8001600:	0019      	movs	r1, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	00da      	lsls	r2, r3, #3
 8001608:	4b6d      	ldr	r3, [pc, #436]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 800160a:	430a      	orrs	r2, r1
 800160c:	635a      	str	r2, [r3, #52]	; 0x34
 800160e:	e034      	b.n	800167a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	3305      	adds	r3, #5
 8001616:	d111      	bne.n	800163c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001618:	4b69      	ldr	r3, [pc, #420]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 800161a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800161c:	4b68      	ldr	r3, [pc, #416]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 800161e:	2104      	movs	r1, #4
 8001620:	438a      	bics	r2, r1
 8001622:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001624:	4b66      	ldr	r3, [pc, #408]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 8001626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001628:	22f8      	movs	r2, #248	; 0xf8
 800162a:	4393      	bics	r3, r2
 800162c:	0019      	movs	r1, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	00da      	lsls	r2, r3, #3
 8001634:	4b62      	ldr	r3, [pc, #392]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 8001636:	430a      	orrs	r2, r1
 8001638:	635a      	str	r2, [r3, #52]	; 0x34
 800163a:	e01e      	b.n	800167a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800163c:	4b60      	ldr	r3, [pc, #384]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 800163e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001640:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 8001642:	2104      	movs	r1, #4
 8001644:	430a      	orrs	r2, r1
 8001646:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001648:	4b5d      	ldr	r3, [pc, #372]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 800164a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800164c:	4b5c      	ldr	r3, [pc, #368]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 800164e:	2101      	movs	r1, #1
 8001650:	438a      	bics	r2, r1
 8001652:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001654:	f7ff f996 	bl	8000984 <HAL_GetTick>
 8001658:	0003      	movs	r3, r0
 800165a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800165e:	f7ff f991 	bl	8000984 <HAL_GetTick>
 8001662:	0002      	movs	r2, r0
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e0a2      	b.n	80017b6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001670:	4b53      	ldr	r3, [pc, #332]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 8001672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001674:	2202      	movs	r2, #2
 8001676:	4013      	ands	r3, r2
 8001678:	d1f1      	bne.n	800165e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d100      	bne.n	8001684 <HAL_RCC_OscConfig+0x4e4>
 8001682:	e097      	b.n	80017b4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001684:	4b4e      	ldr	r3, [pc, #312]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	220c      	movs	r2, #12
 800168a:	4013      	ands	r3, r2
 800168c:	2b08      	cmp	r3, #8
 800168e:	d100      	bne.n	8001692 <HAL_RCC_OscConfig+0x4f2>
 8001690:	e06b      	b.n	800176a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d14c      	bne.n	8001734 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169a:	4b49      	ldr	r3, [pc, #292]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4b48      	ldr	r3, [pc, #288]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 80016a0:	494a      	ldr	r1, [pc, #296]	; (80017cc <HAL_RCC_OscConfig+0x62c>)
 80016a2:	400a      	ands	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7ff f96d 	bl	8000984 <HAL_GetTick>
 80016aa:	0003      	movs	r3, r0
 80016ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b0:	f7ff f968 	bl	8000984 <HAL_GetTick>
 80016b4:	0002      	movs	r2, r0
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e079      	b.n	80017b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c2:	4b3f      	ldr	r3, [pc, #252]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	049b      	lsls	r3, r3, #18
 80016ca:	4013      	ands	r3, r2
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ce:	4b3c      	ldr	r3, [pc, #240]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	220f      	movs	r2, #15
 80016d4:	4393      	bics	r3, r2
 80016d6:	0019      	movs	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016dc:	4b38      	ldr	r3, [pc, #224]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 80016de:	430a      	orrs	r2, r1
 80016e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80016e2:	4b37      	ldr	r3, [pc, #220]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4a3a      	ldr	r2, [pc, #232]	; (80017d0 <HAL_RCC_OscConfig+0x630>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	0019      	movs	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	431a      	orrs	r2, r3
 80016f6:	4b32      	ldr	r3, [pc, #200]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 80016f8:	430a      	orrs	r2, r1
 80016fa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016fc:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	0449      	lsls	r1, r1, #17
 8001706:	430a      	orrs	r2, r1
 8001708:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170a:	f7ff f93b 	bl	8000984 <HAL_GetTick>
 800170e:	0003      	movs	r3, r0
 8001710:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001714:	f7ff f936 	bl	8000984 <HAL_GetTick>
 8001718:	0002      	movs	r2, r0
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e047      	b.n	80017b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	049b      	lsls	r3, r3, #18
 800172e:	4013      	ands	r3, r2
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0x574>
 8001732:	e03f      	b.n	80017b4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001734:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 800173a:	4924      	ldr	r1, [pc, #144]	; (80017cc <HAL_RCC_OscConfig+0x62c>)
 800173c:	400a      	ands	r2, r1
 800173e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff f920 	bl	8000984 <HAL_GetTick>
 8001744:	0003      	movs	r3, r0
 8001746:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174a:	f7ff f91b 	bl	8000984 <HAL_GetTick>
 800174e:	0002      	movs	r2, r0
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e02c      	b.n	80017b6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	049b      	lsls	r3, r3, #18
 8001764:	4013      	ands	r3, r2
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0x5aa>
 8001768:	e024      	b.n	80017b4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d101      	bne.n	8001776 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e01f      	b.n	80017b6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800177c:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <HAL_RCC_OscConfig+0x620>)
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	025b      	lsls	r3, r3, #9
 8001788:	401a      	ands	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	429a      	cmp	r2, r3
 8001790:	d10e      	bne.n	80017b0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	220f      	movs	r2, #15
 8001796:	401a      	ands	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800179c:	429a      	cmp	r2, r3
 800179e:	d107      	bne.n	80017b0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	23f0      	movs	r3, #240	; 0xf0
 80017a4:	039b      	lsls	r3, r3, #14
 80017a6:	401a      	ands	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	0018      	movs	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b008      	add	sp, #32
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	40021000 	.word	0x40021000
 80017c4:	00001388 	.word	0x00001388
 80017c8:	efffffff 	.word	0xefffffff
 80017cc:	feffffff 	.word	0xfeffffff
 80017d0:	ffc2ffff 	.word	0xffc2ffff

080017d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0b3      	b.n	8001950 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017e8:	4b5b      	ldr	r3, [pc, #364]	; (8001958 <HAL_RCC_ClockConfig+0x184>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2201      	movs	r2, #1
 80017ee:	4013      	ands	r3, r2
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d911      	bls.n	800181a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b58      	ldr	r3, [pc, #352]	; (8001958 <HAL_RCC_ClockConfig+0x184>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2201      	movs	r2, #1
 80017fc:	4393      	bics	r3, r2
 80017fe:	0019      	movs	r1, r3
 8001800:	4b55      	ldr	r3, [pc, #340]	; (8001958 <HAL_RCC_ClockConfig+0x184>)
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001808:	4b53      	ldr	r3, [pc, #332]	; (8001958 <HAL_RCC_ClockConfig+0x184>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2201      	movs	r2, #1
 800180e:	4013      	ands	r3, r2
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d001      	beq.n	800181a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e09a      	b.n	8001950 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2202      	movs	r2, #2
 8001820:	4013      	ands	r3, r2
 8001822:	d015      	beq.n	8001850 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2204      	movs	r2, #4
 800182a:	4013      	ands	r3, r2
 800182c:	d006      	beq.n	800183c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800182e:	4b4b      	ldr	r3, [pc, #300]	; (800195c <HAL_RCC_ClockConfig+0x188>)
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	4b4a      	ldr	r3, [pc, #296]	; (800195c <HAL_RCC_ClockConfig+0x188>)
 8001834:	21e0      	movs	r1, #224	; 0xe0
 8001836:	00c9      	lsls	r1, r1, #3
 8001838:	430a      	orrs	r2, r1
 800183a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800183c:	4b47      	ldr	r3, [pc, #284]	; (800195c <HAL_RCC_ClockConfig+0x188>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	22f0      	movs	r2, #240	; 0xf0
 8001842:	4393      	bics	r3, r2
 8001844:	0019      	movs	r1, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	4b44      	ldr	r3, [pc, #272]	; (800195c <HAL_RCC_ClockConfig+0x188>)
 800184c:	430a      	orrs	r2, r1
 800184e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2201      	movs	r2, #1
 8001856:	4013      	ands	r3, r2
 8001858:	d040      	beq.n	80018dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d107      	bne.n	8001872 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	4b3e      	ldr	r3, [pc, #248]	; (800195c <HAL_RCC_ClockConfig+0x188>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	029b      	lsls	r3, r3, #10
 800186a:	4013      	ands	r3, r2
 800186c:	d114      	bne.n	8001898 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e06e      	b.n	8001950 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187a:	4b38      	ldr	r3, [pc, #224]	; (800195c <HAL_RCC_ClockConfig+0x188>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	049b      	lsls	r3, r3, #18
 8001882:	4013      	ands	r3, r2
 8001884:	d108      	bne.n	8001898 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e062      	b.n	8001950 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188a:	4b34      	ldr	r3, [pc, #208]	; (800195c <HAL_RCC_ClockConfig+0x188>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2202      	movs	r2, #2
 8001890:	4013      	ands	r3, r2
 8001892:	d101      	bne.n	8001898 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e05b      	b.n	8001950 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001898:	4b30      	ldr	r3, [pc, #192]	; (800195c <HAL_RCC_ClockConfig+0x188>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2203      	movs	r2, #3
 800189e:	4393      	bics	r3, r2
 80018a0:	0019      	movs	r1, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	4b2d      	ldr	r3, [pc, #180]	; (800195c <HAL_RCC_ClockConfig+0x188>)
 80018a8:	430a      	orrs	r2, r1
 80018aa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018ac:	f7ff f86a 	bl	8000984 <HAL_GetTick>
 80018b0:	0003      	movs	r3, r0
 80018b2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b4:	e009      	b.n	80018ca <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b6:	f7ff f865 	bl	8000984 <HAL_GetTick>
 80018ba:	0002      	movs	r2, r0
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	4a27      	ldr	r2, [pc, #156]	; (8001960 <HAL_RCC_ClockConfig+0x18c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e042      	b.n	8001950 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	4b24      	ldr	r3, [pc, #144]	; (800195c <HAL_RCC_ClockConfig+0x188>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	220c      	movs	r2, #12
 80018d0:	401a      	ands	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	429a      	cmp	r2, r3
 80018da:	d1ec      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018dc:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <HAL_RCC_ClockConfig+0x184>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2201      	movs	r2, #1
 80018e2:	4013      	ands	r3, r2
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d211      	bcs.n	800190e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ea:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <HAL_RCC_ClockConfig+0x184>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2201      	movs	r2, #1
 80018f0:	4393      	bics	r3, r2
 80018f2:	0019      	movs	r1, r3
 80018f4:	4b18      	ldr	r3, [pc, #96]	; (8001958 <HAL_RCC_ClockConfig+0x184>)
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fc:	4b16      	ldr	r3, [pc, #88]	; (8001958 <HAL_RCC_ClockConfig+0x184>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2201      	movs	r2, #1
 8001902:	4013      	ands	r3, r2
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d001      	beq.n	800190e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e020      	b.n	8001950 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2204      	movs	r2, #4
 8001914:	4013      	ands	r3, r2
 8001916:	d009      	beq.n	800192c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001918:	4b10      	ldr	r3, [pc, #64]	; (800195c <HAL_RCC_ClockConfig+0x188>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	4a11      	ldr	r2, [pc, #68]	; (8001964 <HAL_RCC_ClockConfig+0x190>)
 800191e:	4013      	ands	r3, r2
 8001920:	0019      	movs	r1, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <HAL_RCC_ClockConfig+0x188>)
 8001928:	430a      	orrs	r2, r1
 800192a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800192c:	f000 f820 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 8001930:	0001      	movs	r1, r0
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_RCC_ClockConfig+0x188>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	091b      	lsrs	r3, r3, #4
 8001938:	220f      	movs	r2, #15
 800193a:	4013      	ands	r3, r2
 800193c:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <HAL_RCC_ClockConfig+0x194>)
 800193e:	5cd3      	ldrb	r3, [r2, r3]
 8001940:	000a      	movs	r2, r1
 8001942:	40da      	lsrs	r2, r3
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_RCC_ClockConfig+0x198>)
 8001946:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001948:	2000      	movs	r0, #0
 800194a:	f7fe ffd5 	bl	80008f8 <HAL_InitTick>
  
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b004      	add	sp, #16
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40022000 	.word	0x40022000
 800195c:	40021000 	.word	0x40021000
 8001960:	00001388 	.word	0x00001388
 8001964:	fffff8ff 	.word	0xfffff8ff
 8001968:	08003938 	.word	0x08003938
 800196c:	20000000 	.word	0x20000000

08001970 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b08f      	sub	sp, #60	; 0x3c
 8001974:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001976:	2314      	movs	r3, #20
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	4a2b      	ldr	r2, [pc, #172]	; (8001a28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800197c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800197e:	c313      	stmia	r3!, {r0, r1, r4}
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	4a29      	ldr	r2, [pc, #164]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001988:	ca13      	ldmia	r2!, {r0, r1, r4}
 800198a:	c313      	stmia	r3!, {r0, r1, r4}
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001994:	2300      	movs	r3, #0
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
 8001998:	2300      	movs	r3, #0
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80019a4:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ac:	220c      	movs	r2, #12
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d002      	beq.n	80019ba <HAL_RCC_GetSysClockFreq+0x4a>
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d003      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0x50>
 80019b8:	e02d      	b.n	8001a16 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019ba:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019be:	e02d      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80019c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c2:	0c9b      	lsrs	r3, r3, #18
 80019c4:	220f      	movs	r2, #15
 80019c6:	4013      	ands	r3, r2
 80019c8:	2214      	movs	r2, #20
 80019ca:	18ba      	adds	r2, r7, r2
 80019cc:	5cd3      	ldrb	r3, [r2, r3]
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80019d0:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	220f      	movs	r2, #15
 80019d6:	4013      	ands	r3, r2
 80019d8:	1d3a      	adds	r2, r7, #4
 80019da:	5cd3      	ldrb	r3, [r2, r3]
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	025b      	lsls	r3, r3, #9
 80019e4:	4013      	ands	r3, r2
 80019e6:	d009      	beq.n	80019fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019ea:	4812      	ldr	r0, [pc, #72]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019ec:	f7fe fba0 	bl	8000130 <__udivsi3>
 80019f0:	0003      	movs	r3, r0
 80019f2:	001a      	movs	r2, r3
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	4353      	muls	r3, r2
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
 80019fa:	e009      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80019fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019fe:	000a      	movs	r2, r1
 8001a00:	0152      	lsls	r2, r2, #5
 8001a02:	1a52      	subs	r2, r2, r1
 8001a04:	0193      	lsls	r3, r2, #6
 8001a06:	1a9b      	subs	r3, r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	185b      	adds	r3, r3, r1
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a12:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a14:	e002      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a18:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a1a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a1e:	0018      	movs	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b00f      	add	sp, #60	; 0x3c
 8001a24:	bd90      	pop	{r4, r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	08003918 	.word	0x08003918
 8001a2c:	08003928 	.word	0x08003928
 8001a30:	40021000 	.word	0x40021000
 8001a34:	007a1200 	.word	0x007a1200

08001a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a3c:	4b02      	ldr	r3, [pc, #8]	; (8001a48 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	20000000 	.word	0x20000000

08001a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001a50:	f7ff fff2 	bl	8001a38 <HAL_RCC_GetHCLKFreq>
 8001a54:	0001      	movs	r1, r0
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	0a1b      	lsrs	r3, r3, #8
 8001a5c:	2207      	movs	r2, #7
 8001a5e:	4013      	ands	r3, r2
 8001a60:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a62:	5cd3      	ldrb	r3, [r2, r3]
 8001a64:	40d9      	lsrs	r1, r3
 8001a66:	000b      	movs	r3, r1
}    
 8001a68:	0018      	movs	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	40021000 	.word	0x40021000
 8001a74:	08003948 	.word	0x08003948

08001a78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e044      	b.n	8001b14 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d107      	bne.n	8001aa2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2274      	movs	r2, #116	; 0x74
 8001a96:	2100      	movs	r1, #0
 8001a98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7fe fdab 	bl	80005f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2224      	movs	r2, #36	; 0x24
 8001aa6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	438a      	bics	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	0018      	movs	r0, r3
 8001abc:	f000 f95e 	bl	8001d7c <UART_SetConfig>
 8001ac0:	0003      	movs	r3, r0
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e024      	b.n	8001b14 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f000 fa91 	bl	8001ffc <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	490d      	ldr	r1, [pc, #52]	; (8001b1c <HAL_UART_Init+0xa4>)
 8001ae6:	400a      	ands	r2, r1
 8001ae8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2108      	movs	r1, #8
 8001af6:	438a      	bics	r2, r1
 8001af8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2101      	movs	r1, #1
 8001b06:	430a      	orrs	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f000 fb29 	bl	8002164 <UART_CheckIdleState>
 8001b12:	0003      	movs	r3, r0
}
 8001b14:	0018      	movs	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b002      	add	sp, #8
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	fffff7ff 	.word	0xfffff7ff

08001b20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	1dbb      	adds	r3, r7, #6
 8001b2e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b34:	2b20      	cmp	r3, #32
 8001b36:	d000      	beq.n	8001b3a <HAL_UART_Transmit+0x1a>
 8001b38:	e096      	b.n	8001c68 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_UART_Transmit+0x28>
 8001b40:	1dbb      	adds	r3, r7, #6
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e08e      	b.n	8001c6a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	015b      	lsls	r3, r3, #5
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d109      	bne.n	8001b6c <HAL_UART_Transmit+0x4c>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d105      	bne.n	8001b6c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2201      	movs	r2, #1
 8001b64:	4013      	ands	r3, r2
 8001b66:	d001      	beq.n	8001b6c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e07e      	b.n	8001c6a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2274      	movs	r2, #116	; 0x74
 8001b70:	5c9b      	ldrb	r3, [r3, r2]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_UART_Transmit+0x5a>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e077      	b.n	8001c6a <HAL_UART_Transmit+0x14a>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2274      	movs	r2, #116	; 0x74
 8001b7e:	2101      	movs	r1, #1
 8001b80:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2280      	movs	r2, #128	; 0x80
 8001b86:	2100      	movs	r1, #0
 8001b88:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2221      	movs	r2, #33	; 0x21
 8001b8e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b90:	f7fe fef8 	bl	8000984 <HAL_GetTick>
 8001b94:	0003      	movs	r3, r0
 8001b96:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1dba      	adds	r2, r7, #6
 8001b9c:	2150      	movs	r1, #80	; 0x50
 8001b9e:	8812      	ldrh	r2, [r2, #0]
 8001ba0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1dba      	adds	r2, r7, #6
 8001ba6:	2152      	movs	r1, #82	; 0x52
 8001ba8:	8812      	ldrh	r2, [r2, #0]
 8001baa:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	015b      	lsls	r3, r3, #5
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d108      	bne.n	8001bca <HAL_UART_Transmit+0xaa>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d104      	bne.n	8001bca <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	61bb      	str	r3, [r7, #24]
 8001bc8:	e003      	b.n	8001bd2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2274      	movs	r2, #116	; 0x74
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001bda:	e02d      	b.n	8001c38 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	0013      	movs	r3, r2
 8001be6:	2200      	movs	r2, #0
 8001be8:	2180      	movs	r1, #128	; 0x80
 8001bea:	f000 fb03 	bl	80021f4 <UART_WaitOnFlagUntilTimeout>
 8001bee:	1e03      	subs	r3, r0, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e039      	b.n	8001c6a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10b      	bne.n	8001c14 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	881a      	ldrh	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	05d2      	lsls	r2, r2, #23
 8001c06:	0dd2      	lsrs	r2, r2, #23
 8001c08:	b292      	uxth	r2, r2
 8001c0a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	3302      	adds	r3, #2
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	e008      	b.n	8001c26 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	781a      	ldrb	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	b292      	uxth	r2, r2
 8001c1e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	3301      	adds	r3, #1
 8001c24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2252      	movs	r2, #82	; 0x52
 8001c2a:	5a9b      	ldrh	r3, [r3, r2]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b299      	uxth	r1, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2252      	movs	r2, #82	; 0x52
 8001c36:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2252      	movs	r2, #82	; 0x52
 8001c3c:	5a9b      	ldrh	r3, [r3, r2]
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1cb      	bne.n	8001bdc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	0013      	movs	r3, r2
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2140      	movs	r1, #64	; 0x40
 8001c52:	f000 facf 	bl	80021f4 <UART_WaitOnFlagUntilTimeout>
 8001c56:	1e03      	subs	r3, r0, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e005      	b.n	8001c6a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2220      	movs	r2, #32
 8001c62:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	e000      	b.n	8001c6a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001c68:	2302      	movs	r3, #2
  }
}
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b008      	add	sp, #32
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b088      	sub	sp, #32
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	1dbb      	adds	r3, r7, #6
 8001c7e:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c84:	2b20      	cmp	r3, #32
 8001c86:	d150      	bne.n	8001d2a <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_UART_Receive_DMA+0x24>
 8001c8e:	1dbb      	adds	r3, r7, #6
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e048      	b.n	8001d2c <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	2380      	movs	r3, #128	; 0x80
 8001ca0:	015b      	lsls	r3, r3, #5
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d109      	bne.n	8001cba <HAL_UART_Receive_DMA+0x48>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d105      	bne.n	8001cba <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d001      	beq.n	8001cba <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e038      	b.n	8001d2c <HAL_UART_Receive_DMA+0xba>
      }
    }

    __HAL_LOCK(huart);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2274      	movs	r2, #116	; 0x74
 8001cbe:	5c9b      	ldrb	r3, [r3, r2]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_UART_Receive_DMA+0x56>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e031      	b.n	8001d2c <HAL_UART_Receive_DMA+0xba>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2274      	movs	r2, #116	; 0x74
 8001ccc:	2101      	movs	r1, #1
 8001cce:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	041b      	lsls	r3, r3, #16
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d019      	beq.n	8001d18 <HAL_UART_Receive_DMA+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8001ce8:	613b      	str	r3, [r7, #16]
  return(result);
 8001cea:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	2301      	movs	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f383 8810 	msr	PRIMASK, r3
}
 8001cf8:	46c0      	nop			; (mov r8, r8)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2180      	movs	r1, #128	; 0x80
 8001d06:	04c9      	lsls	r1, r1, #19
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	f383 8810 	msr	PRIMASK, r3
}
 8001d16:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001d18:	1dbb      	adds	r3, r7, #6
 8001d1a:	881a      	ldrh	r2, [r3, #0]
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f000 fb2b 	bl	800237c <UART_Start_Receive_DMA>
 8001d26:	0003      	movs	r3, r0
 8001d28:	e000      	b.n	8001d2c <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 8001d2a:	2302      	movs	r3, #2
  }
}
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	b008      	add	sp, #32
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8001d3c:	46c0      	nop			; (mov r8, r8)
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b002      	add	sp, #8
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8001d4c:	46c0      	nop			; (mov r8, r8)
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b002      	add	sp, #8
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001d5c:	46c0      	nop			; (mov r8, r8)
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b002      	add	sp, #8
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	000a      	movs	r2, r1
 8001d6e:	1cbb      	adds	r3, r7, #2
 8001d70:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b002      	add	sp, #8
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d84:	231e      	movs	r3, #30
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	431a      	orrs	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a8d      	ldr	r2, [pc, #564]	; (8001fe0 <UART_SetConfig+0x264>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	0019      	movs	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	4a88      	ldr	r2, [pc, #544]	; (8001fe4 <UART_SetConfig+0x268>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4a7f      	ldr	r2, [pc, #508]	; (8001fe8 <UART_SetConfig+0x26c>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a7b      	ldr	r2, [pc, #492]	; (8001fec <UART_SetConfig+0x270>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d127      	bne.n	8001e52 <UART_SetConfig+0xd6>
 8001e02:	4b7b      	ldr	r3, [pc, #492]	; (8001ff0 <UART_SetConfig+0x274>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	2203      	movs	r2, #3
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d00d      	beq.n	8001e2a <UART_SetConfig+0xae>
 8001e0e:	d81b      	bhi.n	8001e48 <UART_SetConfig+0xcc>
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d014      	beq.n	8001e3e <UART_SetConfig+0xc2>
 8001e14:	d818      	bhi.n	8001e48 <UART_SetConfig+0xcc>
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d002      	beq.n	8001e20 <UART_SetConfig+0xa4>
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d00a      	beq.n	8001e34 <UART_SetConfig+0xb8>
 8001e1e:	e013      	b.n	8001e48 <UART_SetConfig+0xcc>
 8001e20:	231f      	movs	r3, #31
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	e021      	b.n	8001e6e <UART_SetConfig+0xf2>
 8001e2a:	231f      	movs	r3, #31
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	2202      	movs	r2, #2
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e01c      	b.n	8001e6e <UART_SetConfig+0xf2>
 8001e34:	231f      	movs	r3, #31
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	2204      	movs	r2, #4
 8001e3a:	701a      	strb	r2, [r3, #0]
 8001e3c:	e017      	b.n	8001e6e <UART_SetConfig+0xf2>
 8001e3e:	231f      	movs	r3, #31
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	2208      	movs	r2, #8
 8001e44:	701a      	strb	r2, [r3, #0]
 8001e46:	e012      	b.n	8001e6e <UART_SetConfig+0xf2>
 8001e48:	231f      	movs	r3, #31
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	2210      	movs	r2, #16
 8001e4e:	701a      	strb	r2, [r3, #0]
 8001e50:	e00d      	b.n	8001e6e <UART_SetConfig+0xf2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a67      	ldr	r2, [pc, #412]	; (8001ff4 <UART_SetConfig+0x278>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d104      	bne.n	8001e66 <UART_SetConfig+0xea>
 8001e5c:	231f      	movs	r3, #31
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
 8001e64:	e003      	b.n	8001e6e <UART_SetConfig+0xf2>
 8001e66:	231f      	movs	r3, #31
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	2210      	movs	r2, #16
 8001e6c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69da      	ldr	r2, [r3, #28]
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	021b      	lsls	r3, r3, #8
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d15d      	bne.n	8001f36 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8001e7a:	231f      	movs	r3, #31
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d015      	beq.n	8001eb0 <UART_SetConfig+0x134>
 8001e84:	dc18      	bgt.n	8001eb8 <UART_SetConfig+0x13c>
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d00d      	beq.n	8001ea6 <UART_SetConfig+0x12a>
 8001e8a:	dc15      	bgt.n	8001eb8 <UART_SetConfig+0x13c>
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <UART_SetConfig+0x11a>
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d005      	beq.n	8001ea0 <UART_SetConfig+0x124>
 8001e94:	e010      	b.n	8001eb8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e96:	f7ff fdd9 	bl	8001a4c <HAL_RCC_GetPCLK1Freq>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	61bb      	str	r3, [r7, #24]
        break;
 8001e9e:	e012      	b.n	8001ec6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ea0:	4b55      	ldr	r3, [pc, #340]	; (8001ff8 <UART_SetConfig+0x27c>)
 8001ea2:	61bb      	str	r3, [r7, #24]
        break;
 8001ea4:	e00f      	b.n	8001ec6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ea6:	f7ff fd63 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	61bb      	str	r3, [r7, #24]
        break;
 8001eae:	e00a      	b.n	8001ec6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	61bb      	str	r3, [r7, #24]
        break;
 8001eb6:	e006      	b.n	8001ec6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001ebc:	231e      	movs	r3, #30
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
        break;
 8001ec4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d100      	bne.n	8001ece <UART_SetConfig+0x152>
 8001ecc:	e07b      	b.n	8001fc6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	005a      	lsls	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	085b      	lsrs	r3, r3, #1
 8001ed8:	18d2      	adds	r2, r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	0019      	movs	r1, r3
 8001ee0:	0010      	movs	r0, r2
 8001ee2:	f7fe f925 	bl	8000130 <__udivsi3>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	d91c      	bls.n	8001f2c <UART_SetConfig+0x1b0>
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	025b      	lsls	r3, r3, #9
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d217      	bcs.n	8001f2c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	200e      	movs	r0, #14
 8001f02:	183b      	adds	r3, r7, r0
 8001f04:	210f      	movs	r1, #15
 8001f06:	438a      	bics	r2, r1
 8001f08:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	085b      	lsrs	r3, r3, #1
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	2207      	movs	r2, #7
 8001f12:	4013      	ands	r3, r2
 8001f14:	b299      	uxth	r1, r3
 8001f16:	183b      	adds	r3, r7, r0
 8001f18:	183a      	adds	r2, r7, r0
 8001f1a:	8812      	ldrh	r2, [r2, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	183a      	adds	r2, r7, r0
 8001f26:	8812      	ldrh	r2, [r2, #0]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	e04c      	b.n	8001fc6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001f2c:	231e      	movs	r3, #30
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	e047      	b.n	8001fc6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001f36:	231f      	movs	r3, #31
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d015      	beq.n	8001f6c <UART_SetConfig+0x1f0>
 8001f40:	dc18      	bgt.n	8001f74 <UART_SetConfig+0x1f8>
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d00d      	beq.n	8001f62 <UART_SetConfig+0x1e6>
 8001f46:	dc15      	bgt.n	8001f74 <UART_SetConfig+0x1f8>
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <UART_SetConfig+0x1d6>
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d005      	beq.n	8001f5c <UART_SetConfig+0x1e0>
 8001f50:	e010      	b.n	8001f74 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f52:	f7ff fd7b 	bl	8001a4c <HAL_RCC_GetPCLK1Freq>
 8001f56:	0003      	movs	r3, r0
 8001f58:	61bb      	str	r3, [r7, #24]
        break;
 8001f5a:	e012      	b.n	8001f82 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f5c:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <UART_SetConfig+0x27c>)
 8001f5e:	61bb      	str	r3, [r7, #24]
        break;
 8001f60:	e00f      	b.n	8001f82 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f62:	f7ff fd05 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 8001f66:	0003      	movs	r3, r0
 8001f68:	61bb      	str	r3, [r7, #24]
        break;
 8001f6a:	e00a      	b.n	8001f82 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	61bb      	str	r3, [r7, #24]
        break;
 8001f72:	e006      	b.n	8001f82 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001f78:	231e      	movs	r3, #30
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]
        break;
 8001f80:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01e      	beq.n	8001fc6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	085a      	lsrs	r2, r3, #1
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	18d2      	adds	r2, r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	0019      	movs	r1, r3
 8001f98:	0010      	movs	r0, r2
 8001f9a:	f7fe f8c9 	bl	8000130 <__udivsi3>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	2b0f      	cmp	r3, #15
 8001fa8:	d909      	bls.n	8001fbe <UART_SetConfig+0x242>
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	025b      	lsls	r3, r3, #9
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d204      	bcs.n	8001fbe <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	e003      	b.n	8001fc6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001fbe:	231e      	movs	r3, #30
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001fd2:	231e      	movs	r3, #30
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	781b      	ldrb	r3, [r3, #0]
}
 8001fd8:	0018      	movs	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b008      	add	sp, #32
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	ffff69f3 	.word	0xffff69f3
 8001fe4:	ffffcfff 	.word	0xffffcfff
 8001fe8:	fffff4ff 	.word	0xfffff4ff
 8001fec:	40013800 	.word	0x40013800
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40004400 	.word	0x40004400
 8001ff8:	007a1200 	.word	0x007a1200

08001ffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	2201      	movs	r2, #1
 800200a:	4013      	ands	r3, r2
 800200c:	d00b      	beq.n	8002026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a4a      	ldr	r2, [pc, #296]	; (8002140 <UART_AdvFeatureConfig+0x144>)
 8002016:	4013      	ands	r3, r2
 8002018:	0019      	movs	r1, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	2202      	movs	r2, #2
 800202c:	4013      	ands	r3, r2
 800202e:	d00b      	beq.n	8002048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4a43      	ldr	r2, [pc, #268]	; (8002144 <UART_AdvFeatureConfig+0x148>)
 8002038:	4013      	ands	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	2204      	movs	r2, #4
 800204e:	4013      	ands	r3, r2
 8002050:	d00b      	beq.n	800206a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4a3b      	ldr	r2, [pc, #236]	; (8002148 <UART_AdvFeatureConfig+0x14c>)
 800205a:	4013      	ands	r3, r2
 800205c:	0019      	movs	r1, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	2208      	movs	r2, #8
 8002070:	4013      	ands	r3, r2
 8002072:	d00b      	beq.n	800208c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4a34      	ldr	r2, [pc, #208]	; (800214c <UART_AdvFeatureConfig+0x150>)
 800207c:	4013      	ands	r3, r2
 800207e:	0019      	movs	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	2210      	movs	r2, #16
 8002092:	4013      	ands	r3, r2
 8002094:	d00b      	beq.n	80020ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4a2c      	ldr	r2, [pc, #176]	; (8002150 <UART_AdvFeatureConfig+0x154>)
 800209e:	4013      	ands	r3, r2
 80020a0:	0019      	movs	r1, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	2220      	movs	r2, #32
 80020b4:	4013      	ands	r3, r2
 80020b6:	d00b      	beq.n	80020d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	4a25      	ldr	r2, [pc, #148]	; (8002154 <UART_AdvFeatureConfig+0x158>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	0019      	movs	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	2240      	movs	r2, #64	; 0x40
 80020d6:	4013      	ands	r3, r2
 80020d8:	d01d      	beq.n	8002116 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4a1d      	ldr	r2, [pc, #116]	; (8002158 <UART_AdvFeatureConfig+0x15c>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	0019      	movs	r1, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	035b      	lsls	r3, r3, #13
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d10b      	bne.n	8002116 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4a15      	ldr	r2, [pc, #84]	; (800215c <UART_AdvFeatureConfig+0x160>)
 8002106:	4013      	ands	r3, r2
 8002108:	0019      	movs	r1, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	2280      	movs	r2, #128	; 0x80
 800211c:	4013      	ands	r3, r2
 800211e:	d00b      	beq.n	8002138 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <UART_AdvFeatureConfig+0x164>)
 8002128:	4013      	ands	r3, r2
 800212a:	0019      	movs	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	605a      	str	r2, [r3, #4]
  }
}
 8002138:	46c0      	nop			; (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	b002      	add	sp, #8
 800213e:	bd80      	pop	{r7, pc}
 8002140:	fffdffff 	.word	0xfffdffff
 8002144:	fffeffff 	.word	0xfffeffff
 8002148:	fffbffff 	.word	0xfffbffff
 800214c:	ffff7fff 	.word	0xffff7fff
 8002150:	ffffefff 	.word	0xffffefff
 8002154:	ffffdfff 	.word	0xffffdfff
 8002158:	ffefffff 	.word	0xffefffff
 800215c:	ff9fffff 	.word	0xff9fffff
 8002160:	fff7ffff 	.word	0xfff7ffff

08002164 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af02      	add	r7, sp, #8
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2280      	movs	r2, #128	; 0x80
 8002170:	2100      	movs	r1, #0
 8002172:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002174:	f7fe fc06 	bl	8000984 <HAL_GetTick>
 8002178:	0003      	movs	r3, r0
 800217a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2208      	movs	r2, #8
 8002184:	4013      	ands	r3, r2
 8002186:	2b08      	cmp	r3, #8
 8002188:	d10c      	bne.n	80021a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2280      	movs	r2, #128	; 0x80
 800218e:	0391      	lsls	r1, r2, #14
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <UART_CheckIdleState+0x8c>)
 8002194:	9200      	str	r2, [sp, #0]
 8002196:	2200      	movs	r2, #0
 8002198:	f000 f82c 	bl	80021f4 <UART_WaitOnFlagUntilTimeout>
 800219c:	1e03      	subs	r3, r0, #0
 800219e:	d001      	beq.n	80021a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e021      	b.n	80021e8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2204      	movs	r2, #4
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d10c      	bne.n	80021cc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	03d1      	lsls	r1, r2, #15
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4a0d      	ldr	r2, [pc, #52]	; (80021f0 <UART_CheckIdleState+0x8c>)
 80021bc:	9200      	str	r2, [sp, #0]
 80021be:	2200      	movs	r2, #0
 80021c0:	f000 f818 	bl	80021f4 <UART_WaitOnFlagUntilTimeout>
 80021c4:	1e03      	subs	r3, r0, #0
 80021c6:	d001      	beq.n	80021cc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e00d      	b.n	80021e8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2220      	movs	r2, #32
 80021d0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2220      	movs	r2, #32
 80021d6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2274      	movs	r2, #116	; 0x74
 80021e2:	2100      	movs	r1, #0
 80021e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	0018      	movs	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b004      	add	sp, #16
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	01ffffff 	.word	0x01ffffff

080021f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b094      	sub	sp, #80	; 0x50
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	1dfb      	adds	r3, r7, #7
 8002202:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002204:	e0a3      	b.n	800234e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002208:	3301      	adds	r3, #1
 800220a:	d100      	bne.n	800220e <UART_WaitOnFlagUntilTimeout+0x1a>
 800220c:	e09f      	b.n	800234e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220e:	f7fe fbb9 	bl	8000984 <HAL_GetTick>
 8002212:	0002      	movs	r2, r0
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800221a:	429a      	cmp	r2, r3
 800221c:	d302      	bcc.n	8002224 <UART_WaitOnFlagUntilTimeout+0x30>
 800221e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002220:	2b00      	cmp	r3, #0
 8002222:	d13d      	bne.n	80022a0 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002224:	f3ef 8310 	mrs	r3, PRIMASK
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800222c:	647b      	str	r3, [r7, #68]	; 0x44
 800222e:	2301      	movs	r3, #1
 8002230:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002234:	f383 8810 	msr	PRIMASK, r3
}
 8002238:	46c0      	nop			; (mov r8, r8)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	494c      	ldr	r1, [pc, #304]	; (8002378 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002246:	400a      	ands	r2, r1
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800224c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800224e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002250:	f383 8810 	msr	PRIMASK, r3
}
 8002254:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002256:	f3ef 8310 	mrs	r3, PRIMASK
 800225a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800225c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800225e:	643b      	str	r3, [r7, #64]	; 0x40
 8002260:	2301      	movs	r3, #1
 8002262:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002266:	f383 8810 	msr	PRIMASK, r3
}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2101      	movs	r1, #1
 8002278:	438a      	bics	r2, r1
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800227e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002282:	f383 8810 	msr	PRIMASK, r3
}
 8002286:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2220      	movs	r2, #32
 800228c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2220      	movs	r2, #32
 8002292:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2274      	movs	r2, #116	; 0x74
 8002298:	2100      	movs	r1, #0
 800229a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e067      	b.n	8002370 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2204      	movs	r2, #4
 80022a8:	4013      	ands	r3, r2
 80022aa:	d050      	beq.n	800234e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	69da      	ldr	r2, [r3, #28]
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	401a      	ands	r2, r3
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	429a      	cmp	r2, r3
 80022be:	d146      	bne.n	800234e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2280      	movs	r2, #128	; 0x80
 80022c6:	0112      	lsls	r2, r2, #4
 80022c8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ca:	f3ef 8310 	mrs	r3, PRIMASK
 80022ce:	613b      	str	r3, [r7, #16]
  return(result);
 80022d0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022d4:	2301      	movs	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f383 8810 	msr	PRIMASK, r3
}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4923      	ldr	r1, [pc, #140]	; (8002378 <UART_WaitOnFlagUntilTimeout+0x184>)
 80022ec:	400a      	ands	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	f383 8810 	msr	PRIMASK, r3
}
 80022fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002300:	61fb      	str	r3, [r7, #28]
  return(result);
 8002302:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002304:	64bb      	str	r3, [r7, #72]	; 0x48
 8002306:	2301      	movs	r3, #1
 8002308:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	f383 8810 	msr	PRIMASK, r3
}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2101      	movs	r1, #1
 800231e:	438a      	bics	r2, r1
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	f383 8810 	msr	PRIMASK, r3
}
 800232c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2220      	movs	r2, #32
 8002332:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2280      	movs	r2, #128	; 0x80
 800233e:	2120      	movs	r1, #32
 8002340:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2274      	movs	r2, #116	; 0x74
 8002346:	2100      	movs	r1, #0
 8002348:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e010      	b.n	8002370 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	4013      	ands	r3, r2
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	425a      	negs	r2, r3
 800235e:	4153      	adcs	r3, r2
 8002360:	b2db      	uxtb	r3, r3
 8002362:	001a      	movs	r2, r3
 8002364:	1dfb      	adds	r3, r7, #7
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d100      	bne.n	800236e <UART_WaitOnFlagUntilTimeout+0x17a>
 800236c:	e74b      	b.n	8002206 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	0018      	movs	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	b014      	add	sp, #80	; 0x50
 8002376:	bd80      	pop	{r7, pc}
 8002378:	fffffe5f 	.word	0xfffffe5f

0800237c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b090      	sub	sp, #64	; 0x40
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	1dbb      	adds	r3, r7, #6
 8002388:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	1dba      	adds	r2, r7, #6
 8002394:	2158      	movs	r1, #88	; 0x58
 8002396:	8812      	ldrh	r2, [r2, #0]
 8002398:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	2100      	movs	r1, #0
 80023a0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2222      	movs	r2, #34	; 0x22
 80023a6:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d02b      	beq.n	8002408 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b4:	4a3f      	ldr	r2, [pc, #252]	; (80024b4 <UART_Start_Receive_DMA+0x138>)
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	4a3e      	ldr	r2, [pc, #248]	; (80024b8 <UART_Start_Receive_DMA+0x13c>)
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c4:	4a3d      	ldr	r2, [pc, #244]	; (80024bc <UART_Start_Receive_DMA+0x140>)
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023cc:	2200      	movs	r2, #0
 80023ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	3324      	adds	r3, #36	; 0x24
 80023da:	0019      	movs	r1, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e0:	001a      	movs	r2, r3
 80023e2:	1dbb      	adds	r3, r7, #6
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	f7fe fbfd 	bl	8000be4 <HAL_DMA_Start_IT>
 80023ea:	1e03      	subs	r3, r0, #0
 80023ec:	d00c      	beq.n	8002408 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2280      	movs	r2, #128	; 0x80
 80023f2:	2110      	movs	r1, #16
 80023f4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2274      	movs	r2, #116	; 0x74
 80023fa:	2100      	movs	r1, #0
 80023fc:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2220      	movs	r2, #32
 8002402:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e050      	b.n	80024aa <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2274      	movs	r2, #116	; 0x74
 800240c:	2100      	movs	r1, #0
 800240e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002410:	f3ef 8310 	mrs	r3, PRIMASK
 8002414:	613b      	str	r3, [r7, #16]
  return(result);
 8002416:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002418:	63fb      	str	r3, [r7, #60]	; 0x3c
 800241a:	2301      	movs	r3, #1
 800241c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f383 8810 	msr	PRIMASK, r3
}
 8002424:	46c0      	nop			; (mov r8, r8)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2180      	movs	r1, #128	; 0x80
 8002432:	0049      	lsls	r1, r1, #1
 8002434:	430a      	orrs	r2, r1
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800243a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	f383 8810 	msr	PRIMASK, r3
}
 8002442:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002444:	f3ef 8310 	mrs	r3, PRIMASK
 8002448:	61fb      	str	r3, [r7, #28]
  return(result);
 800244a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800244c:	63bb      	str	r3, [r7, #56]	; 0x38
 800244e:	2301      	movs	r3, #1
 8002450:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	f383 8810 	msr	PRIMASK, r3
}
 8002458:	46c0      	nop			; (mov r8, r8)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2101      	movs	r1, #1
 8002466:	430a      	orrs	r2, r1
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	f383 8810 	msr	PRIMASK, r3
}
 8002474:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002476:	f3ef 8310 	mrs	r3, PRIMASK
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800247c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800247e:	637b      	str	r3, [r7, #52]	; 0x34
 8002480:	2301      	movs	r3, #1
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002486:	f383 8810 	msr	PRIMASK, r3
}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2140      	movs	r1, #64	; 0x40
 8002498:	430a      	orrs	r2, r1
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800249e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a2:	f383 8810 	msr	PRIMASK, r3
}
 80024a6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	0018      	movs	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b010      	add	sp, #64	; 0x40
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	080025cd 	.word	0x080025cd
 80024b8:	080026f1 	.word	0x080026f1
 80024bc:	0800272d 	.word	0x0800272d

080024c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024c8:	f3ef 8310 	mrs	r3, PRIMASK
 80024cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80024ce:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	2301      	movs	r3, #1
 80024d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f383 8810 	msr	PRIMASK, r3
}
 80024dc:	46c0      	nop			; (mov r8, r8)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	21c0      	movs	r1, #192	; 0xc0
 80024ea:	438a      	bics	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f383 8810 	msr	PRIMASK, r3
}
 80024f8:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2220      	movs	r2, #32
 80024fe:	679a      	str	r2, [r3, #120]	; 0x78
}
 8002500:	46c0      	nop			; (mov r8, r8)
 8002502:	46bd      	mov	sp, r7
 8002504:	b006      	add	sp, #24
 8002506:	bd80      	pop	{r7, pc}

08002508 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08e      	sub	sp, #56	; 0x38
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002510:	f3ef 8310 	mrs	r3, PRIMASK
 8002514:	617b      	str	r3, [r7, #20]
  return(result);
 8002516:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002518:	637b      	str	r3, [r7, #52]	; 0x34
 800251a:	2301      	movs	r3, #1
 800251c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	f383 8810 	msr	PRIMASK, r3
}
 8002524:	46c0      	nop			; (mov r8, r8)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4925      	ldr	r1, [pc, #148]	; (80025c8 <UART_EndRxTransfer+0xc0>)
 8002532:	400a      	ands	r2, r1
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002538:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f383 8810 	msr	PRIMASK, r3
}
 8002540:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002542:	f3ef 8310 	mrs	r3, PRIMASK
 8002546:	623b      	str	r3, [r7, #32]
  return(result);
 8002548:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800254a:	633b      	str	r3, [r7, #48]	; 0x30
 800254c:	2301      	movs	r3, #1
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	f383 8810 	msr	PRIMASK, r3
}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2101      	movs	r1, #1
 8002564:	438a      	bics	r2, r1
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800256c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256e:	f383 8810 	msr	PRIMASK, r3
}
 8002572:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002578:	2b01      	cmp	r3, #1
 800257a:	d118      	bne.n	80025ae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800257c:	f3ef 8310 	mrs	r3, PRIMASK
 8002580:	60bb      	str	r3, [r7, #8]
  return(result);
 8002582:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002586:	2301      	movs	r3, #1
 8002588:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f383 8810 	msr	PRIMASK, r3
}
 8002590:	46c0      	nop			; (mov r8, r8)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2110      	movs	r1, #16
 800259e:	438a      	bics	r2, r1
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f383 8810 	msr	PRIMASK, r3
}
 80025ac:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2220      	movs	r2, #32
 80025b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	665a      	str	r2, [r3, #100]	; 0x64
}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b00e      	add	sp, #56	; 0x38
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	fffffedf 	.word	0xfffffedf

080025cc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b094      	sub	sp, #80	; 0x50
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d06e      	beq.n	80026c0 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 80025e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e4:	225a      	movs	r2, #90	; 0x5a
 80025e6:	2100      	movs	r1, #0
 80025e8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ea:	f3ef 8310 	mrs	r3, PRIMASK
 80025ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80025f0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80025f4:	2301      	movs	r3, #1
 80025f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f383 8810 	msr	PRIMASK, r3
}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4938      	ldr	r1, [pc, #224]	; (80026ec <UART_DMAReceiveCplt+0x120>)
 800260c:	400a      	ands	r2, r1
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002612:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	f383 8810 	msr	PRIMASK, r3
}
 800261a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800261c:	f3ef 8310 	mrs	r3, PRIMASK
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002624:	647b      	str	r3, [r7, #68]	; 0x44
 8002626:	2301      	movs	r3, #1
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262c:	f383 8810 	msr	PRIMASK, r3
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2101      	movs	r1, #1
 800263e:	438a      	bics	r2, r1
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002648:	f383 8810 	msr	PRIMASK, r3
}
 800264c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800264e:	f3ef 8310 	mrs	r3, PRIMASK
 8002652:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002654:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002656:	643b      	str	r3, [r7, #64]	; 0x40
 8002658:	2301      	movs	r3, #1
 800265a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800265c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265e:	f383 8810 	msr	PRIMASK, r3
}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2140      	movs	r1, #64	; 0x40
 8002670:	438a      	bics	r2, r1
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002676:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267a:	f383 8810 	msr	PRIMASK, r3
}
 800267e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002682:	2220      	movs	r2, #32
 8002684:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800268a:	2b01      	cmp	r3, #1
 800268c:	d118      	bne.n	80026c0 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800268e:	f3ef 8310 	mrs	r3, PRIMASK
 8002692:	60fb      	str	r3, [r7, #12]
  return(result);
 8002694:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002698:	2301      	movs	r3, #1
 800269a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f383 8810 	msr	PRIMASK, r3
}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2110      	movs	r1, #16
 80026b0:	438a      	bics	r2, r1
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f383 8810 	msr	PRIMASK, r3
}
 80026be:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d108      	bne.n	80026da <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ca:	2258      	movs	r2, #88	; 0x58
 80026cc:	5a9a      	ldrh	r2, [r3, r2]
 80026ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d0:	0011      	movs	r1, r2
 80026d2:	0018      	movs	r0, r3
 80026d4:	f7ff fb46 	bl	8001d64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80026d8:	e003      	b.n	80026e2 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 80026da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026dc:	0018      	movs	r0, r3
 80026de:	f7ff fb29 	bl	8001d34 <HAL_UART_RxCpltCallback>
}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b014      	add	sp, #80	; 0x50
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	fffffeff 	.word	0xfffffeff

080026f0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002702:	2b01      	cmp	r3, #1
 8002704:	d10a      	bne.n	800271c <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2258      	movs	r2, #88	; 0x58
 800270a:	5a9b      	ldrh	r3, [r3, r2]
 800270c:	085b      	lsrs	r3, r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	0011      	movs	r1, r2
 8002714:	0018      	movs	r0, r3
 8002716:	f7ff fb25 	bl	8001d64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800271a:	e003      	b.n	8002724 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	0018      	movs	r0, r3
 8002720:	f7ff fb10 	bl	8001d44 <HAL_UART_RxHalfCpltCallback>
}
 8002724:	46c0      	nop			; (mov r8, r8)
 8002726:	46bd      	mov	sp, r7
 8002728:	b004      	add	sp, #16
 800272a:	bd80      	pop	{r7, pc}

0800272c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800273e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002744:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2280      	movs	r2, #128	; 0x80
 800274e:	4013      	ands	r3, r2
 8002750:	2b80      	cmp	r3, #128	; 0x80
 8002752:	d10a      	bne.n	800276a <UART_DMAError+0x3e>
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	2b21      	cmp	r3, #33	; 0x21
 8002758:	d107      	bne.n	800276a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2252      	movs	r2, #82	; 0x52
 800275e:	2100      	movs	r1, #0
 8002760:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	0018      	movs	r0, r3
 8002766:	f7ff feab 	bl	80024c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2240      	movs	r2, #64	; 0x40
 8002772:	4013      	ands	r3, r2
 8002774:	2b40      	cmp	r3, #64	; 0x40
 8002776:	d10a      	bne.n	800278e <UART_DMAError+0x62>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b22      	cmp	r3, #34	; 0x22
 800277c:	d107      	bne.n	800278e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	225a      	movs	r2, #90	; 0x5a
 8002782:	2100      	movs	r1, #0
 8002784:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	0018      	movs	r0, r3
 800278a:	f7ff febd 	bl	8002508 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2280      	movs	r2, #128	; 0x80
 8002792:	589b      	ldr	r3, [r3, r2]
 8002794:	2210      	movs	r2, #16
 8002796:	431a      	orrs	r2, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2180      	movs	r1, #128	; 0x80
 800279c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	0018      	movs	r0, r3
 80027a2:	f7ff fad7 	bl	8001d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b006      	add	sp, #24
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <std>:
 80027b0:	2300      	movs	r3, #0
 80027b2:	b510      	push	{r4, lr}
 80027b4:	0004      	movs	r4, r0
 80027b6:	6003      	str	r3, [r0, #0]
 80027b8:	6043      	str	r3, [r0, #4]
 80027ba:	6083      	str	r3, [r0, #8]
 80027bc:	8181      	strh	r1, [r0, #12]
 80027be:	6643      	str	r3, [r0, #100]	; 0x64
 80027c0:	0019      	movs	r1, r3
 80027c2:	81c2      	strh	r2, [r0, #14]
 80027c4:	6103      	str	r3, [r0, #16]
 80027c6:	6143      	str	r3, [r0, #20]
 80027c8:	6183      	str	r3, [r0, #24]
 80027ca:	2208      	movs	r2, #8
 80027cc:	305c      	adds	r0, #92	; 0x5c
 80027ce:	f000 f9f3 	bl	8002bb8 <memset>
 80027d2:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <std+0x38>)
 80027d4:	6224      	str	r4, [r4, #32]
 80027d6:	6263      	str	r3, [r4, #36]	; 0x24
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <std+0x3c>)
 80027da:	62a3      	str	r3, [r4, #40]	; 0x28
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <std+0x40>)
 80027de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027e0:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <std+0x44>)
 80027e2:	6323      	str	r3, [r4, #48]	; 0x30
 80027e4:	bd10      	pop	{r4, pc}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	080029d5 	.word	0x080029d5
 80027ec:	080029fd 	.word	0x080029fd
 80027f0:	08002a35 	.word	0x08002a35
 80027f4:	08002a61 	.word	0x08002a61

080027f8 <stdio_exit_handler>:
 80027f8:	b510      	push	{r4, lr}
 80027fa:	4a03      	ldr	r2, [pc, #12]	; (8002808 <stdio_exit_handler+0x10>)
 80027fc:	4903      	ldr	r1, [pc, #12]	; (800280c <stdio_exit_handler+0x14>)
 80027fe:	4804      	ldr	r0, [pc, #16]	; (8002810 <stdio_exit_handler+0x18>)
 8002800:	f000 f86c 	bl	80028dc <_fwalk_sglue>
 8002804:	bd10      	pop	{r4, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	2000000c 	.word	0x2000000c
 800280c:	0800366d 	.word	0x0800366d
 8002810:	20000018 	.word	0x20000018

08002814 <cleanup_stdio>:
 8002814:	6841      	ldr	r1, [r0, #4]
 8002816:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <cleanup_stdio+0x30>)
 8002818:	b510      	push	{r4, lr}
 800281a:	0004      	movs	r4, r0
 800281c:	4299      	cmp	r1, r3
 800281e:	d001      	beq.n	8002824 <cleanup_stdio+0x10>
 8002820:	f000 ff24 	bl	800366c <_fflush_r>
 8002824:	68a1      	ldr	r1, [r4, #8]
 8002826:	4b08      	ldr	r3, [pc, #32]	; (8002848 <cleanup_stdio+0x34>)
 8002828:	4299      	cmp	r1, r3
 800282a:	d002      	beq.n	8002832 <cleanup_stdio+0x1e>
 800282c:	0020      	movs	r0, r4
 800282e:	f000 ff1d 	bl	800366c <_fflush_r>
 8002832:	68e1      	ldr	r1, [r4, #12]
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <cleanup_stdio+0x38>)
 8002836:	4299      	cmp	r1, r3
 8002838:	d002      	beq.n	8002840 <cleanup_stdio+0x2c>
 800283a:	0020      	movs	r0, r4
 800283c:	f000 ff16 	bl	800366c <_fflush_r>
 8002840:	bd10      	pop	{r4, pc}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	2000029c 	.word	0x2000029c
 8002848:	20000304 	.word	0x20000304
 800284c:	2000036c 	.word	0x2000036c

08002850 <global_stdio_init.part.0>:
 8002850:	b510      	push	{r4, lr}
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <global_stdio_init.part.0+0x28>)
 8002854:	4a09      	ldr	r2, [pc, #36]	; (800287c <global_stdio_init.part.0+0x2c>)
 8002856:	2104      	movs	r1, #4
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	4809      	ldr	r0, [pc, #36]	; (8002880 <global_stdio_init.part.0+0x30>)
 800285c:	2200      	movs	r2, #0
 800285e:	f7ff ffa7 	bl	80027b0 <std>
 8002862:	2201      	movs	r2, #1
 8002864:	2109      	movs	r1, #9
 8002866:	4807      	ldr	r0, [pc, #28]	; (8002884 <global_stdio_init.part.0+0x34>)
 8002868:	f7ff ffa2 	bl	80027b0 <std>
 800286c:	2202      	movs	r2, #2
 800286e:	2112      	movs	r1, #18
 8002870:	4805      	ldr	r0, [pc, #20]	; (8002888 <global_stdio_init.part.0+0x38>)
 8002872:	f7ff ff9d 	bl	80027b0 <std>
 8002876:	bd10      	pop	{r4, pc}
 8002878:	200003d4 	.word	0x200003d4
 800287c:	080027f9 	.word	0x080027f9
 8002880:	2000029c 	.word	0x2000029c
 8002884:	20000304 	.word	0x20000304
 8002888:	2000036c 	.word	0x2000036c

0800288c <__sfp_lock_acquire>:
 800288c:	b510      	push	{r4, lr}
 800288e:	4802      	ldr	r0, [pc, #8]	; (8002898 <__sfp_lock_acquire+0xc>)
 8002890:	f000 fa76 	bl	8002d80 <__retarget_lock_acquire_recursive>
 8002894:	bd10      	pop	{r4, pc}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	200003dd 	.word	0x200003dd

0800289c <__sfp_lock_release>:
 800289c:	b510      	push	{r4, lr}
 800289e:	4802      	ldr	r0, [pc, #8]	; (80028a8 <__sfp_lock_release+0xc>)
 80028a0:	f000 fa6f 	bl	8002d82 <__retarget_lock_release_recursive>
 80028a4:	bd10      	pop	{r4, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	200003dd 	.word	0x200003dd

080028ac <__sinit>:
 80028ac:	b510      	push	{r4, lr}
 80028ae:	0004      	movs	r4, r0
 80028b0:	f7ff ffec 	bl	800288c <__sfp_lock_acquire>
 80028b4:	6a23      	ldr	r3, [r4, #32]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <__sinit+0x14>
 80028ba:	f7ff ffef 	bl	800289c <__sfp_lock_release>
 80028be:	bd10      	pop	{r4, pc}
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <__sinit+0x28>)
 80028c2:	6223      	str	r3, [r4, #32]
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <__sinit+0x2c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f6      	bne.n	80028ba <__sinit+0xe>
 80028cc:	f7ff ffc0 	bl	8002850 <global_stdio_init.part.0>
 80028d0:	e7f3      	b.n	80028ba <__sinit+0xe>
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	08002815 	.word	0x08002815
 80028d8:	200003d4 	.word	0x200003d4

080028dc <_fwalk_sglue>:
 80028dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028de:	0014      	movs	r4, r2
 80028e0:	2600      	movs	r6, #0
 80028e2:	9000      	str	r0, [sp, #0]
 80028e4:	9101      	str	r1, [sp, #4]
 80028e6:	68a5      	ldr	r5, [r4, #8]
 80028e8:	6867      	ldr	r7, [r4, #4]
 80028ea:	3f01      	subs	r7, #1
 80028ec:	d504      	bpl.n	80028f8 <_fwalk_sglue+0x1c>
 80028ee:	6824      	ldr	r4, [r4, #0]
 80028f0:	2c00      	cmp	r4, #0
 80028f2:	d1f8      	bne.n	80028e6 <_fwalk_sglue+0xa>
 80028f4:	0030      	movs	r0, r6
 80028f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80028f8:	89ab      	ldrh	r3, [r5, #12]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d908      	bls.n	8002910 <_fwalk_sglue+0x34>
 80028fe:	220e      	movs	r2, #14
 8002900:	5eab      	ldrsh	r3, [r5, r2]
 8002902:	3301      	adds	r3, #1
 8002904:	d004      	beq.n	8002910 <_fwalk_sglue+0x34>
 8002906:	0029      	movs	r1, r5
 8002908:	9800      	ldr	r0, [sp, #0]
 800290a:	9b01      	ldr	r3, [sp, #4]
 800290c:	4798      	blx	r3
 800290e:	4306      	orrs	r6, r0
 8002910:	3568      	adds	r5, #104	; 0x68
 8002912:	e7ea      	b.n	80028ea <_fwalk_sglue+0xe>

08002914 <_puts_r>:
 8002914:	6a03      	ldr	r3, [r0, #32]
 8002916:	b570      	push	{r4, r5, r6, lr}
 8002918:	0005      	movs	r5, r0
 800291a:	000e      	movs	r6, r1
 800291c:	6884      	ldr	r4, [r0, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <_puts_r+0x12>
 8002922:	f7ff ffc3 	bl	80028ac <__sinit>
 8002926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002928:	07db      	lsls	r3, r3, #31
 800292a:	d405      	bmi.n	8002938 <_puts_r+0x24>
 800292c:	89a3      	ldrh	r3, [r4, #12]
 800292e:	059b      	lsls	r3, r3, #22
 8002930:	d402      	bmi.n	8002938 <_puts_r+0x24>
 8002932:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002934:	f000 fa24 	bl	8002d80 <__retarget_lock_acquire_recursive>
 8002938:	89a3      	ldrh	r3, [r4, #12]
 800293a:	071b      	lsls	r3, r3, #28
 800293c:	d502      	bpl.n	8002944 <_puts_r+0x30>
 800293e:	6923      	ldr	r3, [r4, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d11f      	bne.n	8002984 <_puts_r+0x70>
 8002944:	0021      	movs	r1, r4
 8002946:	0028      	movs	r0, r5
 8002948:	f000 f8d2 	bl	8002af0 <__swsetup_r>
 800294c:	2800      	cmp	r0, #0
 800294e:	d019      	beq.n	8002984 <_puts_r+0x70>
 8002950:	2501      	movs	r5, #1
 8002952:	426d      	negs	r5, r5
 8002954:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002956:	07db      	lsls	r3, r3, #31
 8002958:	d405      	bmi.n	8002966 <_puts_r+0x52>
 800295a:	89a3      	ldrh	r3, [r4, #12]
 800295c:	059b      	lsls	r3, r3, #22
 800295e:	d402      	bmi.n	8002966 <_puts_r+0x52>
 8002960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002962:	f000 fa0e 	bl	8002d82 <__retarget_lock_release_recursive>
 8002966:	0028      	movs	r0, r5
 8002968:	bd70      	pop	{r4, r5, r6, pc}
 800296a:	3601      	adds	r6, #1
 800296c:	60a3      	str	r3, [r4, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	da04      	bge.n	800297c <_puts_r+0x68>
 8002972:	69a2      	ldr	r2, [r4, #24]
 8002974:	429a      	cmp	r2, r3
 8002976:	dc16      	bgt.n	80029a6 <_puts_r+0x92>
 8002978:	290a      	cmp	r1, #10
 800297a:	d014      	beq.n	80029a6 <_puts_r+0x92>
 800297c:	6823      	ldr	r3, [r4, #0]
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	6022      	str	r2, [r4, #0]
 8002982:	7019      	strb	r1, [r3, #0]
 8002984:	68a3      	ldr	r3, [r4, #8]
 8002986:	7831      	ldrb	r1, [r6, #0]
 8002988:	3b01      	subs	r3, #1
 800298a:	2900      	cmp	r1, #0
 800298c:	d1ed      	bne.n	800296a <_puts_r+0x56>
 800298e:	60a3      	str	r3, [r4, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	da0f      	bge.n	80029b4 <_puts_r+0xa0>
 8002994:	0028      	movs	r0, r5
 8002996:	0022      	movs	r2, r4
 8002998:	310a      	adds	r1, #10
 800299a:	f000 f867 	bl	8002a6c <__swbuf_r>
 800299e:	250a      	movs	r5, #10
 80029a0:	3001      	adds	r0, #1
 80029a2:	d1d7      	bne.n	8002954 <_puts_r+0x40>
 80029a4:	e7d4      	b.n	8002950 <_puts_r+0x3c>
 80029a6:	0022      	movs	r2, r4
 80029a8:	0028      	movs	r0, r5
 80029aa:	f000 f85f 	bl	8002a6c <__swbuf_r>
 80029ae:	3001      	adds	r0, #1
 80029b0:	d1e8      	bne.n	8002984 <_puts_r+0x70>
 80029b2:	e7cd      	b.n	8002950 <_puts_r+0x3c>
 80029b4:	250a      	movs	r5, #10
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	6022      	str	r2, [r4, #0]
 80029bc:	701d      	strb	r5, [r3, #0]
 80029be:	e7c9      	b.n	8002954 <_puts_r+0x40>

080029c0 <puts>:
 80029c0:	b510      	push	{r4, lr}
 80029c2:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <puts+0x10>)
 80029c4:	0001      	movs	r1, r0
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	f7ff ffa4 	bl	8002914 <_puts_r>
 80029cc:	bd10      	pop	{r4, pc}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	20000064 	.word	0x20000064

080029d4 <__sread>:
 80029d4:	b570      	push	{r4, r5, r6, lr}
 80029d6:	000c      	movs	r4, r1
 80029d8:	250e      	movs	r5, #14
 80029da:	5f49      	ldrsh	r1, [r1, r5]
 80029dc:	f000 f97e 	bl	8002cdc <_read_r>
 80029e0:	2800      	cmp	r0, #0
 80029e2:	db03      	blt.n	80029ec <__sread+0x18>
 80029e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80029e6:	181b      	adds	r3, r3, r0
 80029e8:	6563      	str	r3, [r4, #84]	; 0x54
 80029ea:	bd70      	pop	{r4, r5, r6, pc}
 80029ec:	89a3      	ldrh	r3, [r4, #12]
 80029ee:	4a02      	ldr	r2, [pc, #8]	; (80029f8 <__sread+0x24>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	81a3      	strh	r3, [r4, #12]
 80029f4:	e7f9      	b.n	80029ea <__sread+0x16>
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	ffffefff 	.word	0xffffefff

080029fc <__swrite>:
 80029fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fe:	001f      	movs	r7, r3
 8002a00:	898b      	ldrh	r3, [r1, #12]
 8002a02:	0005      	movs	r5, r0
 8002a04:	000c      	movs	r4, r1
 8002a06:	0016      	movs	r6, r2
 8002a08:	05db      	lsls	r3, r3, #23
 8002a0a:	d505      	bpl.n	8002a18 <__swrite+0x1c>
 8002a0c:	230e      	movs	r3, #14
 8002a0e:	5ec9      	ldrsh	r1, [r1, r3]
 8002a10:	2200      	movs	r2, #0
 8002a12:	2302      	movs	r3, #2
 8002a14:	f000 f94e 	bl	8002cb4 <_lseek_r>
 8002a18:	89a3      	ldrh	r3, [r4, #12]
 8002a1a:	4a05      	ldr	r2, [pc, #20]	; (8002a30 <__swrite+0x34>)
 8002a1c:	0028      	movs	r0, r5
 8002a1e:	4013      	ands	r3, r2
 8002a20:	81a3      	strh	r3, [r4, #12]
 8002a22:	0032      	movs	r2, r6
 8002a24:	230e      	movs	r3, #14
 8002a26:	5ee1      	ldrsh	r1, [r4, r3]
 8002a28:	003b      	movs	r3, r7
 8002a2a:	f000 f96b 	bl	8002d04 <_write_r>
 8002a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a30:	ffffefff 	.word	0xffffefff

08002a34 <__sseek>:
 8002a34:	b570      	push	{r4, r5, r6, lr}
 8002a36:	000c      	movs	r4, r1
 8002a38:	250e      	movs	r5, #14
 8002a3a:	5f49      	ldrsh	r1, [r1, r5]
 8002a3c:	f000 f93a 	bl	8002cb4 <_lseek_r>
 8002a40:	89a3      	ldrh	r3, [r4, #12]
 8002a42:	1c42      	adds	r2, r0, #1
 8002a44:	d103      	bne.n	8002a4e <__sseek+0x1a>
 8002a46:	4a05      	ldr	r2, [pc, #20]	; (8002a5c <__sseek+0x28>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	81a3      	strh	r3, [r4, #12]
 8002a4c:	bd70      	pop	{r4, r5, r6, pc}
 8002a4e:	2280      	movs	r2, #128	; 0x80
 8002a50:	0152      	lsls	r2, r2, #5
 8002a52:	4313      	orrs	r3, r2
 8002a54:	81a3      	strh	r3, [r4, #12]
 8002a56:	6560      	str	r0, [r4, #84]	; 0x54
 8002a58:	e7f8      	b.n	8002a4c <__sseek+0x18>
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	ffffefff 	.word	0xffffefff

08002a60 <__sclose>:
 8002a60:	b510      	push	{r4, lr}
 8002a62:	230e      	movs	r3, #14
 8002a64:	5ec9      	ldrsh	r1, [r1, r3]
 8002a66:	f000 f913 	bl	8002c90 <_close_r>
 8002a6a:	bd10      	pop	{r4, pc}

08002a6c <__swbuf_r>:
 8002a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a6e:	0006      	movs	r6, r0
 8002a70:	000d      	movs	r5, r1
 8002a72:	0014      	movs	r4, r2
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d004      	beq.n	8002a82 <__swbuf_r+0x16>
 8002a78:	6a03      	ldr	r3, [r0, #32]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <__swbuf_r+0x16>
 8002a7e:	f7ff ff15 	bl	80028ac <__sinit>
 8002a82:	69a3      	ldr	r3, [r4, #24]
 8002a84:	60a3      	str	r3, [r4, #8]
 8002a86:	89a3      	ldrh	r3, [r4, #12]
 8002a88:	071b      	lsls	r3, r3, #28
 8002a8a:	d528      	bpl.n	8002ade <__swbuf_r+0x72>
 8002a8c:	6923      	ldr	r3, [r4, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d025      	beq.n	8002ade <__swbuf_r+0x72>
 8002a92:	6923      	ldr	r3, [r4, #16]
 8002a94:	6820      	ldr	r0, [r4, #0]
 8002a96:	b2ef      	uxtb	r7, r5
 8002a98:	1ac0      	subs	r0, r0, r3
 8002a9a:	6963      	ldr	r3, [r4, #20]
 8002a9c:	b2ed      	uxtb	r5, r5
 8002a9e:	4283      	cmp	r3, r0
 8002aa0:	dc05      	bgt.n	8002aae <__swbuf_r+0x42>
 8002aa2:	0021      	movs	r1, r4
 8002aa4:	0030      	movs	r0, r6
 8002aa6:	f000 fde1 	bl	800366c <_fflush_r>
 8002aaa:	2800      	cmp	r0, #0
 8002aac:	d11d      	bne.n	8002aea <__swbuf_r+0x7e>
 8002aae:	68a3      	ldr	r3, [r4, #8]
 8002ab0:	3001      	adds	r0, #1
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	60a3      	str	r3, [r4, #8]
 8002ab6:	6823      	ldr	r3, [r4, #0]
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	6022      	str	r2, [r4, #0]
 8002abc:	701f      	strb	r7, [r3, #0]
 8002abe:	6963      	ldr	r3, [r4, #20]
 8002ac0:	4283      	cmp	r3, r0
 8002ac2:	d004      	beq.n	8002ace <__swbuf_r+0x62>
 8002ac4:	89a3      	ldrh	r3, [r4, #12]
 8002ac6:	07db      	lsls	r3, r3, #31
 8002ac8:	d507      	bpl.n	8002ada <__swbuf_r+0x6e>
 8002aca:	2d0a      	cmp	r5, #10
 8002acc:	d105      	bne.n	8002ada <__swbuf_r+0x6e>
 8002ace:	0021      	movs	r1, r4
 8002ad0:	0030      	movs	r0, r6
 8002ad2:	f000 fdcb 	bl	800366c <_fflush_r>
 8002ad6:	2800      	cmp	r0, #0
 8002ad8:	d107      	bne.n	8002aea <__swbuf_r+0x7e>
 8002ada:	0028      	movs	r0, r5
 8002adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ade:	0021      	movs	r1, r4
 8002ae0:	0030      	movs	r0, r6
 8002ae2:	f000 f805 	bl	8002af0 <__swsetup_r>
 8002ae6:	2800      	cmp	r0, #0
 8002ae8:	d0d3      	beq.n	8002a92 <__swbuf_r+0x26>
 8002aea:	2501      	movs	r5, #1
 8002aec:	426d      	negs	r5, r5
 8002aee:	e7f4      	b.n	8002ada <__swbuf_r+0x6e>

08002af0 <__swsetup_r>:
 8002af0:	4b30      	ldr	r3, [pc, #192]	; (8002bb4 <__swsetup_r+0xc4>)
 8002af2:	b570      	push	{r4, r5, r6, lr}
 8002af4:	0005      	movs	r5, r0
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	000c      	movs	r4, r1
 8002afa:	2800      	cmp	r0, #0
 8002afc:	d004      	beq.n	8002b08 <__swsetup_r+0x18>
 8002afe:	6a03      	ldr	r3, [r0, #32]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <__swsetup_r+0x18>
 8002b04:	f7ff fed2 	bl	80028ac <__sinit>
 8002b08:	230c      	movs	r3, #12
 8002b0a:	5ee2      	ldrsh	r2, [r4, r3]
 8002b0c:	b293      	uxth	r3, r2
 8002b0e:	0711      	lsls	r1, r2, #28
 8002b10:	d423      	bmi.n	8002b5a <__swsetup_r+0x6a>
 8002b12:	06d9      	lsls	r1, r3, #27
 8002b14:	d407      	bmi.n	8002b26 <__swsetup_r+0x36>
 8002b16:	2309      	movs	r3, #9
 8002b18:	2001      	movs	r0, #1
 8002b1a:	602b      	str	r3, [r5, #0]
 8002b1c:	3337      	adds	r3, #55	; 0x37
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	81a3      	strh	r3, [r4, #12]
 8002b22:	4240      	negs	r0, r0
 8002b24:	bd70      	pop	{r4, r5, r6, pc}
 8002b26:	075b      	lsls	r3, r3, #29
 8002b28:	d513      	bpl.n	8002b52 <__swsetup_r+0x62>
 8002b2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b2c:	2900      	cmp	r1, #0
 8002b2e:	d008      	beq.n	8002b42 <__swsetup_r+0x52>
 8002b30:	0023      	movs	r3, r4
 8002b32:	3344      	adds	r3, #68	; 0x44
 8002b34:	4299      	cmp	r1, r3
 8002b36:	d002      	beq.n	8002b3e <__swsetup_r+0x4e>
 8002b38:	0028      	movs	r0, r5
 8002b3a:	f000 f941 	bl	8002dc0 <_free_r>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	6363      	str	r3, [r4, #52]	; 0x34
 8002b42:	2224      	movs	r2, #36	; 0x24
 8002b44:	89a3      	ldrh	r3, [r4, #12]
 8002b46:	4393      	bics	r3, r2
 8002b48:	81a3      	strh	r3, [r4, #12]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	6063      	str	r3, [r4, #4]
 8002b4e:	6923      	ldr	r3, [r4, #16]
 8002b50:	6023      	str	r3, [r4, #0]
 8002b52:	2308      	movs	r3, #8
 8002b54:	89a2      	ldrh	r2, [r4, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	81a3      	strh	r3, [r4, #12]
 8002b5a:	6923      	ldr	r3, [r4, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10b      	bne.n	8002b78 <__swsetup_r+0x88>
 8002b60:	21a0      	movs	r1, #160	; 0xa0
 8002b62:	2280      	movs	r2, #128	; 0x80
 8002b64:	89a3      	ldrh	r3, [r4, #12]
 8002b66:	0089      	lsls	r1, r1, #2
 8002b68:	0092      	lsls	r2, r2, #2
 8002b6a:	400b      	ands	r3, r1
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d003      	beq.n	8002b78 <__swsetup_r+0x88>
 8002b70:	0021      	movs	r1, r4
 8002b72:	0028      	movs	r0, r5
 8002b74:	f000 fdde 	bl	8003734 <__smakebuf_r>
 8002b78:	220c      	movs	r2, #12
 8002b7a:	5ea3      	ldrsh	r3, [r4, r2]
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	001a      	movs	r2, r3
 8002b80:	b299      	uxth	r1, r3
 8002b82:	4002      	ands	r2, r0
 8002b84:	4203      	tst	r3, r0
 8002b86:	d00f      	beq.n	8002ba8 <__swsetup_r+0xb8>
 8002b88:	2200      	movs	r2, #0
 8002b8a:	60a2      	str	r2, [r4, #8]
 8002b8c:	6962      	ldr	r2, [r4, #20]
 8002b8e:	4252      	negs	r2, r2
 8002b90:	61a2      	str	r2, [r4, #24]
 8002b92:	2000      	movs	r0, #0
 8002b94:	6922      	ldr	r2, [r4, #16]
 8002b96:	4282      	cmp	r2, r0
 8002b98:	d1c4      	bne.n	8002b24 <__swsetup_r+0x34>
 8002b9a:	0609      	lsls	r1, r1, #24
 8002b9c:	d5c2      	bpl.n	8002b24 <__swsetup_r+0x34>
 8002b9e:	2240      	movs	r2, #64	; 0x40
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	81a3      	strh	r3, [r4, #12]
 8002ba4:	3801      	subs	r0, #1
 8002ba6:	e7bd      	b.n	8002b24 <__swsetup_r+0x34>
 8002ba8:	0788      	lsls	r0, r1, #30
 8002baa:	d400      	bmi.n	8002bae <__swsetup_r+0xbe>
 8002bac:	6962      	ldr	r2, [r4, #20]
 8002bae:	60a2      	str	r2, [r4, #8]
 8002bb0:	e7ef      	b.n	8002b92 <__swsetup_r+0xa2>
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	20000064 	.word	0x20000064

08002bb8 <memset>:
 8002bb8:	0003      	movs	r3, r0
 8002bba:	1882      	adds	r2, r0, r2
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d100      	bne.n	8002bc2 <memset+0xa>
 8002bc0:	4770      	bx	lr
 8002bc2:	7019      	strb	r1, [r3, #0]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	e7f9      	b.n	8002bbc <memset+0x4>

08002bc8 <strtok>:
 8002bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bca:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <strtok+0x5c>)
 8002bcc:	0005      	movs	r5, r0
 8002bce:	681f      	ldr	r7, [r3, #0]
 8002bd0:	000e      	movs	r6, r1
 8002bd2:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8002bd4:	2c00      	cmp	r4, #0
 8002bd6:	d11d      	bne.n	8002c14 <strtok+0x4c>
 8002bd8:	2050      	movs	r0, #80	; 0x50
 8002bda:	f000 f93b 	bl	8002e54 <malloc>
 8002bde:	1e02      	subs	r2, r0, #0
 8002be0:	6478      	str	r0, [r7, #68]	; 0x44
 8002be2:	d104      	bne.n	8002bee <strtok+0x26>
 8002be4:	215b      	movs	r1, #91	; 0x5b
 8002be6:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <strtok+0x60>)
 8002be8:	4810      	ldr	r0, [pc, #64]	; (8002c2c <strtok+0x64>)
 8002bea:	f000 f8cb 	bl	8002d84 <__assert_func>
 8002bee:	6004      	str	r4, [r0, #0]
 8002bf0:	6044      	str	r4, [r0, #4]
 8002bf2:	6084      	str	r4, [r0, #8]
 8002bf4:	60c4      	str	r4, [r0, #12]
 8002bf6:	6104      	str	r4, [r0, #16]
 8002bf8:	6144      	str	r4, [r0, #20]
 8002bfa:	6184      	str	r4, [r0, #24]
 8002bfc:	6284      	str	r4, [r0, #40]	; 0x28
 8002bfe:	62c4      	str	r4, [r0, #44]	; 0x2c
 8002c00:	6304      	str	r4, [r0, #48]	; 0x30
 8002c02:	6344      	str	r4, [r0, #52]	; 0x34
 8002c04:	6384      	str	r4, [r0, #56]	; 0x38
 8002c06:	63c4      	str	r4, [r0, #60]	; 0x3c
 8002c08:	6404      	str	r4, [r0, #64]	; 0x40
 8002c0a:	6444      	str	r4, [r0, #68]	; 0x44
 8002c0c:	6484      	str	r4, [r0, #72]	; 0x48
 8002c0e:	64c4      	str	r4, [r0, #76]	; 0x4c
 8002c10:	7704      	strb	r4, [r0, #28]
 8002c12:	6244      	str	r4, [r0, #36]	; 0x24
 8002c14:	0031      	movs	r1, r6
 8002c16:	0028      	movs	r0, r5
 8002c18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f000 f808 	bl	8002c30 <__strtok_r>
 8002c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	20000064 	.word	0x20000064
 8002c28:	08003950 	.word	0x08003950
 8002c2c:	08003967 	.word	0x08003967

08002c30 <__strtok_r>:
 8002c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c32:	2800      	cmp	r0, #0
 8002c34:	d102      	bne.n	8002c3c <__strtok_r+0xc>
 8002c36:	6810      	ldr	r0, [r2, #0]
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	d013      	beq.n	8002c64 <__strtok_r+0x34>
 8002c3c:	0004      	movs	r4, r0
 8002c3e:	0020      	movs	r0, r4
 8002c40:	000e      	movs	r6, r1
 8002c42:	7805      	ldrb	r5, [r0, #0]
 8002c44:	3401      	adds	r4, #1
 8002c46:	7837      	ldrb	r7, [r6, #0]
 8002c48:	2f00      	cmp	r7, #0
 8002c4a:	d104      	bne.n	8002c56 <__strtok_r+0x26>
 8002c4c:	2d00      	cmp	r5, #0
 8002c4e:	d10f      	bne.n	8002c70 <__strtok_r+0x40>
 8002c50:	0028      	movs	r0, r5
 8002c52:	6015      	str	r5, [r2, #0]
 8002c54:	e006      	b.n	8002c64 <__strtok_r+0x34>
 8002c56:	3601      	adds	r6, #1
 8002c58:	42bd      	cmp	r5, r7
 8002c5a:	d1f4      	bne.n	8002c46 <__strtok_r+0x16>
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1ee      	bne.n	8002c3e <__strtok_r+0xe>
 8002c60:	6014      	str	r4, [r2, #0]
 8002c62:	7003      	strb	r3, [r0, #0]
 8002c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c66:	002f      	movs	r7, r5
 8002c68:	e00f      	b.n	8002c8a <__strtok_r+0x5a>
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	2e00      	cmp	r6, #0
 8002c6e:	d104      	bne.n	8002c7a <__strtok_r+0x4a>
 8002c70:	0023      	movs	r3, r4
 8002c72:	3401      	adds	r4, #1
 8002c74:	781d      	ldrb	r5, [r3, #0]
 8002c76:	0027      	movs	r7, r4
 8002c78:	000b      	movs	r3, r1
 8002c7a:	781e      	ldrb	r6, [r3, #0]
 8002c7c:	42b5      	cmp	r5, r6
 8002c7e:	d1f4      	bne.n	8002c6a <__strtok_r+0x3a>
 8002c80:	2d00      	cmp	r5, #0
 8002c82:	d0f0      	beq.n	8002c66 <__strtok_r+0x36>
 8002c84:	2300      	movs	r3, #0
 8002c86:	3c01      	subs	r4, #1
 8002c88:	7023      	strb	r3, [r4, #0]
 8002c8a:	6017      	str	r7, [r2, #0]
 8002c8c:	e7ea      	b.n	8002c64 <__strtok_r+0x34>
	...

08002c90 <_close_r>:
 8002c90:	2300      	movs	r3, #0
 8002c92:	b570      	push	{r4, r5, r6, lr}
 8002c94:	4d06      	ldr	r5, [pc, #24]	; (8002cb0 <_close_r+0x20>)
 8002c96:	0004      	movs	r4, r0
 8002c98:	0008      	movs	r0, r1
 8002c9a:	602b      	str	r3, [r5, #0]
 8002c9c:	f7fd fd85 	bl	80007aa <_close>
 8002ca0:	1c43      	adds	r3, r0, #1
 8002ca2:	d103      	bne.n	8002cac <_close_r+0x1c>
 8002ca4:	682b      	ldr	r3, [r5, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d000      	beq.n	8002cac <_close_r+0x1c>
 8002caa:	6023      	str	r3, [r4, #0]
 8002cac:	bd70      	pop	{r4, r5, r6, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	200003d8 	.word	0x200003d8

08002cb4 <_lseek_r>:
 8002cb4:	b570      	push	{r4, r5, r6, lr}
 8002cb6:	0004      	movs	r4, r0
 8002cb8:	0008      	movs	r0, r1
 8002cba:	0011      	movs	r1, r2
 8002cbc:	001a      	movs	r2, r3
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	4d05      	ldr	r5, [pc, #20]	; (8002cd8 <_lseek_r+0x24>)
 8002cc2:	602b      	str	r3, [r5, #0]
 8002cc4:	f7fd fd92 	bl	80007ec <_lseek>
 8002cc8:	1c43      	adds	r3, r0, #1
 8002cca:	d103      	bne.n	8002cd4 <_lseek_r+0x20>
 8002ccc:	682b      	ldr	r3, [r5, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d000      	beq.n	8002cd4 <_lseek_r+0x20>
 8002cd2:	6023      	str	r3, [r4, #0]
 8002cd4:	bd70      	pop	{r4, r5, r6, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	200003d8 	.word	0x200003d8

08002cdc <_read_r>:
 8002cdc:	b570      	push	{r4, r5, r6, lr}
 8002cde:	0004      	movs	r4, r0
 8002ce0:	0008      	movs	r0, r1
 8002ce2:	0011      	movs	r1, r2
 8002ce4:	001a      	movs	r2, r3
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	4d05      	ldr	r5, [pc, #20]	; (8002d00 <_read_r+0x24>)
 8002cea:	602b      	str	r3, [r5, #0]
 8002cec:	f7fd fd40 	bl	8000770 <_read>
 8002cf0:	1c43      	adds	r3, r0, #1
 8002cf2:	d103      	bne.n	8002cfc <_read_r+0x20>
 8002cf4:	682b      	ldr	r3, [r5, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d000      	beq.n	8002cfc <_read_r+0x20>
 8002cfa:	6023      	str	r3, [r4, #0]
 8002cfc:	bd70      	pop	{r4, r5, r6, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	200003d8 	.word	0x200003d8

08002d04 <_write_r>:
 8002d04:	b570      	push	{r4, r5, r6, lr}
 8002d06:	0004      	movs	r4, r0
 8002d08:	0008      	movs	r0, r1
 8002d0a:	0011      	movs	r1, r2
 8002d0c:	001a      	movs	r2, r3
 8002d0e:	2300      	movs	r3, #0
 8002d10:	4d05      	ldr	r5, [pc, #20]	; (8002d28 <_write_r+0x24>)
 8002d12:	602b      	str	r3, [r5, #0]
 8002d14:	f7fd faec 	bl	80002f0 <_write>
 8002d18:	1c43      	adds	r3, r0, #1
 8002d1a:	d103      	bne.n	8002d24 <_write_r+0x20>
 8002d1c:	682b      	ldr	r3, [r5, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d000      	beq.n	8002d24 <_write_r+0x20>
 8002d22:	6023      	str	r3, [r4, #0]
 8002d24:	bd70      	pop	{r4, r5, r6, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	200003d8 	.word	0x200003d8

08002d2c <__errno>:
 8002d2c:	4b01      	ldr	r3, [pc, #4]	; (8002d34 <__errno+0x8>)
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	4770      	bx	lr
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	20000064 	.word	0x20000064

08002d38 <__libc_init_array>:
 8002d38:	b570      	push	{r4, r5, r6, lr}
 8002d3a:	2600      	movs	r6, #0
 8002d3c:	4c0c      	ldr	r4, [pc, #48]	; (8002d70 <__libc_init_array+0x38>)
 8002d3e:	4d0d      	ldr	r5, [pc, #52]	; (8002d74 <__libc_init_array+0x3c>)
 8002d40:	1b64      	subs	r4, r4, r5
 8002d42:	10a4      	asrs	r4, r4, #2
 8002d44:	42a6      	cmp	r6, r4
 8002d46:	d109      	bne.n	8002d5c <__libc_init_array+0x24>
 8002d48:	2600      	movs	r6, #0
 8002d4a:	f000 fdc3 	bl	80038d4 <_init>
 8002d4e:	4c0a      	ldr	r4, [pc, #40]	; (8002d78 <__libc_init_array+0x40>)
 8002d50:	4d0a      	ldr	r5, [pc, #40]	; (8002d7c <__libc_init_array+0x44>)
 8002d52:	1b64      	subs	r4, r4, r5
 8002d54:	10a4      	asrs	r4, r4, #2
 8002d56:	42a6      	cmp	r6, r4
 8002d58:	d105      	bne.n	8002d66 <__libc_init_array+0x2e>
 8002d5a:	bd70      	pop	{r4, r5, r6, pc}
 8002d5c:	00b3      	lsls	r3, r6, #2
 8002d5e:	58eb      	ldr	r3, [r5, r3]
 8002d60:	4798      	blx	r3
 8002d62:	3601      	adds	r6, #1
 8002d64:	e7ee      	b.n	8002d44 <__libc_init_array+0xc>
 8002d66:	00b3      	lsls	r3, r6, #2
 8002d68:	58eb      	ldr	r3, [r5, r3]
 8002d6a:	4798      	blx	r3
 8002d6c:	3601      	adds	r6, #1
 8002d6e:	e7f2      	b.n	8002d56 <__libc_init_array+0x1e>
 8002d70:	08003a30 	.word	0x08003a30
 8002d74:	08003a30 	.word	0x08003a30
 8002d78:	08003a34 	.word	0x08003a34
 8002d7c:	08003a30 	.word	0x08003a30

08002d80 <__retarget_lock_acquire_recursive>:
 8002d80:	4770      	bx	lr

08002d82 <__retarget_lock_release_recursive>:
 8002d82:	4770      	bx	lr

08002d84 <__assert_func>:
 8002d84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002d86:	0014      	movs	r4, r2
 8002d88:	001a      	movs	r2, r3
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <__assert_func+0x2c>)
 8002d8c:	0005      	movs	r5, r0
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	000e      	movs	r6, r1
 8002d92:	68d8      	ldr	r0, [r3, #12]
 8002d94:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <__assert_func+0x30>)
 8002d96:	2c00      	cmp	r4, #0
 8002d98:	d101      	bne.n	8002d9e <__assert_func+0x1a>
 8002d9a:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <__assert_func+0x34>)
 8002d9c:	001c      	movs	r4, r3
 8002d9e:	4907      	ldr	r1, [pc, #28]	; (8002dbc <__assert_func+0x38>)
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	9402      	str	r4, [sp, #8]
 8002da4:	002b      	movs	r3, r5
 8002da6:	9600      	str	r6, [sp, #0]
 8002da8:	f000 fc8c 	bl	80036c4 <fiprintf>
 8002dac:	f000 fd41 	bl	8003832 <abort>
 8002db0:	20000064 	.word	0x20000064
 8002db4:	080039c1 	.word	0x080039c1
 8002db8:	080039fc 	.word	0x080039fc
 8002dbc:	080039ce 	.word	0x080039ce

08002dc0 <_free_r>:
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	0005      	movs	r5, r0
 8002dc4:	2900      	cmp	r1, #0
 8002dc6:	d010      	beq.n	8002dea <_free_r+0x2a>
 8002dc8:	1f0c      	subs	r4, r1, #4
 8002dca:	6823      	ldr	r3, [r4, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	da00      	bge.n	8002dd2 <_free_r+0x12>
 8002dd0:	18e4      	adds	r4, r4, r3
 8002dd2:	0028      	movs	r0, r5
 8002dd4:	f000 f8ec 	bl	8002fb0 <__malloc_lock>
 8002dd8:	4a1d      	ldr	r2, [pc, #116]	; (8002e50 <_free_r+0x90>)
 8002dda:	6813      	ldr	r3, [r2, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <_free_r+0x2c>
 8002de0:	6063      	str	r3, [r4, #4]
 8002de2:	6014      	str	r4, [r2, #0]
 8002de4:	0028      	movs	r0, r5
 8002de6:	f000 f8eb 	bl	8002fc0 <__malloc_unlock>
 8002dea:	bd70      	pop	{r4, r5, r6, pc}
 8002dec:	42a3      	cmp	r3, r4
 8002dee:	d908      	bls.n	8002e02 <_free_r+0x42>
 8002df0:	6820      	ldr	r0, [r4, #0]
 8002df2:	1821      	adds	r1, r4, r0
 8002df4:	428b      	cmp	r3, r1
 8002df6:	d1f3      	bne.n	8002de0 <_free_r+0x20>
 8002df8:	6819      	ldr	r1, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	1809      	adds	r1, r1, r0
 8002dfe:	6021      	str	r1, [r4, #0]
 8002e00:	e7ee      	b.n	8002de0 <_free_r+0x20>
 8002e02:	001a      	movs	r2, r3
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <_free_r+0x4e>
 8002e0a:	42a3      	cmp	r3, r4
 8002e0c:	d9f9      	bls.n	8002e02 <_free_r+0x42>
 8002e0e:	6811      	ldr	r1, [r2, #0]
 8002e10:	1850      	adds	r0, r2, r1
 8002e12:	42a0      	cmp	r0, r4
 8002e14:	d10b      	bne.n	8002e2e <_free_r+0x6e>
 8002e16:	6820      	ldr	r0, [r4, #0]
 8002e18:	1809      	adds	r1, r1, r0
 8002e1a:	1850      	adds	r0, r2, r1
 8002e1c:	6011      	str	r1, [r2, #0]
 8002e1e:	4283      	cmp	r3, r0
 8002e20:	d1e0      	bne.n	8002de4 <_free_r+0x24>
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	1841      	adds	r1, r0, r1
 8002e28:	6011      	str	r1, [r2, #0]
 8002e2a:	6053      	str	r3, [r2, #4]
 8002e2c:	e7da      	b.n	8002de4 <_free_r+0x24>
 8002e2e:	42a0      	cmp	r0, r4
 8002e30:	d902      	bls.n	8002e38 <_free_r+0x78>
 8002e32:	230c      	movs	r3, #12
 8002e34:	602b      	str	r3, [r5, #0]
 8002e36:	e7d5      	b.n	8002de4 <_free_r+0x24>
 8002e38:	6820      	ldr	r0, [r4, #0]
 8002e3a:	1821      	adds	r1, r4, r0
 8002e3c:	428b      	cmp	r3, r1
 8002e3e:	d103      	bne.n	8002e48 <_free_r+0x88>
 8002e40:	6819      	ldr	r1, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	1809      	adds	r1, r1, r0
 8002e46:	6021      	str	r1, [r4, #0]
 8002e48:	6063      	str	r3, [r4, #4]
 8002e4a:	6054      	str	r4, [r2, #4]
 8002e4c:	e7ca      	b.n	8002de4 <_free_r+0x24>
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	200003e0 	.word	0x200003e0

08002e54 <malloc>:
 8002e54:	b510      	push	{r4, lr}
 8002e56:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <malloc+0x10>)
 8002e58:	0001      	movs	r1, r0
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	f000 f826 	bl	8002eac <_malloc_r>
 8002e60:	bd10      	pop	{r4, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	20000064 	.word	0x20000064

08002e68 <sbrk_aligned>:
 8002e68:	b570      	push	{r4, r5, r6, lr}
 8002e6a:	4e0f      	ldr	r6, [pc, #60]	; (8002ea8 <sbrk_aligned+0x40>)
 8002e6c:	000d      	movs	r5, r1
 8002e6e:	6831      	ldr	r1, [r6, #0]
 8002e70:	0004      	movs	r4, r0
 8002e72:	2900      	cmp	r1, #0
 8002e74:	d102      	bne.n	8002e7c <sbrk_aligned+0x14>
 8002e76:	f000 fcbf 	bl	80037f8 <_sbrk_r>
 8002e7a:	6030      	str	r0, [r6, #0]
 8002e7c:	0029      	movs	r1, r5
 8002e7e:	0020      	movs	r0, r4
 8002e80:	f000 fcba 	bl	80037f8 <_sbrk_r>
 8002e84:	1c43      	adds	r3, r0, #1
 8002e86:	d00a      	beq.n	8002e9e <sbrk_aligned+0x36>
 8002e88:	2303      	movs	r3, #3
 8002e8a:	1cc5      	adds	r5, r0, #3
 8002e8c:	439d      	bics	r5, r3
 8002e8e:	42a8      	cmp	r0, r5
 8002e90:	d007      	beq.n	8002ea2 <sbrk_aligned+0x3a>
 8002e92:	1a29      	subs	r1, r5, r0
 8002e94:	0020      	movs	r0, r4
 8002e96:	f000 fcaf 	bl	80037f8 <_sbrk_r>
 8002e9a:	3001      	adds	r0, #1
 8002e9c:	d101      	bne.n	8002ea2 <sbrk_aligned+0x3a>
 8002e9e:	2501      	movs	r5, #1
 8002ea0:	426d      	negs	r5, r5
 8002ea2:	0028      	movs	r0, r5
 8002ea4:	bd70      	pop	{r4, r5, r6, pc}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	200003e4 	.word	0x200003e4

08002eac <_malloc_r>:
 8002eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002eae:	2203      	movs	r2, #3
 8002eb0:	1ccb      	adds	r3, r1, #3
 8002eb2:	4393      	bics	r3, r2
 8002eb4:	3308      	adds	r3, #8
 8002eb6:	0006      	movs	r6, r0
 8002eb8:	001f      	movs	r7, r3
 8002eba:	2b0c      	cmp	r3, #12
 8002ebc:	d238      	bcs.n	8002f30 <_malloc_r+0x84>
 8002ebe:	270c      	movs	r7, #12
 8002ec0:	42b9      	cmp	r1, r7
 8002ec2:	d837      	bhi.n	8002f34 <_malloc_r+0x88>
 8002ec4:	0030      	movs	r0, r6
 8002ec6:	f000 f873 	bl	8002fb0 <__malloc_lock>
 8002eca:	4b38      	ldr	r3, [pc, #224]	; (8002fac <_malloc_r+0x100>)
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	001c      	movs	r4, r3
 8002ed2:	2c00      	cmp	r4, #0
 8002ed4:	d133      	bne.n	8002f3e <_malloc_r+0x92>
 8002ed6:	0039      	movs	r1, r7
 8002ed8:	0030      	movs	r0, r6
 8002eda:	f7ff ffc5 	bl	8002e68 <sbrk_aligned>
 8002ede:	0004      	movs	r4, r0
 8002ee0:	1c43      	adds	r3, r0, #1
 8002ee2:	d15e      	bne.n	8002fa2 <_malloc_r+0xf6>
 8002ee4:	9b00      	ldr	r3, [sp, #0]
 8002ee6:	681c      	ldr	r4, [r3, #0]
 8002ee8:	0025      	movs	r5, r4
 8002eea:	2d00      	cmp	r5, #0
 8002eec:	d14e      	bne.n	8002f8c <_malloc_r+0xe0>
 8002eee:	2c00      	cmp	r4, #0
 8002ef0:	d051      	beq.n	8002f96 <_malloc_r+0xea>
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	0029      	movs	r1, r5
 8002ef6:	18e3      	adds	r3, r4, r3
 8002ef8:	0030      	movs	r0, r6
 8002efa:	9301      	str	r3, [sp, #4]
 8002efc:	f000 fc7c 	bl	80037f8 <_sbrk_r>
 8002f00:	9b01      	ldr	r3, [sp, #4]
 8002f02:	4283      	cmp	r3, r0
 8002f04:	d147      	bne.n	8002f96 <_malloc_r+0xea>
 8002f06:	6823      	ldr	r3, [r4, #0]
 8002f08:	0030      	movs	r0, r6
 8002f0a:	1aff      	subs	r7, r7, r3
 8002f0c:	0039      	movs	r1, r7
 8002f0e:	f7ff ffab 	bl	8002e68 <sbrk_aligned>
 8002f12:	3001      	adds	r0, #1
 8002f14:	d03f      	beq.n	8002f96 <_malloc_r+0xea>
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	19db      	adds	r3, r3, r7
 8002f1a:	6023      	str	r3, [r4, #0]
 8002f1c:	9b00      	ldr	r3, [sp, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d040      	beq.n	8002fa6 <_malloc_r+0xfa>
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	42a2      	cmp	r2, r4
 8002f28:	d133      	bne.n	8002f92 <_malloc_r+0xe6>
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	e014      	b.n	8002f5a <_malloc_r+0xae>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	dac5      	bge.n	8002ec0 <_malloc_r+0x14>
 8002f34:	230c      	movs	r3, #12
 8002f36:	2500      	movs	r5, #0
 8002f38:	6033      	str	r3, [r6, #0]
 8002f3a:	0028      	movs	r0, r5
 8002f3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f3e:	6821      	ldr	r1, [r4, #0]
 8002f40:	1bc9      	subs	r1, r1, r7
 8002f42:	d420      	bmi.n	8002f86 <_malloc_r+0xda>
 8002f44:	290b      	cmp	r1, #11
 8002f46:	d918      	bls.n	8002f7a <_malloc_r+0xce>
 8002f48:	19e2      	adds	r2, r4, r7
 8002f4a:	6027      	str	r7, [r4, #0]
 8002f4c:	42a3      	cmp	r3, r4
 8002f4e:	d112      	bne.n	8002f76 <_malloc_r+0xca>
 8002f50:	9b00      	ldr	r3, [sp, #0]
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	6863      	ldr	r3, [r4, #4]
 8002f56:	6011      	str	r1, [r2, #0]
 8002f58:	6053      	str	r3, [r2, #4]
 8002f5a:	0030      	movs	r0, r6
 8002f5c:	0025      	movs	r5, r4
 8002f5e:	f000 f82f 	bl	8002fc0 <__malloc_unlock>
 8002f62:	2207      	movs	r2, #7
 8002f64:	350b      	adds	r5, #11
 8002f66:	1d23      	adds	r3, r4, #4
 8002f68:	4395      	bics	r5, r2
 8002f6a:	1aea      	subs	r2, r5, r3
 8002f6c:	429d      	cmp	r5, r3
 8002f6e:	d0e4      	beq.n	8002f3a <_malloc_r+0x8e>
 8002f70:	1b5b      	subs	r3, r3, r5
 8002f72:	50a3      	str	r3, [r4, r2]
 8002f74:	e7e1      	b.n	8002f3a <_malloc_r+0x8e>
 8002f76:	605a      	str	r2, [r3, #4]
 8002f78:	e7ec      	b.n	8002f54 <_malloc_r+0xa8>
 8002f7a:	6862      	ldr	r2, [r4, #4]
 8002f7c:	42a3      	cmp	r3, r4
 8002f7e:	d1d5      	bne.n	8002f2c <_malloc_r+0x80>
 8002f80:	9b00      	ldr	r3, [sp, #0]
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	e7e9      	b.n	8002f5a <_malloc_r+0xae>
 8002f86:	0023      	movs	r3, r4
 8002f88:	6864      	ldr	r4, [r4, #4]
 8002f8a:	e7a2      	b.n	8002ed2 <_malloc_r+0x26>
 8002f8c:	002c      	movs	r4, r5
 8002f8e:	686d      	ldr	r5, [r5, #4]
 8002f90:	e7ab      	b.n	8002eea <_malloc_r+0x3e>
 8002f92:	0013      	movs	r3, r2
 8002f94:	e7c4      	b.n	8002f20 <_malloc_r+0x74>
 8002f96:	230c      	movs	r3, #12
 8002f98:	0030      	movs	r0, r6
 8002f9a:	6033      	str	r3, [r6, #0]
 8002f9c:	f000 f810 	bl	8002fc0 <__malloc_unlock>
 8002fa0:	e7cb      	b.n	8002f3a <_malloc_r+0x8e>
 8002fa2:	6027      	str	r7, [r4, #0]
 8002fa4:	e7d9      	b.n	8002f5a <_malloc_r+0xae>
 8002fa6:	605b      	str	r3, [r3, #4]
 8002fa8:	deff      	udf	#255	; 0xff
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	200003e0 	.word	0x200003e0

08002fb0 <__malloc_lock>:
 8002fb0:	b510      	push	{r4, lr}
 8002fb2:	4802      	ldr	r0, [pc, #8]	; (8002fbc <__malloc_lock+0xc>)
 8002fb4:	f7ff fee4 	bl	8002d80 <__retarget_lock_acquire_recursive>
 8002fb8:	bd10      	pop	{r4, pc}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	200003dc 	.word	0x200003dc

08002fc0 <__malloc_unlock>:
 8002fc0:	b510      	push	{r4, lr}
 8002fc2:	4802      	ldr	r0, [pc, #8]	; (8002fcc <__malloc_unlock+0xc>)
 8002fc4:	f7ff fedd 	bl	8002d82 <__retarget_lock_release_recursive>
 8002fc8:	bd10      	pop	{r4, pc}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	200003dc 	.word	0x200003dc

08002fd0 <__sfputc_r>:
 8002fd0:	6893      	ldr	r3, [r2, #8]
 8002fd2:	b510      	push	{r4, lr}
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	6093      	str	r3, [r2, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	da04      	bge.n	8002fe6 <__sfputc_r+0x16>
 8002fdc:	6994      	ldr	r4, [r2, #24]
 8002fde:	42a3      	cmp	r3, r4
 8002fe0:	db07      	blt.n	8002ff2 <__sfputc_r+0x22>
 8002fe2:	290a      	cmp	r1, #10
 8002fe4:	d005      	beq.n	8002ff2 <__sfputc_r+0x22>
 8002fe6:	6813      	ldr	r3, [r2, #0]
 8002fe8:	1c58      	adds	r0, r3, #1
 8002fea:	6010      	str	r0, [r2, #0]
 8002fec:	7019      	strb	r1, [r3, #0]
 8002fee:	0008      	movs	r0, r1
 8002ff0:	bd10      	pop	{r4, pc}
 8002ff2:	f7ff fd3b 	bl	8002a6c <__swbuf_r>
 8002ff6:	0001      	movs	r1, r0
 8002ff8:	e7f9      	b.n	8002fee <__sfputc_r+0x1e>

08002ffa <__sfputs_r>:
 8002ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffc:	0006      	movs	r6, r0
 8002ffe:	000f      	movs	r7, r1
 8003000:	0014      	movs	r4, r2
 8003002:	18d5      	adds	r5, r2, r3
 8003004:	42ac      	cmp	r4, r5
 8003006:	d101      	bne.n	800300c <__sfputs_r+0x12>
 8003008:	2000      	movs	r0, #0
 800300a:	e007      	b.n	800301c <__sfputs_r+0x22>
 800300c:	7821      	ldrb	r1, [r4, #0]
 800300e:	003a      	movs	r2, r7
 8003010:	0030      	movs	r0, r6
 8003012:	f7ff ffdd 	bl	8002fd0 <__sfputc_r>
 8003016:	3401      	adds	r4, #1
 8003018:	1c43      	adds	r3, r0, #1
 800301a:	d1f3      	bne.n	8003004 <__sfputs_r+0xa>
 800301c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003020 <_vfiprintf_r>:
 8003020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003022:	b0a1      	sub	sp, #132	; 0x84
 8003024:	000f      	movs	r7, r1
 8003026:	0015      	movs	r5, r2
 8003028:	001e      	movs	r6, r3
 800302a:	9003      	str	r0, [sp, #12]
 800302c:	2800      	cmp	r0, #0
 800302e:	d004      	beq.n	800303a <_vfiprintf_r+0x1a>
 8003030:	6a03      	ldr	r3, [r0, #32]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <_vfiprintf_r+0x1a>
 8003036:	f7ff fc39 	bl	80028ac <__sinit>
 800303a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800303c:	07db      	lsls	r3, r3, #31
 800303e:	d405      	bmi.n	800304c <_vfiprintf_r+0x2c>
 8003040:	89bb      	ldrh	r3, [r7, #12]
 8003042:	059b      	lsls	r3, r3, #22
 8003044:	d402      	bmi.n	800304c <_vfiprintf_r+0x2c>
 8003046:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003048:	f7ff fe9a 	bl	8002d80 <__retarget_lock_acquire_recursive>
 800304c:	89bb      	ldrh	r3, [r7, #12]
 800304e:	071b      	lsls	r3, r3, #28
 8003050:	d502      	bpl.n	8003058 <_vfiprintf_r+0x38>
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d113      	bne.n	8003080 <_vfiprintf_r+0x60>
 8003058:	0039      	movs	r1, r7
 800305a:	9803      	ldr	r0, [sp, #12]
 800305c:	f7ff fd48 	bl	8002af0 <__swsetup_r>
 8003060:	2800      	cmp	r0, #0
 8003062:	d00d      	beq.n	8003080 <_vfiprintf_r+0x60>
 8003064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003066:	07db      	lsls	r3, r3, #31
 8003068:	d503      	bpl.n	8003072 <_vfiprintf_r+0x52>
 800306a:	2001      	movs	r0, #1
 800306c:	4240      	negs	r0, r0
 800306e:	b021      	add	sp, #132	; 0x84
 8003070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003072:	89bb      	ldrh	r3, [r7, #12]
 8003074:	059b      	lsls	r3, r3, #22
 8003076:	d4f8      	bmi.n	800306a <_vfiprintf_r+0x4a>
 8003078:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800307a:	f7ff fe82 	bl	8002d82 <__retarget_lock_release_recursive>
 800307e:	e7f4      	b.n	800306a <_vfiprintf_r+0x4a>
 8003080:	2300      	movs	r3, #0
 8003082:	ac08      	add	r4, sp, #32
 8003084:	6163      	str	r3, [r4, #20]
 8003086:	3320      	adds	r3, #32
 8003088:	7663      	strb	r3, [r4, #25]
 800308a:	3310      	adds	r3, #16
 800308c:	76a3      	strb	r3, [r4, #26]
 800308e:	9607      	str	r6, [sp, #28]
 8003090:	002e      	movs	r6, r5
 8003092:	7833      	ldrb	r3, [r6, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <_vfiprintf_r+0x7c>
 8003098:	2b25      	cmp	r3, #37	; 0x25
 800309a:	d148      	bne.n	800312e <_vfiprintf_r+0x10e>
 800309c:	1b73      	subs	r3, r6, r5
 800309e:	9305      	str	r3, [sp, #20]
 80030a0:	42ae      	cmp	r6, r5
 80030a2:	d00b      	beq.n	80030bc <_vfiprintf_r+0x9c>
 80030a4:	002a      	movs	r2, r5
 80030a6:	0039      	movs	r1, r7
 80030a8:	9803      	ldr	r0, [sp, #12]
 80030aa:	f7ff ffa6 	bl	8002ffa <__sfputs_r>
 80030ae:	3001      	adds	r0, #1
 80030b0:	d100      	bne.n	80030b4 <_vfiprintf_r+0x94>
 80030b2:	e0af      	b.n	8003214 <_vfiprintf_r+0x1f4>
 80030b4:	6963      	ldr	r3, [r4, #20]
 80030b6:	9a05      	ldr	r2, [sp, #20]
 80030b8:	189b      	adds	r3, r3, r2
 80030ba:	6163      	str	r3, [r4, #20]
 80030bc:	7833      	ldrb	r3, [r6, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d100      	bne.n	80030c4 <_vfiprintf_r+0xa4>
 80030c2:	e0a7      	b.n	8003214 <_vfiprintf_r+0x1f4>
 80030c4:	2201      	movs	r2, #1
 80030c6:	2300      	movs	r3, #0
 80030c8:	4252      	negs	r2, r2
 80030ca:	6062      	str	r2, [r4, #4]
 80030cc:	a904      	add	r1, sp, #16
 80030ce:	3254      	adds	r2, #84	; 0x54
 80030d0:	1852      	adds	r2, r2, r1
 80030d2:	1c75      	adds	r5, r6, #1
 80030d4:	6023      	str	r3, [r4, #0]
 80030d6:	60e3      	str	r3, [r4, #12]
 80030d8:	60a3      	str	r3, [r4, #8]
 80030da:	7013      	strb	r3, [r2, #0]
 80030dc:	65a3      	str	r3, [r4, #88]	; 0x58
 80030de:	4b59      	ldr	r3, [pc, #356]	; (8003244 <_vfiprintf_r+0x224>)
 80030e0:	2205      	movs	r2, #5
 80030e2:	0018      	movs	r0, r3
 80030e4:	7829      	ldrb	r1, [r5, #0]
 80030e6:	9305      	str	r3, [sp, #20]
 80030e8:	f000 fb98 	bl	800381c <memchr>
 80030ec:	1c6e      	adds	r6, r5, #1
 80030ee:	2800      	cmp	r0, #0
 80030f0:	d11f      	bne.n	8003132 <_vfiprintf_r+0x112>
 80030f2:	6822      	ldr	r2, [r4, #0]
 80030f4:	06d3      	lsls	r3, r2, #27
 80030f6:	d504      	bpl.n	8003102 <_vfiprintf_r+0xe2>
 80030f8:	2353      	movs	r3, #83	; 0x53
 80030fa:	a904      	add	r1, sp, #16
 80030fc:	185b      	adds	r3, r3, r1
 80030fe:	2120      	movs	r1, #32
 8003100:	7019      	strb	r1, [r3, #0]
 8003102:	0713      	lsls	r3, r2, #28
 8003104:	d504      	bpl.n	8003110 <_vfiprintf_r+0xf0>
 8003106:	2353      	movs	r3, #83	; 0x53
 8003108:	a904      	add	r1, sp, #16
 800310a:	185b      	adds	r3, r3, r1
 800310c:	212b      	movs	r1, #43	; 0x2b
 800310e:	7019      	strb	r1, [r3, #0]
 8003110:	782b      	ldrb	r3, [r5, #0]
 8003112:	2b2a      	cmp	r3, #42	; 0x2a
 8003114:	d016      	beq.n	8003144 <_vfiprintf_r+0x124>
 8003116:	002e      	movs	r6, r5
 8003118:	2100      	movs	r1, #0
 800311a:	200a      	movs	r0, #10
 800311c:	68e3      	ldr	r3, [r4, #12]
 800311e:	7832      	ldrb	r2, [r6, #0]
 8003120:	1c75      	adds	r5, r6, #1
 8003122:	3a30      	subs	r2, #48	; 0x30
 8003124:	2a09      	cmp	r2, #9
 8003126:	d94e      	bls.n	80031c6 <_vfiprintf_r+0x1a6>
 8003128:	2900      	cmp	r1, #0
 800312a:	d111      	bne.n	8003150 <_vfiprintf_r+0x130>
 800312c:	e017      	b.n	800315e <_vfiprintf_r+0x13e>
 800312e:	3601      	adds	r6, #1
 8003130:	e7af      	b.n	8003092 <_vfiprintf_r+0x72>
 8003132:	9b05      	ldr	r3, [sp, #20]
 8003134:	6822      	ldr	r2, [r4, #0]
 8003136:	1ac0      	subs	r0, r0, r3
 8003138:	2301      	movs	r3, #1
 800313a:	4083      	lsls	r3, r0
 800313c:	4313      	orrs	r3, r2
 800313e:	0035      	movs	r5, r6
 8003140:	6023      	str	r3, [r4, #0]
 8003142:	e7cc      	b.n	80030de <_vfiprintf_r+0xbe>
 8003144:	9b07      	ldr	r3, [sp, #28]
 8003146:	1d19      	adds	r1, r3, #4
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	9107      	str	r1, [sp, #28]
 800314c:	2b00      	cmp	r3, #0
 800314e:	db01      	blt.n	8003154 <_vfiprintf_r+0x134>
 8003150:	930b      	str	r3, [sp, #44]	; 0x2c
 8003152:	e004      	b.n	800315e <_vfiprintf_r+0x13e>
 8003154:	425b      	negs	r3, r3
 8003156:	60e3      	str	r3, [r4, #12]
 8003158:	2302      	movs	r3, #2
 800315a:	4313      	orrs	r3, r2
 800315c:	6023      	str	r3, [r4, #0]
 800315e:	7833      	ldrb	r3, [r6, #0]
 8003160:	2b2e      	cmp	r3, #46	; 0x2e
 8003162:	d10a      	bne.n	800317a <_vfiprintf_r+0x15a>
 8003164:	7873      	ldrb	r3, [r6, #1]
 8003166:	2b2a      	cmp	r3, #42	; 0x2a
 8003168:	d135      	bne.n	80031d6 <_vfiprintf_r+0x1b6>
 800316a:	9b07      	ldr	r3, [sp, #28]
 800316c:	3602      	adds	r6, #2
 800316e:	1d1a      	adds	r2, r3, #4
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	9207      	str	r2, [sp, #28]
 8003174:	2b00      	cmp	r3, #0
 8003176:	db2b      	blt.n	80031d0 <_vfiprintf_r+0x1b0>
 8003178:	9309      	str	r3, [sp, #36]	; 0x24
 800317a:	4d33      	ldr	r5, [pc, #204]	; (8003248 <_vfiprintf_r+0x228>)
 800317c:	2203      	movs	r2, #3
 800317e:	0028      	movs	r0, r5
 8003180:	7831      	ldrb	r1, [r6, #0]
 8003182:	f000 fb4b 	bl	800381c <memchr>
 8003186:	2800      	cmp	r0, #0
 8003188:	d006      	beq.n	8003198 <_vfiprintf_r+0x178>
 800318a:	2340      	movs	r3, #64	; 0x40
 800318c:	1b40      	subs	r0, r0, r5
 800318e:	4083      	lsls	r3, r0
 8003190:	6822      	ldr	r2, [r4, #0]
 8003192:	3601      	adds	r6, #1
 8003194:	4313      	orrs	r3, r2
 8003196:	6023      	str	r3, [r4, #0]
 8003198:	7831      	ldrb	r1, [r6, #0]
 800319a:	2206      	movs	r2, #6
 800319c:	482b      	ldr	r0, [pc, #172]	; (800324c <_vfiprintf_r+0x22c>)
 800319e:	1c75      	adds	r5, r6, #1
 80031a0:	7621      	strb	r1, [r4, #24]
 80031a2:	f000 fb3b 	bl	800381c <memchr>
 80031a6:	2800      	cmp	r0, #0
 80031a8:	d043      	beq.n	8003232 <_vfiprintf_r+0x212>
 80031aa:	4b29      	ldr	r3, [pc, #164]	; (8003250 <_vfiprintf_r+0x230>)
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d125      	bne.n	80031fc <_vfiprintf_r+0x1dc>
 80031b0:	2207      	movs	r2, #7
 80031b2:	9b07      	ldr	r3, [sp, #28]
 80031b4:	3307      	adds	r3, #7
 80031b6:	4393      	bics	r3, r2
 80031b8:	3308      	adds	r3, #8
 80031ba:	9307      	str	r3, [sp, #28]
 80031bc:	6963      	ldr	r3, [r4, #20]
 80031be:	9a04      	ldr	r2, [sp, #16]
 80031c0:	189b      	adds	r3, r3, r2
 80031c2:	6163      	str	r3, [r4, #20]
 80031c4:	e764      	b.n	8003090 <_vfiprintf_r+0x70>
 80031c6:	4343      	muls	r3, r0
 80031c8:	002e      	movs	r6, r5
 80031ca:	2101      	movs	r1, #1
 80031cc:	189b      	adds	r3, r3, r2
 80031ce:	e7a6      	b.n	800311e <_vfiprintf_r+0xfe>
 80031d0:	2301      	movs	r3, #1
 80031d2:	425b      	negs	r3, r3
 80031d4:	e7d0      	b.n	8003178 <_vfiprintf_r+0x158>
 80031d6:	2300      	movs	r3, #0
 80031d8:	200a      	movs	r0, #10
 80031da:	001a      	movs	r2, r3
 80031dc:	3601      	adds	r6, #1
 80031de:	6063      	str	r3, [r4, #4]
 80031e0:	7831      	ldrb	r1, [r6, #0]
 80031e2:	1c75      	adds	r5, r6, #1
 80031e4:	3930      	subs	r1, #48	; 0x30
 80031e6:	2909      	cmp	r1, #9
 80031e8:	d903      	bls.n	80031f2 <_vfiprintf_r+0x1d2>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0c5      	beq.n	800317a <_vfiprintf_r+0x15a>
 80031ee:	9209      	str	r2, [sp, #36]	; 0x24
 80031f0:	e7c3      	b.n	800317a <_vfiprintf_r+0x15a>
 80031f2:	4342      	muls	r2, r0
 80031f4:	002e      	movs	r6, r5
 80031f6:	2301      	movs	r3, #1
 80031f8:	1852      	adds	r2, r2, r1
 80031fa:	e7f1      	b.n	80031e0 <_vfiprintf_r+0x1c0>
 80031fc:	aa07      	add	r2, sp, #28
 80031fe:	9200      	str	r2, [sp, #0]
 8003200:	0021      	movs	r1, r4
 8003202:	003a      	movs	r2, r7
 8003204:	4b13      	ldr	r3, [pc, #76]	; (8003254 <_vfiprintf_r+0x234>)
 8003206:	9803      	ldr	r0, [sp, #12]
 8003208:	e000      	b.n	800320c <_vfiprintf_r+0x1ec>
 800320a:	bf00      	nop
 800320c:	9004      	str	r0, [sp, #16]
 800320e:	9b04      	ldr	r3, [sp, #16]
 8003210:	3301      	adds	r3, #1
 8003212:	d1d3      	bne.n	80031bc <_vfiprintf_r+0x19c>
 8003214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003216:	07db      	lsls	r3, r3, #31
 8003218:	d405      	bmi.n	8003226 <_vfiprintf_r+0x206>
 800321a:	89bb      	ldrh	r3, [r7, #12]
 800321c:	059b      	lsls	r3, r3, #22
 800321e:	d402      	bmi.n	8003226 <_vfiprintf_r+0x206>
 8003220:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003222:	f7ff fdae 	bl	8002d82 <__retarget_lock_release_recursive>
 8003226:	89bb      	ldrh	r3, [r7, #12]
 8003228:	065b      	lsls	r3, r3, #25
 800322a:	d500      	bpl.n	800322e <_vfiprintf_r+0x20e>
 800322c:	e71d      	b.n	800306a <_vfiprintf_r+0x4a>
 800322e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003230:	e71d      	b.n	800306e <_vfiprintf_r+0x4e>
 8003232:	aa07      	add	r2, sp, #28
 8003234:	9200      	str	r2, [sp, #0]
 8003236:	0021      	movs	r1, r4
 8003238:	003a      	movs	r2, r7
 800323a:	4b06      	ldr	r3, [pc, #24]	; (8003254 <_vfiprintf_r+0x234>)
 800323c:	9803      	ldr	r0, [sp, #12]
 800323e:	f000 f87b 	bl	8003338 <_printf_i>
 8003242:	e7e3      	b.n	800320c <_vfiprintf_r+0x1ec>
 8003244:	080039fd 	.word	0x080039fd
 8003248:	08003a03 	.word	0x08003a03
 800324c:	08003a07 	.word	0x08003a07
 8003250:	00000000 	.word	0x00000000
 8003254:	08002ffb 	.word	0x08002ffb

08003258 <_printf_common>:
 8003258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800325a:	0016      	movs	r6, r2
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	688a      	ldr	r2, [r1, #8]
 8003260:	690b      	ldr	r3, [r1, #16]
 8003262:	000c      	movs	r4, r1
 8003264:	9000      	str	r0, [sp, #0]
 8003266:	4293      	cmp	r3, r2
 8003268:	da00      	bge.n	800326c <_printf_common+0x14>
 800326a:	0013      	movs	r3, r2
 800326c:	0022      	movs	r2, r4
 800326e:	6033      	str	r3, [r6, #0]
 8003270:	3243      	adds	r2, #67	; 0x43
 8003272:	7812      	ldrb	r2, [r2, #0]
 8003274:	2a00      	cmp	r2, #0
 8003276:	d001      	beq.n	800327c <_printf_common+0x24>
 8003278:	3301      	adds	r3, #1
 800327a:	6033      	str	r3, [r6, #0]
 800327c:	6823      	ldr	r3, [r4, #0]
 800327e:	069b      	lsls	r3, r3, #26
 8003280:	d502      	bpl.n	8003288 <_printf_common+0x30>
 8003282:	6833      	ldr	r3, [r6, #0]
 8003284:	3302      	adds	r3, #2
 8003286:	6033      	str	r3, [r6, #0]
 8003288:	6822      	ldr	r2, [r4, #0]
 800328a:	2306      	movs	r3, #6
 800328c:	0015      	movs	r5, r2
 800328e:	401d      	ands	r5, r3
 8003290:	421a      	tst	r2, r3
 8003292:	d027      	beq.n	80032e4 <_printf_common+0x8c>
 8003294:	0023      	movs	r3, r4
 8003296:	3343      	adds	r3, #67	; 0x43
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	1e5a      	subs	r2, r3, #1
 800329c:	4193      	sbcs	r3, r2
 800329e:	6822      	ldr	r2, [r4, #0]
 80032a0:	0692      	lsls	r2, r2, #26
 80032a2:	d430      	bmi.n	8003306 <_printf_common+0xae>
 80032a4:	0022      	movs	r2, r4
 80032a6:	9901      	ldr	r1, [sp, #4]
 80032a8:	9800      	ldr	r0, [sp, #0]
 80032aa:	9d08      	ldr	r5, [sp, #32]
 80032ac:	3243      	adds	r2, #67	; 0x43
 80032ae:	47a8      	blx	r5
 80032b0:	3001      	adds	r0, #1
 80032b2:	d025      	beq.n	8003300 <_printf_common+0xa8>
 80032b4:	2206      	movs	r2, #6
 80032b6:	6823      	ldr	r3, [r4, #0]
 80032b8:	2500      	movs	r5, #0
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d105      	bne.n	80032cc <_printf_common+0x74>
 80032c0:	6833      	ldr	r3, [r6, #0]
 80032c2:	68e5      	ldr	r5, [r4, #12]
 80032c4:	1aed      	subs	r5, r5, r3
 80032c6:	43eb      	mvns	r3, r5
 80032c8:	17db      	asrs	r3, r3, #31
 80032ca:	401d      	ands	r5, r3
 80032cc:	68a3      	ldr	r3, [r4, #8]
 80032ce:	6922      	ldr	r2, [r4, #16]
 80032d0:	4293      	cmp	r3, r2
 80032d2:	dd01      	ble.n	80032d8 <_printf_common+0x80>
 80032d4:	1a9b      	subs	r3, r3, r2
 80032d6:	18ed      	adds	r5, r5, r3
 80032d8:	2600      	movs	r6, #0
 80032da:	42b5      	cmp	r5, r6
 80032dc:	d120      	bne.n	8003320 <_printf_common+0xc8>
 80032de:	2000      	movs	r0, #0
 80032e0:	e010      	b.n	8003304 <_printf_common+0xac>
 80032e2:	3501      	adds	r5, #1
 80032e4:	68e3      	ldr	r3, [r4, #12]
 80032e6:	6832      	ldr	r2, [r6, #0]
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	42ab      	cmp	r3, r5
 80032ec:	ddd2      	ble.n	8003294 <_printf_common+0x3c>
 80032ee:	0022      	movs	r2, r4
 80032f0:	2301      	movs	r3, #1
 80032f2:	9901      	ldr	r1, [sp, #4]
 80032f4:	9800      	ldr	r0, [sp, #0]
 80032f6:	9f08      	ldr	r7, [sp, #32]
 80032f8:	3219      	adds	r2, #25
 80032fa:	47b8      	blx	r7
 80032fc:	3001      	adds	r0, #1
 80032fe:	d1f0      	bne.n	80032e2 <_printf_common+0x8a>
 8003300:	2001      	movs	r0, #1
 8003302:	4240      	negs	r0, r0
 8003304:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003306:	2030      	movs	r0, #48	; 0x30
 8003308:	18e1      	adds	r1, r4, r3
 800330a:	3143      	adds	r1, #67	; 0x43
 800330c:	7008      	strb	r0, [r1, #0]
 800330e:	0021      	movs	r1, r4
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	3145      	adds	r1, #69	; 0x45
 8003314:	7809      	ldrb	r1, [r1, #0]
 8003316:	18a2      	adds	r2, r4, r2
 8003318:	3243      	adds	r2, #67	; 0x43
 800331a:	3302      	adds	r3, #2
 800331c:	7011      	strb	r1, [r2, #0]
 800331e:	e7c1      	b.n	80032a4 <_printf_common+0x4c>
 8003320:	0022      	movs	r2, r4
 8003322:	2301      	movs	r3, #1
 8003324:	9901      	ldr	r1, [sp, #4]
 8003326:	9800      	ldr	r0, [sp, #0]
 8003328:	9f08      	ldr	r7, [sp, #32]
 800332a:	321a      	adds	r2, #26
 800332c:	47b8      	blx	r7
 800332e:	3001      	adds	r0, #1
 8003330:	d0e6      	beq.n	8003300 <_printf_common+0xa8>
 8003332:	3601      	adds	r6, #1
 8003334:	e7d1      	b.n	80032da <_printf_common+0x82>
	...

08003338 <_printf_i>:
 8003338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800333a:	b08b      	sub	sp, #44	; 0x2c
 800333c:	9206      	str	r2, [sp, #24]
 800333e:	000a      	movs	r2, r1
 8003340:	3243      	adds	r2, #67	; 0x43
 8003342:	9307      	str	r3, [sp, #28]
 8003344:	9005      	str	r0, [sp, #20]
 8003346:	9204      	str	r2, [sp, #16]
 8003348:	7e0a      	ldrb	r2, [r1, #24]
 800334a:	000c      	movs	r4, r1
 800334c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800334e:	2a78      	cmp	r2, #120	; 0x78
 8003350:	d809      	bhi.n	8003366 <_printf_i+0x2e>
 8003352:	2a62      	cmp	r2, #98	; 0x62
 8003354:	d80b      	bhi.n	800336e <_printf_i+0x36>
 8003356:	2a00      	cmp	r2, #0
 8003358:	d100      	bne.n	800335c <_printf_i+0x24>
 800335a:	e0be      	b.n	80034da <_printf_i+0x1a2>
 800335c:	497c      	ldr	r1, [pc, #496]	; (8003550 <_printf_i+0x218>)
 800335e:	9103      	str	r1, [sp, #12]
 8003360:	2a58      	cmp	r2, #88	; 0x58
 8003362:	d100      	bne.n	8003366 <_printf_i+0x2e>
 8003364:	e093      	b.n	800348e <_printf_i+0x156>
 8003366:	0026      	movs	r6, r4
 8003368:	3642      	adds	r6, #66	; 0x42
 800336a:	7032      	strb	r2, [r6, #0]
 800336c:	e022      	b.n	80033b4 <_printf_i+0x7c>
 800336e:	0010      	movs	r0, r2
 8003370:	3863      	subs	r0, #99	; 0x63
 8003372:	2815      	cmp	r0, #21
 8003374:	d8f7      	bhi.n	8003366 <_printf_i+0x2e>
 8003376:	f7fc fed1 	bl	800011c <__gnu_thumb1_case_shi>
 800337a:	0016      	.short	0x0016
 800337c:	fff6001f 	.word	0xfff6001f
 8003380:	fff6fff6 	.word	0xfff6fff6
 8003384:	001ffff6 	.word	0x001ffff6
 8003388:	fff6fff6 	.word	0xfff6fff6
 800338c:	fff6fff6 	.word	0xfff6fff6
 8003390:	003600a3 	.word	0x003600a3
 8003394:	fff60083 	.word	0xfff60083
 8003398:	00b4fff6 	.word	0x00b4fff6
 800339c:	0036fff6 	.word	0x0036fff6
 80033a0:	fff6fff6 	.word	0xfff6fff6
 80033a4:	0087      	.short	0x0087
 80033a6:	0026      	movs	r6, r4
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	3642      	adds	r6, #66	; 0x42
 80033ac:	1d11      	adds	r1, r2, #4
 80033ae:	6019      	str	r1, [r3, #0]
 80033b0:	6813      	ldr	r3, [r2, #0]
 80033b2:	7033      	strb	r3, [r6, #0]
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0a2      	b.n	80034fe <_printf_i+0x1c6>
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	6809      	ldr	r1, [r1, #0]
 80033bc:	1d02      	adds	r2, r0, #4
 80033be:	060d      	lsls	r5, r1, #24
 80033c0:	d50b      	bpl.n	80033da <_printf_i+0xa2>
 80033c2:	6805      	ldr	r5, [r0, #0]
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	2d00      	cmp	r5, #0
 80033c8:	da03      	bge.n	80033d2 <_printf_i+0x9a>
 80033ca:	232d      	movs	r3, #45	; 0x2d
 80033cc:	9a04      	ldr	r2, [sp, #16]
 80033ce:	426d      	negs	r5, r5
 80033d0:	7013      	strb	r3, [r2, #0]
 80033d2:	4b5f      	ldr	r3, [pc, #380]	; (8003550 <_printf_i+0x218>)
 80033d4:	270a      	movs	r7, #10
 80033d6:	9303      	str	r3, [sp, #12]
 80033d8:	e01b      	b.n	8003412 <_printf_i+0xda>
 80033da:	6805      	ldr	r5, [r0, #0]
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	0649      	lsls	r1, r1, #25
 80033e0:	d5f1      	bpl.n	80033c6 <_printf_i+0x8e>
 80033e2:	b22d      	sxth	r5, r5
 80033e4:	e7ef      	b.n	80033c6 <_printf_i+0x8e>
 80033e6:	680d      	ldr	r5, [r1, #0]
 80033e8:	6819      	ldr	r1, [r3, #0]
 80033ea:	1d08      	adds	r0, r1, #4
 80033ec:	6018      	str	r0, [r3, #0]
 80033ee:	062e      	lsls	r6, r5, #24
 80033f0:	d501      	bpl.n	80033f6 <_printf_i+0xbe>
 80033f2:	680d      	ldr	r5, [r1, #0]
 80033f4:	e003      	b.n	80033fe <_printf_i+0xc6>
 80033f6:	066d      	lsls	r5, r5, #25
 80033f8:	d5fb      	bpl.n	80033f2 <_printf_i+0xba>
 80033fa:	680d      	ldr	r5, [r1, #0]
 80033fc:	b2ad      	uxth	r5, r5
 80033fe:	4b54      	ldr	r3, [pc, #336]	; (8003550 <_printf_i+0x218>)
 8003400:	2708      	movs	r7, #8
 8003402:	9303      	str	r3, [sp, #12]
 8003404:	2a6f      	cmp	r2, #111	; 0x6f
 8003406:	d000      	beq.n	800340a <_printf_i+0xd2>
 8003408:	3702      	adds	r7, #2
 800340a:	0023      	movs	r3, r4
 800340c:	2200      	movs	r2, #0
 800340e:	3343      	adds	r3, #67	; 0x43
 8003410:	701a      	strb	r2, [r3, #0]
 8003412:	6863      	ldr	r3, [r4, #4]
 8003414:	60a3      	str	r3, [r4, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	db03      	blt.n	8003422 <_printf_i+0xea>
 800341a:	2104      	movs	r1, #4
 800341c:	6822      	ldr	r2, [r4, #0]
 800341e:	438a      	bics	r2, r1
 8003420:	6022      	str	r2, [r4, #0]
 8003422:	2d00      	cmp	r5, #0
 8003424:	d102      	bne.n	800342c <_printf_i+0xf4>
 8003426:	9e04      	ldr	r6, [sp, #16]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00c      	beq.n	8003446 <_printf_i+0x10e>
 800342c:	9e04      	ldr	r6, [sp, #16]
 800342e:	0028      	movs	r0, r5
 8003430:	0039      	movs	r1, r7
 8003432:	f7fc ff03 	bl	800023c <__aeabi_uidivmod>
 8003436:	9b03      	ldr	r3, [sp, #12]
 8003438:	3e01      	subs	r6, #1
 800343a:	5c5b      	ldrb	r3, [r3, r1]
 800343c:	7033      	strb	r3, [r6, #0]
 800343e:	002b      	movs	r3, r5
 8003440:	0005      	movs	r5, r0
 8003442:	429f      	cmp	r7, r3
 8003444:	d9f3      	bls.n	800342e <_printf_i+0xf6>
 8003446:	2f08      	cmp	r7, #8
 8003448:	d109      	bne.n	800345e <_printf_i+0x126>
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	07db      	lsls	r3, r3, #31
 800344e:	d506      	bpl.n	800345e <_printf_i+0x126>
 8003450:	6862      	ldr	r2, [r4, #4]
 8003452:	6923      	ldr	r3, [r4, #16]
 8003454:	429a      	cmp	r2, r3
 8003456:	dc02      	bgt.n	800345e <_printf_i+0x126>
 8003458:	2330      	movs	r3, #48	; 0x30
 800345a:	3e01      	subs	r6, #1
 800345c:	7033      	strb	r3, [r6, #0]
 800345e:	9b04      	ldr	r3, [sp, #16]
 8003460:	1b9b      	subs	r3, r3, r6
 8003462:	6123      	str	r3, [r4, #16]
 8003464:	9b07      	ldr	r3, [sp, #28]
 8003466:	0021      	movs	r1, r4
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	9805      	ldr	r0, [sp, #20]
 800346c:	9b06      	ldr	r3, [sp, #24]
 800346e:	aa09      	add	r2, sp, #36	; 0x24
 8003470:	f7ff fef2 	bl	8003258 <_printf_common>
 8003474:	3001      	adds	r0, #1
 8003476:	d147      	bne.n	8003508 <_printf_i+0x1d0>
 8003478:	2001      	movs	r0, #1
 800347a:	4240      	negs	r0, r0
 800347c:	b00b      	add	sp, #44	; 0x2c
 800347e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003480:	2220      	movs	r2, #32
 8003482:	6809      	ldr	r1, [r1, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	6022      	str	r2, [r4, #0]
 8003488:	2278      	movs	r2, #120	; 0x78
 800348a:	4932      	ldr	r1, [pc, #200]	; (8003554 <_printf_i+0x21c>)
 800348c:	9103      	str	r1, [sp, #12]
 800348e:	0021      	movs	r1, r4
 8003490:	3145      	adds	r1, #69	; 0x45
 8003492:	700a      	strb	r2, [r1, #0]
 8003494:	6819      	ldr	r1, [r3, #0]
 8003496:	6822      	ldr	r2, [r4, #0]
 8003498:	c920      	ldmia	r1!, {r5}
 800349a:	0610      	lsls	r0, r2, #24
 800349c:	d402      	bmi.n	80034a4 <_printf_i+0x16c>
 800349e:	0650      	lsls	r0, r2, #25
 80034a0:	d500      	bpl.n	80034a4 <_printf_i+0x16c>
 80034a2:	b2ad      	uxth	r5, r5
 80034a4:	6019      	str	r1, [r3, #0]
 80034a6:	07d3      	lsls	r3, r2, #31
 80034a8:	d502      	bpl.n	80034b0 <_printf_i+0x178>
 80034aa:	2320      	movs	r3, #32
 80034ac:	4313      	orrs	r3, r2
 80034ae:	6023      	str	r3, [r4, #0]
 80034b0:	2710      	movs	r7, #16
 80034b2:	2d00      	cmp	r5, #0
 80034b4:	d1a9      	bne.n	800340a <_printf_i+0xd2>
 80034b6:	2220      	movs	r2, #32
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	4393      	bics	r3, r2
 80034bc:	6023      	str	r3, [r4, #0]
 80034be:	e7a4      	b.n	800340a <_printf_i+0xd2>
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	680d      	ldr	r5, [r1, #0]
 80034c4:	1d10      	adds	r0, r2, #4
 80034c6:	6949      	ldr	r1, [r1, #20]
 80034c8:	6018      	str	r0, [r3, #0]
 80034ca:	6813      	ldr	r3, [r2, #0]
 80034cc:	062e      	lsls	r6, r5, #24
 80034ce:	d501      	bpl.n	80034d4 <_printf_i+0x19c>
 80034d0:	6019      	str	r1, [r3, #0]
 80034d2:	e002      	b.n	80034da <_printf_i+0x1a2>
 80034d4:	066d      	lsls	r5, r5, #25
 80034d6:	d5fb      	bpl.n	80034d0 <_printf_i+0x198>
 80034d8:	8019      	strh	r1, [r3, #0]
 80034da:	2300      	movs	r3, #0
 80034dc:	9e04      	ldr	r6, [sp, #16]
 80034de:	6123      	str	r3, [r4, #16]
 80034e0:	e7c0      	b.n	8003464 <_printf_i+0x12c>
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	1d11      	adds	r1, r2, #4
 80034e6:	6019      	str	r1, [r3, #0]
 80034e8:	6816      	ldr	r6, [r2, #0]
 80034ea:	2100      	movs	r1, #0
 80034ec:	0030      	movs	r0, r6
 80034ee:	6862      	ldr	r2, [r4, #4]
 80034f0:	f000 f994 	bl	800381c <memchr>
 80034f4:	2800      	cmp	r0, #0
 80034f6:	d001      	beq.n	80034fc <_printf_i+0x1c4>
 80034f8:	1b80      	subs	r0, r0, r6
 80034fa:	6060      	str	r0, [r4, #4]
 80034fc:	6863      	ldr	r3, [r4, #4]
 80034fe:	6123      	str	r3, [r4, #16]
 8003500:	2300      	movs	r3, #0
 8003502:	9a04      	ldr	r2, [sp, #16]
 8003504:	7013      	strb	r3, [r2, #0]
 8003506:	e7ad      	b.n	8003464 <_printf_i+0x12c>
 8003508:	0032      	movs	r2, r6
 800350a:	6923      	ldr	r3, [r4, #16]
 800350c:	9906      	ldr	r1, [sp, #24]
 800350e:	9805      	ldr	r0, [sp, #20]
 8003510:	9d07      	ldr	r5, [sp, #28]
 8003512:	47a8      	blx	r5
 8003514:	3001      	adds	r0, #1
 8003516:	d0af      	beq.n	8003478 <_printf_i+0x140>
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	079b      	lsls	r3, r3, #30
 800351c:	d415      	bmi.n	800354a <_printf_i+0x212>
 800351e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003520:	68e0      	ldr	r0, [r4, #12]
 8003522:	4298      	cmp	r0, r3
 8003524:	daaa      	bge.n	800347c <_printf_i+0x144>
 8003526:	0018      	movs	r0, r3
 8003528:	e7a8      	b.n	800347c <_printf_i+0x144>
 800352a:	0022      	movs	r2, r4
 800352c:	2301      	movs	r3, #1
 800352e:	9906      	ldr	r1, [sp, #24]
 8003530:	9805      	ldr	r0, [sp, #20]
 8003532:	9e07      	ldr	r6, [sp, #28]
 8003534:	3219      	adds	r2, #25
 8003536:	47b0      	blx	r6
 8003538:	3001      	adds	r0, #1
 800353a:	d09d      	beq.n	8003478 <_printf_i+0x140>
 800353c:	3501      	adds	r5, #1
 800353e:	68e3      	ldr	r3, [r4, #12]
 8003540:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	42ab      	cmp	r3, r5
 8003546:	dcf0      	bgt.n	800352a <_printf_i+0x1f2>
 8003548:	e7e9      	b.n	800351e <_printf_i+0x1e6>
 800354a:	2500      	movs	r5, #0
 800354c:	e7f7      	b.n	800353e <_printf_i+0x206>
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	08003a0e 	.word	0x08003a0e
 8003554:	08003a1f 	.word	0x08003a1f

08003558 <__sflush_r>:
 8003558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800355a:	898b      	ldrh	r3, [r1, #12]
 800355c:	0005      	movs	r5, r0
 800355e:	000c      	movs	r4, r1
 8003560:	071a      	lsls	r2, r3, #28
 8003562:	d45c      	bmi.n	800361e <__sflush_r+0xc6>
 8003564:	684a      	ldr	r2, [r1, #4]
 8003566:	2a00      	cmp	r2, #0
 8003568:	dc04      	bgt.n	8003574 <__sflush_r+0x1c>
 800356a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800356c:	2a00      	cmp	r2, #0
 800356e:	dc01      	bgt.n	8003574 <__sflush_r+0x1c>
 8003570:	2000      	movs	r0, #0
 8003572:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003574:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003576:	2f00      	cmp	r7, #0
 8003578:	d0fa      	beq.n	8003570 <__sflush_r+0x18>
 800357a:	2200      	movs	r2, #0
 800357c:	2080      	movs	r0, #128	; 0x80
 800357e:	682e      	ldr	r6, [r5, #0]
 8003580:	602a      	str	r2, [r5, #0]
 8003582:	001a      	movs	r2, r3
 8003584:	0140      	lsls	r0, r0, #5
 8003586:	6a21      	ldr	r1, [r4, #32]
 8003588:	4002      	ands	r2, r0
 800358a:	4203      	tst	r3, r0
 800358c:	d034      	beq.n	80035f8 <__sflush_r+0xa0>
 800358e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003590:	89a3      	ldrh	r3, [r4, #12]
 8003592:	075b      	lsls	r3, r3, #29
 8003594:	d506      	bpl.n	80035a4 <__sflush_r+0x4c>
 8003596:	6863      	ldr	r3, [r4, #4]
 8003598:	1ac0      	subs	r0, r0, r3
 800359a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <__sflush_r+0x4c>
 80035a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035a2:	1ac0      	subs	r0, r0, r3
 80035a4:	0002      	movs	r2, r0
 80035a6:	2300      	movs	r3, #0
 80035a8:	0028      	movs	r0, r5
 80035aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80035ac:	6a21      	ldr	r1, [r4, #32]
 80035ae:	47b8      	blx	r7
 80035b0:	89a2      	ldrh	r2, [r4, #12]
 80035b2:	1c43      	adds	r3, r0, #1
 80035b4:	d106      	bne.n	80035c4 <__sflush_r+0x6c>
 80035b6:	6829      	ldr	r1, [r5, #0]
 80035b8:	291d      	cmp	r1, #29
 80035ba:	d82c      	bhi.n	8003616 <__sflush_r+0xbe>
 80035bc:	4b2a      	ldr	r3, [pc, #168]	; (8003668 <__sflush_r+0x110>)
 80035be:	410b      	asrs	r3, r1
 80035c0:	07db      	lsls	r3, r3, #31
 80035c2:	d428      	bmi.n	8003616 <__sflush_r+0xbe>
 80035c4:	2300      	movs	r3, #0
 80035c6:	6063      	str	r3, [r4, #4]
 80035c8:	6923      	ldr	r3, [r4, #16]
 80035ca:	6023      	str	r3, [r4, #0]
 80035cc:	04d2      	lsls	r2, r2, #19
 80035ce:	d505      	bpl.n	80035dc <__sflush_r+0x84>
 80035d0:	1c43      	adds	r3, r0, #1
 80035d2:	d102      	bne.n	80035da <__sflush_r+0x82>
 80035d4:	682b      	ldr	r3, [r5, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d100      	bne.n	80035dc <__sflush_r+0x84>
 80035da:	6560      	str	r0, [r4, #84]	; 0x54
 80035dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035de:	602e      	str	r6, [r5, #0]
 80035e0:	2900      	cmp	r1, #0
 80035e2:	d0c5      	beq.n	8003570 <__sflush_r+0x18>
 80035e4:	0023      	movs	r3, r4
 80035e6:	3344      	adds	r3, #68	; 0x44
 80035e8:	4299      	cmp	r1, r3
 80035ea:	d002      	beq.n	80035f2 <__sflush_r+0x9a>
 80035ec:	0028      	movs	r0, r5
 80035ee:	f7ff fbe7 	bl	8002dc0 <_free_r>
 80035f2:	2000      	movs	r0, #0
 80035f4:	6360      	str	r0, [r4, #52]	; 0x34
 80035f6:	e7bc      	b.n	8003572 <__sflush_r+0x1a>
 80035f8:	2301      	movs	r3, #1
 80035fa:	0028      	movs	r0, r5
 80035fc:	47b8      	blx	r7
 80035fe:	1c43      	adds	r3, r0, #1
 8003600:	d1c6      	bne.n	8003590 <__sflush_r+0x38>
 8003602:	682b      	ldr	r3, [r5, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0c3      	beq.n	8003590 <__sflush_r+0x38>
 8003608:	2b1d      	cmp	r3, #29
 800360a:	d001      	beq.n	8003610 <__sflush_r+0xb8>
 800360c:	2b16      	cmp	r3, #22
 800360e:	d101      	bne.n	8003614 <__sflush_r+0xbc>
 8003610:	602e      	str	r6, [r5, #0]
 8003612:	e7ad      	b.n	8003570 <__sflush_r+0x18>
 8003614:	89a2      	ldrh	r2, [r4, #12]
 8003616:	2340      	movs	r3, #64	; 0x40
 8003618:	4313      	orrs	r3, r2
 800361a:	81a3      	strh	r3, [r4, #12]
 800361c:	e7a9      	b.n	8003572 <__sflush_r+0x1a>
 800361e:	690e      	ldr	r6, [r1, #16]
 8003620:	2e00      	cmp	r6, #0
 8003622:	d0a5      	beq.n	8003570 <__sflush_r+0x18>
 8003624:	680f      	ldr	r7, [r1, #0]
 8003626:	600e      	str	r6, [r1, #0]
 8003628:	1bba      	subs	r2, r7, r6
 800362a:	9201      	str	r2, [sp, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	079b      	lsls	r3, r3, #30
 8003630:	d100      	bne.n	8003634 <__sflush_r+0xdc>
 8003632:	694a      	ldr	r2, [r1, #20]
 8003634:	60a2      	str	r2, [r4, #8]
 8003636:	9b01      	ldr	r3, [sp, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	dd99      	ble.n	8003570 <__sflush_r+0x18>
 800363c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800363e:	0032      	movs	r2, r6
 8003640:	001f      	movs	r7, r3
 8003642:	0028      	movs	r0, r5
 8003644:	9b01      	ldr	r3, [sp, #4]
 8003646:	6a21      	ldr	r1, [r4, #32]
 8003648:	47b8      	blx	r7
 800364a:	2800      	cmp	r0, #0
 800364c:	dc06      	bgt.n	800365c <__sflush_r+0x104>
 800364e:	2340      	movs	r3, #64	; 0x40
 8003650:	2001      	movs	r0, #1
 8003652:	89a2      	ldrh	r2, [r4, #12]
 8003654:	4240      	negs	r0, r0
 8003656:	4313      	orrs	r3, r2
 8003658:	81a3      	strh	r3, [r4, #12]
 800365a:	e78a      	b.n	8003572 <__sflush_r+0x1a>
 800365c:	9b01      	ldr	r3, [sp, #4]
 800365e:	1836      	adds	r6, r6, r0
 8003660:	1a1b      	subs	r3, r3, r0
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	e7e7      	b.n	8003636 <__sflush_r+0xde>
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	dfbffffe 	.word	0xdfbffffe

0800366c <_fflush_r>:
 800366c:	690b      	ldr	r3, [r1, #16]
 800366e:	b570      	push	{r4, r5, r6, lr}
 8003670:	0005      	movs	r5, r0
 8003672:	000c      	movs	r4, r1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d102      	bne.n	800367e <_fflush_r+0x12>
 8003678:	2500      	movs	r5, #0
 800367a:	0028      	movs	r0, r5
 800367c:	bd70      	pop	{r4, r5, r6, pc}
 800367e:	2800      	cmp	r0, #0
 8003680:	d004      	beq.n	800368c <_fflush_r+0x20>
 8003682:	6a03      	ldr	r3, [r0, #32]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <_fflush_r+0x20>
 8003688:	f7ff f910 	bl	80028ac <__sinit>
 800368c:	220c      	movs	r2, #12
 800368e:	5ea3      	ldrsh	r3, [r4, r2]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f1      	beq.n	8003678 <_fflush_r+0xc>
 8003694:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003696:	07d2      	lsls	r2, r2, #31
 8003698:	d404      	bmi.n	80036a4 <_fflush_r+0x38>
 800369a:	059b      	lsls	r3, r3, #22
 800369c:	d402      	bmi.n	80036a4 <_fflush_r+0x38>
 800369e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036a0:	f7ff fb6e 	bl	8002d80 <__retarget_lock_acquire_recursive>
 80036a4:	0028      	movs	r0, r5
 80036a6:	0021      	movs	r1, r4
 80036a8:	f7ff ff56 	bl	8003558 <__sflush_r>
 80036ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036ae:	0005      	movs	r5, r0
 80036b0:	07db      	lsls	r3, r3, #31
 80036b2:	d4e2      	bmi.n	800367a <_fflush_r+0xe>
 80036b4:	89a3      	ldrh	r3, [r4, #12]
 80036b6:	059b      	lsls	r3, r3, #22
 80036b8:	d4df      	bmi.n	800367a <_fflush_r+0xe>
 80036ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036bc:	f7ff fb61 	bl	8002d82 <__retarget_lock_release_recursive>
 80036c0:	e7db      	b.n	800367a <_fflush_r+0xe>
	...

080036c4 <fiprintf>:
 80036c4:	b40e      	push	{r1, r2, r3}
 80036c6:	b517      	push	{r0, r1, r2, r4, lr}
 80036c8:	4c05      	ldr	r4, [pc, #20]	; (80036e0 <fiprintf+0x1c>)
 80036ca:	ab05      	add	r3, sp, #20
 80036cc:	cb04      	ldmia	r3!, {r2}
 80036ce:	0001      	movs	r1, r0
 80036d0:	6820      	ldr	r0, [r4, #0]
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	f7ff fca4 	bl	8003020 <_vfiprintf_r>
 80036d8:	bc1e      	pop	{r1, r2, r3, r4}
 80036da:	bc08      	pop	{r3}
 80036dc:	b003      	add	sp, #12
 80036de:	4718      	bx	r3
 80036e0:	20000064 	.word	0x20000064

080036e4 <__swhatbuf_r>:
 80036e4:	b570      	push	{r4, r5, r6, lr}
 80036e6:	000e      	movs	r6, r1
 80036e8:	001d      	movs	r5, r3
 80036ea:	230e      	movs	r3, #14
 80036ec:	5ec9      	ldrsh	r1, [r1, r3]
 80036ee:	0014      	movs	r4, r2
 80036f0:	b096      	sub	sp, #88	; 0x58
 80036f2:	2900      	cmp	r1, #0
 80036f4:	da0c      	bge.n	8003710 <__swhatbuf_r+0x2c>
 80036f6:	89b2      	ldrh	r2, [r6, #12]
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	0011      	movs	r1, r2
 80036fc:	4019      	ands	r1, r3
 80036fe:	421a      	tst	r2, r3
 8003700:	d013      	beq.n	800372a <__swhatbuf_r+0x46>
 8003702:	2100      	movs	r1, #0
 8003704:	3b40      	subs	r3, #64	; 0x40
 8003706:	2000      	movs	r0, #0
 8003708:	6029      	str	r1, [r5, #0]
 800370a:	6023      	str	r3, [r4, #0]
 800370c:	b016      	add	sp, #88	; 0x58
 800370e:	bd70      	pop	{r4, r5, r6, pc}
 8003710:	466a      	mov	r2, sp
 8003712:	f000 f84d 	bl	80037b0 <_fstat_r>
 8003716:	2800      	cmp	r0, #0
 8003718:	dbed      	blt.n	80036f6 <__swhatbuf_r+0x12>
 800371a:	23f0      	movs	r3, #240	; 0xf0
 800371c:	9901      	ldr	r1, [sp, #4]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	4019      	ands	r1, r3
 8003722:	4b03      	ldr	r3, [pc, #12]	; (8003730 <__swhatbuf_r+0x4c>)
 8003724:	18c9      	adds	r1, r1, r3
 8003726:	424b      	negs	r3, r1
 8003728:	4159      	adcs	r1, r3
 800372a:	2380      	movs	r3, #128	; 0x80
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	e7ea      	b.n	8003706 <__swhatbuf_r+0x22>
 8003730:	ffffe000 	.word	0xffffe000

08003734 <__smakebuf_r>:
 8003734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003736:	2602      	movs	r6, #2
 8003738:	898b      	ldrh	r3, [r1, #12]
 800373a:	0005      	movs	r5, r0
 800373c:	000c      	movs	r4, r1
 800373e:	4233      	tst	r3, r6
 8003740:	d006      	beq.n	8003750 <__smakebuf_r+0x1c>
 8003742:	0023      	movs	r3, r4
 8003744:	3347      	adds	r3, #71	; 0x47
 8003746:	6023      	str	r3, [r4, #0]
 8003748:	6123      	str	r3, [r4, #16]
 800374a:	2301      	movs	r3, #1
 800374c:	6163      	str	r3, [r4, #20]
 800374e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003750:	466a      	mov	r2, sp
 8003752:	ab01      	add	r3, sp, #4
 8003754:	f7ff ffc6 	bl	80036e4 <__swhatbuf_r>
 8003758:	9900      	ldr	r1, [sp, #0]
 800375a:	0007      	movs	r7, r0
 800375c:	0028      	movs	r0, r5
 800375e:	f7ff fba5 	bl	8002eac <_malloc_r>
 8003762:	2800      	cmp	r0, #0
 8003764:	d108      	bne.n	8003778 <__smakebuf_r+0x44>
 8003766:	220c      	movs	r2, #12
 8003768:	5ea3      	ldrsh	r3, [r4, r2]
 800376a:	059a      	lsls	r2, r3, #22
 800376c:	d4ef      	bmi.n	800374e <__smakebuf_r+0x1a>
 800376e:	2203      	movs	r2, #3
 8003770:	4393      	bics	r3, r2
 8003772:	431e      	orrs	r6, r3
 8003774:	81a6      	strh	r6, [r4, #12]
 8003776:	e7e4      	b.n	8003742 <__smakebuf_r+0xe>
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	89a2      	ldrh	r2, [r4, #12]
 800377c:	6020      	str	r0, [r4, #0]
 800377e:	4313      	orrs	r3, r2
 8003780:	81a3      	strh	r3, [r4, #12]
 8003782:	9b00      	ldr	r3, [sp, #0]
 8003784:	6120      	str	r0, [r4, #16]
 8003786:	6163      	str	r3, [r4, #20]
 8003788:	9b01      	ldr	r3, [sp, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00c      	beq.n	80037a8 <__smakebuf_r+0x74>
 800378e:	0028      	movs	r0, r5
 8003790:	230e      	movs	r3, #14
 8003792:	5ee1      	ldrsh	r1, [r4, r3]
 8003794:	f000 f81e 	bl	80037d4 <_isatty_r>
 8003798:	2800      	cmp	r0, #0
 800379a:	d005      	beq.n	80037a8 <__smakebuf_r+0x74>
 800379c:	2303      	movs	r3, #3
 800379e:	89a2      	ldrh	r2, [r4, #12]
 80037a0:	439a      	bics	r2, r3
 80037a2:	3b02      	subs	r3, #2
 80037a4:	4313      	orrs	r3, r2
 80037a6:	81a3      	strh	r3, [r4, #12]
 80037a8:	89a3      	ldrh	r3, [r4, #12]
 80037aa:	433b      	orrs	r3, r7
 80037ac:	81a3      	strh	r3, [r4, #12]
 80037ae:	e7ce      	b.n	800374e <__smakebuf_r+0x1a>

080037b0 <_fstat_r>:
 80037b0:	2300      	movs	r3, #0
 80037b2:	b570      	push	{r4, r5, r6, lr}
 80037b4:	4d06      	ldr	r5, [pc, #24]	; (80037d0 <_fstat_r+0x20>)
 80037b6:	0004      	movs	r4, r0
 80037b8:	0008      	movs	r0, r1
 80037ba:	0011      	movs	r1, r2
 80037bc:	602b      	str	r3, [r5, #0]
 80037be:	f7fc fffe 	bl	80007be <_fstat>
 80037c2:	1c43      	adds	r3, r0, #1
 80037c4:	d103      	bne.n	80037ce <_fstat_r+0x1e>
 80037c6:	682b      	ldr	r3, [r5, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d000      	beq.n	80037ce <_fstat_r+0x1e>
 80037cc:	6023      	str	r3, [r4, #0]
 80037ce:	bd70      	pop	{r4, r5, r6, pc}
 80037d0:	200003d8 	.word	0x200003d8

080037d4 <_isatty_r>:
 80037d4:	2300      	movs	r3, #0
 80037d6:	b570      	push	{r4, r5, r6, lr}
 80037d8:	4d06      	ldr	r5, [pc, #24]	; (80037f4 <_isatty_r+0x20>)
 80037da:	0004      	movs	r4, r0
 80037dc:	0008      	movs	r0, r1
 80037de:	602b      	str	r3, [r5, #0]
 80037e0:	f7fc fffb 	bl	80007da <_isatty>
 80037e4:	1c43      	adds	r3, r0, #1
 80037e6:	d103      	bne.n	80037f0 <_isatty_r+0x1c>
 80037e8:	682b      	ldr	r3, [r5, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d000      	beq.n	80037f0 <_isatty_r+0x1c>
 80037ee:	6023      	str	r3, [r4, #0]
 80037f0:	bd70      	pop	{r4, r5, r6, pc}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	200003d8 	.word	0x200003d8

080037f8 <_sbrk_r>:
 80037f8:	2300      	movs	r3, #0
 80037fa:	b570      	push	{r4, r5, r6, lr}
 80037fc:	4d06      	ldr	r5, [pc, #24]	; (8003818 <_sbrk_r+0x20>)
 80037fe:	0004      	movs	r4, r0
 8003800:	0008      	movs	r0, r1
 8003802:	602b      	str	r3, [r5, #0]
 8003804:	f7fc fffe 	bl	8000804 <_sbrk>
 8003808:	1c43      	adds	r3, r0, #1
 800380a:	d103      	bne.n	8003814 <_sbrk_r+0x1c>
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d000      	beq.n	8003814 <_sbrk_r+0x1c>
 8003812:	6023      	str	r3, [r4, #0]
 8003814:	bd70      	pop	{r4, r5, r6, pc}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	200003d8 	.word	0x200003d8

0800381c <memchr>:
 800381c:	b2c9      	uxtb	r1, r1
 800381e:	1882      	adds	r2, r0, r2
 8003820:	4290      	cmp	r0, r2
 8003822:	d101      	bne.n	8003828 <memchr+0xc>
 8003824:	2000      	movs	r0, #0
 8003826:	4770      	bx	lr
 8003828:	7803      	ldrb	r3, [r0, #0]
 800382a:	428b      	cmp	r3, r1
 800382c:	d0fb      	beq.n	8003826 <memchr+0xa>
 800382e:	3001      	adds	r0, #1
 8003830:	e7f6      	b.n	8003820 <memchr+0x4>

08003832 <abort>:
 8003832:	2006      	movs	r0, #6
 8003834:	b510      	push	{r4, lr}
 8003836:	f000 f82d 	bl	8003894 <raise>
 800383a:	2001      	movs	r0, #1
 800383c:	f7fc ff8c 	bl	8000758 <_exit>

08003840 <_raise_r>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	0004      	movs	r4, r0
 8003844:	000d      	movs	r5, r1
 8003846:	291f      	cmp	r1, #31
 8003848:	d904      	bls.n	8003854 <_raise_r+0x14>
 800384a:	2316      	movs	r3, #22
 800384c:	6003      	str	r3, [r0, #0]
 800384e:	2001      	movs	r0, #1
 8003850:	4240      	negs	r0, r0
 8003852:	bd70      	pop	{r4, r5, r6, pc}
 8003854:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d004      	beq.n	8003864 <_raise_r+0x24>
 800385a:	008a      	lsls	r2, r1, #2
 800385c:	189b      	adds	r3, r3, r2
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	2a00      	cmp	r2, #0
 8003862:	d108      	bne.n	8003876 <_raise_r+0x36>
 8003864:	0020      	movs	r0, r4
 8003866:	f000 f831 	bl	80038cc <_getpid_r>
 800386a:	002a      	movs	r2, r5
 800386c:	0001      	movs	r1, r0
 800386e:	0020      	movs	r0, r4
 8003870:	f000 f81a 	bl	80038a8 <_kill_r>
 8003874:	e7ed      	b.n	8003852 <_raise_r+0x12>
 8003876:	2000      	movs	r0, #0
 8003878:	2a01      	cmp	r2, #1
 800387a:	d0ea      	beq.n	8003852 <_raise_r+0x12>
 800387c:	1c51      	adds	r1, r2, #1
 800387e:	d103      	bne.n	8003888 <_raise_r+0x48>
 8003880:	2316      	movs	r3, #22
 8003882:	3001      	adds	r0, #1
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	e7e4      	b.n	8003852 <_raise_r+0x12>
 8003888:	2400      	movs	r4, #0
 800388a:	0028      	movs	r0, r5
 800388c:	601c      	str	r4, [r3, #0]
 800388e:	4790      	blx	r2
 8003890:	0020      	movs	r0, r4
 8003892:	e7de      	b.n	8003852 <_raise_r+0x12>

08003894 <raise>:
 8003894:	b510      	push	{r4, lr}
 8003896:	4b03      	ldr	r3, [pc, #12]	; (80038a4 <raise+0x10>)
 8003898:	0001      	movs	r1, r0
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	f7ff ffd0 	bl	8003840 <_raise_r>
 80038a0:	bd10      	pop	{r4, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	20000064 	.word	0x20000064

080038a8 <_kill_r>:
 80038a8:	2300      	movs	r3, #0
 80038aa:	b570      	push	{r4, r5, r6, lr}
 80038ac:	4d06      	ldr	r5, [pc, #24]	; (80038c8 <_kill_r+0x20>)
 80038ae:	0004      	movs	r4, r0
 80038b0:	0008      	movs	r0, r1
 80038b2:	0011      	movs	r1, r2
 80038b4:	602b      	str	r3, [r5, #0]
 80038b6:	f7fc ff3f 	bl	8000738 <_kill>
 80038ba:	1c43      	adds	r3, r0, #1
 80038bc:	d103      	bne.n	80038c6 <_kill_r+0x1e>
 80038be:	682b      	ldr	r3, [r5, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d000      	beq.n	80038c6 <_kill_r+0x1e>
 80038c4:	6023      	str	r3, [r4, #0]
 80038c6:	bd70      	pop	{r4, r5, r6, pc}
 80038c8:	200003d8 	.word	0x200003d8

080038cc <_getpid_r>:
 80038cc:	b510      	push	{r4, lr}
 80038ce:	f7fc ff2d 	bl	800072c <_getpid>
 80038d2:	bd10      	pop	{r4, pc}

080038d4 <_init>:
 80038d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038da:	bc08      	pop	{r3}
 80038dc:	469e      	mov	lr, r3
 80038de:	4770      	bx	lr

080038e0 <_fini>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e6:	bc08      	pop	{r3}
 80038e8:	469e      	mov	lr, r3
 80038ea:	4770      	bx	lr
